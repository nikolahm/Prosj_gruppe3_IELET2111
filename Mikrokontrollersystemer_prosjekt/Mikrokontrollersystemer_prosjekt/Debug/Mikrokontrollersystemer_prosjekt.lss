
Mikrokontrollersystemer_prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000056c  00804000  00002792  00002826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000064  0080456c  0080456c  00002d92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002e30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008274  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c9e  00000000  00000000  0000b314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cb9  00000000  00000000  0000efb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  00010c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034cb  00000000  00000000  0001129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000152c  00000000  00000000  00014767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00015c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__vector_14>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      68:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      6c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      70:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      74:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      78:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      7c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      80:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      84:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      88:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      8c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      90:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      94:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      98:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      9c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      a8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      ac:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      b8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      bc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      c8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      cc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      d4:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_53>
      d8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      dc:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      e8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      ec:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      f0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      f4:	6e 06       	cpc	r6, r30
      f6:	98 06       	cpc	r9, r24
      f8:	b8 06       	cpc	r11, r24
      fa:	d8 06       	cpc	r13, r24
      fc:	f8 06       	cpc	r15, r24
      fe:	18 07       	cpc	r17, r24
     100:	38 07       	cpc	r19, r24
     102:	58 07       	cpc	r21, r24
     104:	7a 07       	cpc	r23, r26
     106:	88 08       	sbc	r8, r8
     108:	94 08       	sbc	r9, r4
     10a:	a0 08       	sbc	r10, r0
     10c:	ac 08       	sbc	r10, r12
     10e:	b8 08       	sbc	r11, r8
     110:	c4 08       	sbc	r12, r4
     112:	d0 08       	sbc	r13, r0
     114:	dc 08       	sbc	r13, r12
     116:	e8 08       	sbc	r14, r8
     118:	07 63       	ori	r16, 0x37	; 55
     11a:	42 36       	cpi	r20, 0x62	; 98
     11c:	b7 9b       	sbis	0x16, 7	; 22
     11e:	d8 a7       	std	Y+40, r29	; 0x28
     120:	1a 39       	cpi	r17, 0x9A	; 154
     122:	68 56       	subi	r22, 0x68	; 104
     124:	18 ae       	std	Y+56, r1	; 0x38
     126:	ba ab       	std	Y+50, r27	; 0x32
     128:	55 8c       	ldd	r5, Z+29	; 0x1d
     12a:	1d 3c       	cpi	r17, 0xCD	; 205
     12c:	b7 cc       	rjmp	.-1682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     12e:	57 63       	ori	r21, 0x37	; 55
     130:	bd 6d       	ori	r27, 0xDD	; 221
     132:	ed fd       	.word	0xfded	; ????
     134:	75 3e       	cpi	r23, 0xE5	; 229
     136:	f6 17       	cp	r31, r22
     138:	72 31       	cpi	r23, 0x12	; 18
     13a:	bf 00       	.word	0x00bf	; ????
     13c:	00 00       	nop
     13e:	80 3f       	cpi	r24, 0xF0	; 240
     140:	08 00       	.word	0x0008	; ????
     142:	00 00       	nop
     144:	be 92       	st	-X, r11
     146:	24 49       	sbci	r18, 0x94	; 148
     148:	12 3e       	cpi	r17, 0xE2	; 226
     14a:	ab aa       	std	Y+51, r10	; 0x33
     14c:	aa 2a       	or	r10, r26
     14e:	be cd       	rjmp	.-1156   	; 0xfffffccc <__eeprom_end+0xff7efccc>
     150:	cc cc       	rjmp	.-1640   	; 0xfffffaea <__eeprom_end+0xff7efaea>
     152:	4c 3e       	cpi	r20, 0xEC	; 236
     154:	00 00       	nop
     156:	00 80       	ld	r0, Z
     158:	be ab       	std	Y+54, r27	; 0x36
     15a:	aa aa       	std	Y+50, r10	; 0x32
     15c:	aa 3e       	cpi	r26, 0xEA	; 234
     15e:	00 00       	nop
     160:	00 00       	nop
     162:	bf 00       	.word	0x00bf	; ????
     164:	00 00       	nop
     166:	80 3f       	cpi	r24, 0xF0	; 240
     168:	00 00       	nop
     16a:	00 00       	nop
     16c:	00 08       	sbc	r0, r0
     16e:	41 78       	andi	r20, 0x81	; 129
     170:	d3 bb       	out	0x13, r29	; 19
     172:	43 87       	std	Z+11, r20	; 0x0b
     174:	d1 13       	cpse	r29, r17
     176:	3d 19       	sub	r19, r13
     178:	0e 3c       	cpi	r16, 0xCE	; 206
     17a:	c3 bd       	out	0x23, r28	; 35
     17c:	42 82       	std	Z+2, r4	; 0x02
     17e:	ad 2b       	or	r26, r29
     180:	3e 68       	ori	r19, 0x8E	; 142
     182:	ec 82       	std	Y+4, r14	; 0x04
     184:	76 be       	out	0x36, r7	; 54
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e1 a9       	ldd	r30, Z+49	; 0x31
     18a:	3e 4c       	sbci	r19, 0xCE	; 206
     18c:	80 ef       	ldi	r24, 0xF0	; 240
     18e:	ff be       	out	0x3f, r15	; 63
     190:	01 c4       	rjmp	.+2050   	; 0x994 <__vector_53+0x4e>
     192:	ff 7f       	andi	r31, 0xFF	; 255
     194:	3f 00       	.word	0x003f	; ????
     196:	00 00       	nop
	...

0000019a <__ctors_end>:
     19a:	11 24       	eor	r1, r1
     19c:	1f be       	out	0x3f, r1	; 63
     19e:	cf ef       	ldi	r28, 0xFF	; 255
     1a0:	cd bf       	out	0x3d, r28	; 61
     1a2:	df e7       	ldi	r29, 0x7F	; 127
     1a4:	de bf       	out	0x3e, r29	; 62

000001a6 <__do_copy_data>:
     1a6:	15 e4       	ldi	r17, 0x45	; 69
     1a8:	a0 e0       	ldi	r26, 0x00	; 0
     1aa:	b0 e4       	ldi	r27, 0x40	; 64
     1ac:	e2 e9       	ldi	r30, 0x92	; 146
     1ae:	f7 e2       	ldi	r31, 0x27	; 39
     1b0:	00 e0       	ldi	r16, 0x00	; 0
     1b2:	0b bf       	out	0x3b, r16	; 59
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x14>
     1b6:	07 90       	elpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	ac 36       	cpi	r26, 0x6C	; 108
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0x10>

000001c0 <__do_clear_bss>:
     1c0:	25 e4       	ldi	r18, 0x45	; 69
     1c2:	ac e6       	ldi	r26, 0x6C	; 108
     1c4:	b5 e4       	ldi	r27, 0x45	; 69
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a0 3d       	cpi	r26, 0xD0	; 208
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ba 03 	call	0x774	; 0x774 <main>
     1d4:	0c 94 c7 13 	jmp	0x278e	; 0x278e <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <eeprom_check_ready>:
	
	eeprom_check_ready(); // check if ready to write
	
	eeprom_update_block((void*) &write_structrpm,(void*) &current_adress, struct_size); //saves the struct 2 eeprom
	current_adress++;
}
     1dc:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     1e0:	81 fd       	sbrc	r24, 1
     1e2:	fc cf       	rjmp	.-8      	; 0x1dc <eeprom_check_ready>
     1e4:	08 95       	ret

000001e6 <average_rpm>:
     1e6:	8f 92       	push	r8
     1e8:	9f 92       	push	r9
     1ea:	af 92       	push	r10
     1ec:	bf 92       	push	r11
     1ee:	cf 92       	push	r12
     1f0:	df 92       	push	r13
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	80 91 6e 45 	lds	r24, 0x456E	; 0x80456e <data_read>
     1fe:	81 11       	cpse	r24, r1
     200:	a9 c1       	rjmp	.+850    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     202:	0e 94 50 08 	call	0x10a0	; 0x10a0 <automaticspeed>
     206:	80 93 b3 45 	sts	0x45B3, r24	; 0x8045b3 <fanspeed_val>
     20a:	80 91 96 45 	lds	r24, 0x4596	; 0x804596 <RPM>
     20e:	90 91 97 45 	lds	r25, 0x4597	; 0x804597 <RPM+0x1>
     212:	0e 94 0f 06 	call	0xc1e	; 0xc1e <RPM_value>
     216:	ec 01       	movw	r28, r24
     218:	f0 90 b3 45 	lds	r15, 0x45B3	; 0x8045b3 <fanspeed_val>
     21c:	6f 2d       	mov	r22, r15
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 35 0c 	call	0x186a	; 0x186a <__floatsisf>
     228:	28 e5       	ldi	r18, 0x58	; 88
     22a:	3b e5       	ldi	r19, 0x5B	; 91
     22c:	45 ec       	ldi	r20, 0xC5	; 197
     22e:	52 e4       	ldi	r21, 0x42	; 66
     230:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     234:	9b 01       	movw	r18, r22
     236:	ac 01       	movw	r20, r24
     238:	69 e3       	ldi	r22, 0x39	; 57
     23a:	72 ed       	ldi	r23, 0xD2	; 210
     23c:	8a e4       	ldi	r24, 0x4A	; 74
     23e:	93 e4       	ldi	r25, 0x43	; 67
     240:	0e 94 1e 0b 	call	0x163c	; 0x163c <__subsf3>
     244:	4b 01       	movw	r8, r22
     246:	5c 01       	movw	r10, r24
     248:	6f 2d       	mov	r22, r15
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     254:	6b 01       	movw	r12, r22
     256:	7c 01       	movw	r14, r24
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e4       	ldi	r21, 0x40	; 64
     260:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pow>
     264:	26 e8       	ldi	r18, 0x86	; 134
     266:	3d ed       	ldi	r19, 0xDD	; 221
     268:	46 ec       	ldi	r20, 0xC6	; 198
     26a:	50 e4       	ldi	r21, 0x40	; 64
     26c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c5 01       	movw	r24, r10
     276:	b4 01       	movw	r22, r8
     278:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
     27c:	4b 01       	movw	r8, r22
     27e:	5c 01       	movw	r10, r24
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e4       	ldi	r20, 0x40	; 64
     286:	50 e4       	ldi	r21, 0x40	; 64
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pow>
     290:	2a ef       	ldi	r18, 0xFA	; 250
     292:	36 eb       	ldi	r19, 0xB6	; 182
     294:	43 e1       	ldi	r20, 0x13	; 19
     296:	5c e3       	ldi	r21, 0x3C	; 60
     298:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     29c:	9b 01       	movw	r18, r22
     29e:	ac 01       	movw	r20, r24
     2a0:	c5 01       	movw	r24, r10
     2a2:	b4 01       	movw	r22, r8
     2a4:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
     2a8:	4b 01       	movw	r8, r22
     2aa:	5c 01       	movw	r10, r24
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	40 e8       	ldi	r20, 0x80	; 128
     2b2:	50 e4       	ldi	r21, 0x40	; 64
     2b4:	c7 01       	movw	r24, r14
     2b6:	b6 01       	movw	r22, r12
     2b8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pow>
     2bc:	2c e1       	ldi	r18, 0x1C	; 28
     2be:	3a e8       	ldi	r19, 0x8A	; 138
     2c0:	4c ee       	ldi	r20, 0xEC	; 236
     2c2:	5a eb       	ldi	r21, 0xBA	; 186
     2c4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     2c8:	9b 01       	movw	r18, r22
     2ca:	ac 01       	movw	r20, r24
     2cc:	c5 01       	movw	r24, r10
     2ce:	b4 01       	movw	r22, r8
     2d0:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
     2d4:	4b 01       	movw	r8, r22
     2d6:	5c 01       	movw	r10, r24
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 ea       	ldi	r20, 0xA0	; 160
     2de:	50 e4       	ldi	r21, 0x40	; 64
     2e0:	c7 01       	movw	r24, r14
     2e2:	b6 01       	movw	r22, r12
     2e4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pow>
     2e8:	22 ea       	ldi	r18, 0xA2	; 162
     2ea:	31 ea       	ldi	r19, 0xA1	; 161
     2ec:	4d e9       	ldi	r20, 0x9D	; 157
     2ee:	57 e3       	ldi	r21, 0x37	; 55
     2f0:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     2f4:	9b 01       	movw	r18, r22
     2f6:	ac 01       	movw	r20, r24
     2f8:	c5 01       	movw	r24, r10
     2fa:	b4 01       	movw	r22, r8
     2fc:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
     300:	4b 01       	movw	r8, r22
     302:	5c 01       	movw	r10, r24
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e4       	ldi	r21, 0x40	; 64
     30c:	c7 01       	movw	r24, r14
     30e:	b6 01       	movw	r22, r12
     310:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <pow>
     314:	27 e8       	ldi	r18, 0x87	; 135
     316:	3e eb       	ldi	r19, 0xBE	; 190
     318:	4f e6       	ldi	r20, 0x6F	; 111
     31a:	53 e3       	ldi	r21, 0x33	; 51
     31c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     320:	9b 01       	movw	r18, r22
     322:	ac 01       	movw	r20, r24
     324:	c5 01       	movw	r24, r10
     326:	b4 01       	movw	r22, r8
     328:	0e 94 1e 0b 	call	0x163c	; 0x163c <__subsf3>
     32c:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
     330:	6b 01       	movw	r12, r22
     332:	7c 01       	movw	r14, r24
     334:	c9 3e       	cpi	r28, 0xE9	; 233
     336:	23 e0       	ldi	r18, 0x03	; 3
     338:	d2 07       	cpc	r29, r18
     33a:	08 f4       	brcc	.+2      	; 0x33e <__EEPROM_REGION_LENGTH__+0x13e>
     33c:	0b c1       	rjmp	.+534    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     33e:	69 3e       	cpi	r22, 0xE9	; 233
     340:	73 40       	sbci	r23, 0x03	; 3
     342:	08 f4       	brcc	.+2      	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
     344:	07 c1       	rjmp	.+526    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     346:	c0 32       	cpi	r28, 0x20	; 32
     348:	85 e3       	ldi	r24, 0x35	; 53
     34a:	d8 07       	cpc	r29, r24
     34c:	08 f0       	brcs	.+2      	; 0x350 <__EEPROM_REGION_LENGTH__+0x150>
     34e:	02 c1       	rjmp	.+516    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     350:	b6 01       	movw	r22, r12
     352:	6c 1b       	sub	r22, r28
     354:	7d 0b       	sbc	r23, r29
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     35e:	4b 01       	movw	r8, r22
     360:	5c 01       	movw	r10, r24
     362:	b6 01       	movw	r22, r12
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     36c:	9b 01       	movw	r18, r22
     36e:	ac 01       	movw	r20, r24
     370:	c5 01       	movw	r24, r10
     372:	b4 01       	movw	r22, r8
     374:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divsf3>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	48 ec       	ldi	r20, 0xC8	; 200
     37e:	52 e4       	ldi	r21, 0x42	; 66
     380:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     384:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__fixsfsi>
     388:	cb 01       	movw	r24, r22
     38a:	77 0f       	add	r23, r23
     38c:	aa 0b       	sbc	r26, r26
     38e:	bb 0b       	sbc	r27, r27
     390:	84 36       	cpi	r24, 0x64	; 100
     392:	91 05       	cpc	r25, r1
     394:	a1 05       	cpc	r26, r1
     396:	b1 05       	cpc	r27, r1
     398:	18 f0       	brcs	.+6      	; 0x3a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	dc 01       	movw	r26, r24
     3a0:	20 91 6c 45 	lds	r18, 0x456C	; 0x80456c <__data_end>
     3a4:	30 91 6d 45 	lds	r19, 0x456D	; 0x80456d <__data_end+0x1>
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	20 93 6c 45 	sts	0x456C, r18	; 0x80456c <__data_end>
     3b0:	30 93 6d 45 	sts	0x456D, r19	; 0x80456d <__data_end+0x1>
     3b4:	c0 90 92 45 	lds	r12, 0x4592	; 0x804592 <store_rpm1>
     3b8:	d0 90 93 45 	lds	r13, 0x4593	; 0x804593 <store_rpm1+0x1>
     3bc:	e0 90 94 45 	lds	r14, 0x4594	; 0x804594 <store_rpm1+0x2>
     3c0:	f0 90 95 45 	lds	r15, 0x4595	; 0x804595 <store_rpm1+0x3>
     3c4:	8c 0d       	add	r24, r12
     3c6:	9d 1d       	adc	r25, r13
     3c8:	ae 1d       	adc	r26, r14
     3ca:	bf 1d       	adc	r27, r15
     3cc:	80 93 92 45 	sts	0x4592, r24	; 0x804592 <store_rpm1>
     3d0:	90 93 93 45 	sts	0x4593, r25	; 0x804593 <store_rpm1+0x1>
     3d4:	a0 93 94 45 	sts	0x4594, r26	; 0x804594 <store_rpm1+0x2>
     3d8:	b0 93 95 45 	sts	0x4595, r27	; 0x804595 <store_rpm1+0x3>
     3dc:	80 91 6c 45 	lds	r24, 0x456C	; 0x80456c <__data_end>
     3e0:	90 91 6d 45 	lds	r25, 0x456D	; 0x80456d <__data_end+0x1>
     3e4:	85 36       	cpi	r24, 0x65	; 101
     3e6:	91 05       	cpc	r25, r1
     3e8:	08 f4       	brcc	.+2      	; 0x3ec <__EEPROM_REGION_LENGTH__+0x1ec>
     3ea:	b4 c0       	rjmp	.+360    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	94 e1       	ldi	r25, 0x14	; 20
     3f0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <eeprom_read_byte>
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	80 93 0e 40 	sts	0x400E, r24	; 0x80400e <n_count_adress1>
     3fa:	90 93 0f 40 	sts	0x400F, r25	; 0x80400f <n_count_adress1+0x1>
     3fe:	80 91 0e 40 	lds	r24, 0x400E	; 0x80400e <n_count_adress1>
     402:	90 91 0f 40 	lds	r25, 0x400F	; 0x80400f <n_count_adress1+0x1>
     406:	9c 5e       	subi	r25, 0xEC	; 236
     408:	80 93 c2 45 	sts	0x45C2, r24	; 0x8045c2 <current_fan_adress1>
     40c:	90 93 c3 45 	sts	0x45C3, r25	; 0x8045c3 <current_fan_adress1+0x1>
     410:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <current_fan_adress1>
     414:	90 91 c3 45 	lds	r25, 0x45C3	; 0x8045c3 <current_fan_adress1+0x1>
     418:	8d 31       	cpi	r24, 0x1D	; 29
     41a:	94 41       	sbci	r25, 0x14	; 20
     41c:	c0 f0       	brcs	.+48     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	94 e1       	ldi	r25, 0x14	; 20
     422:	80 93 c2 45 	sts	0x45C2, r24	; 0x8045c2 <current_fan_adress1>
     426:	90 93 c3 45 	sts	0x45C3, r25	; 0x8045c3 <current_fan_adress1+0x1>
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 93 0e 40 	sts	0x400E, r24	; 0x80400e <n_count_adress1>
     432:	90 93 0f 40 	sts	0x400F, r25	; 0x80400f <n_count_adress1+0x1>
     436:	60 91 0e 40 	lds	r22, 0x400E	; 0x80400e <n_count_adress1>
     43a:	70 91 0f 40 	lds	r23, 0x400F	; 0x80400f <n_count_adress1+0x1>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	94 e1       	ldi	r25, 0x14	; 20
     442:	0e 94 58 13 	call	0x26b0	; 0x26b0 <eeprom_update_byte>
     446:	81 e3       	ldi	r24, 0x31	; 49
     448:	90 e4       	ldi	r25, 0x40	; 64
     44a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
     44e:	80 91 0e 40 	lds	r24, 0x400E	; 0x80400e <n_count_adress1>
     452:	90 91 0f 40 	lds	r25, 0x400F	; 0x80400f <n_count_adress1+0x1>
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	80 93 0e 40 	sts	0x400E, r24	; 0x80400e <n_count_adress1>
     45c:	90 93 0f 40 	sts	0x400F, r25	; 0x80400f <n_count_adress1+0x1>
     460:	60 91 92 45 	lds	r22, 0x4592	; 0x804592 <store_rpm1>
     464:	70 91 93 45 	lds	r23, 0x4593	; 0x804593 <store_rpm1+0x1>
     468:	80 91 94 45 	lds	r24, 0x4594	; 0x804594 <store_rpm1+0x2>
     46c:	90 91 95 45 	lds	r25, 0x4595	; 0x804595 <store_rpm1+0x3>
     470:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     474:	6b 01       	movw	r12, r22
     476:	7c 01       	movw	r14, r24
     478:	60 91 6c 45 	lds	r22, 0x456C	; 0x80456c <__data_end>
     47c:	70 91 6d 45 	lds	r23, 0x456D	; 0x80456d <__data_end+0x1>
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     488:	9b 01       	movw	r18, r22
     48a:	ac 01       	movw	r20, r24
     48c:	c7 01       	movw	r24, r14
     48e:	b6 01       	movw	r22, r12
     490:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divsf3>
     494:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
     498:	c6 2f       	mov	r28, r22
     49a:	7f 93       	push	r23
     49c:	6f 93       	push	r22
     49e:	81 e4       	ldi	r24, 0x41	; 65
     4a0:	90 e4       	ldi	r25, 0x40	; 64
     4a2:	9f 93       	push	r25
     4a4:	8f 93       	push	r24
     4a6:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
     4aa:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <current_fan_adress1>
     4ae:	90 91 c3 45 	lds	r25, 0x45C3	; 0x8045c3 <current_fan_adress1+0x1>
     4b2:	6c 2f       	mov	r22, r28
     4b4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <eeprom_update_byte>
     4b8:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <current_fan_adress1>
     4bc:	90 91 c3 45 	lds	r25, 0x45C3	; 0x8045c3 <current_fan_adress1+0x1>
     4c0:	0e 94 50 13 	call	0x26a0	; 0x26a0 <eeprom_read_byte>
     4c4:	1f 92       	push	r1
     4c6:	8f 93       	push	r24
     4c8:	8c e5       	ldi	r24, 0x5C	; 92
     4ca:	90 e4       	ldi	r25, 0x40	; 64
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
     4d4:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <current_fan_adress1>
     4d8:	90 91 c3 45 	lds	r25, 0x45C3	; 0x8045c3 <current_fan_adress1+0x1>
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	80 93 c2 45 	sts	0x45C2, r24	; 0x8045c2 <current_fan_adress1>
     4e2:	90 93 c3 45 	sts	0x45C3, r25	; 0x8045c3 <current_fan_adress1+0x1>
     4e6:	80 91 c2 45 	lds	r24, 0x45C2	; 0x8045c2 <current_fan_adress1>
     4ea:	90 91 c3 45 	lds	r25, 0x45C3	; 0x8045c3 <current_fan_adress1+0x1>
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	85 e8       	ldi	r24, 0x85	; 133
     4f4:	90 e4       	ldi	r25, 0x40	; 64
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
     4fe:	60 91 0e 40 	lds	r22, 0x400E	; 0x80400e <n_count_adress1>
     502:	70 91 0f 40 	lds	r23, 0x400F	; 0x80400f <n_count_adress1+0x1>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	94 e1       	ldi	r25, 0x14	; 20
     50a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <eeprom_update_byte>
     50e:	82 ea       	ldi	r24, 0xA2	; 162
     510:	90 e4       	ldi	r25, 0x40	; 64
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
     51a:	80 91 0e 40 	lds	r24, 0x400E	; 0x80400e <n_count_adress1>
     51e:	90 91 0f 40 	lds	r25, 0x400F	; 0x80400f <n_count_adress1+0x1>
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	8e e9       	ldi	r24, 0x9E	; 158
     528:	90 e4       	ldi	r25, 0x40	; 64
     52a:	9f 93       	push	r25
     52c:	8f 93       	push	r24
     52e:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
     532:	10 92 92 45 	sts	0x4592, r1	; 0x804592 <store_rpm1>
     536:	10 92 93 45 	sts	0x4593, r1	; 0x804593 <store_rpm1+0x1>
     53a:	10 92 94 45 	sts	0x4594, r1	; 0x804594 <store_rpm1+0x2>
     53e:	10 92 95 45 	sts	0x4595, r1	; 0x804595 <store_rpm1+0x3>
     542:	10 92 6c 45 	sts	0x456C, r1	; 0x80456c <__data_end>
     546:	10 92 6d 45 	sts	0x456D, r1	; 0x80456d <__data_end+0x1>
     54a:	8d b7       	in	r24, 0x3d	; 61
     54c:	9e b7       	in	r25, 0x3e	; 62
     54e:	42 96       	adiw	r24, 0x12	; 18
     550:	8d bf       	out	0x3d, r24	; 61
     552:	9e bf       	out	0x3e, r25	; 62
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	bf 90       	pop	r11
     562:	af 90       	pop	r10
     564:	9f 90       	pop	r9
     566:	8f 90       	pop	r8
     568:	08 95       	ret

0000056a <eeprom_current_adress_boot>:
	eeprom_current_adress_boot(&current_fan_adress6,&n_count_adress6,&start_fan_adress6);
	eeprom_current_adress_boot(&current_fan_adress7,&n_count_adress7,&start_fan_adress7);
	eeprom_current_adress_boot(&current_fan_adress8,&n_count_adress8,&start_fan_adress8);
}

void eeprom_current_adress_boot(volatile uint16_t *current_adress, volatile uint16_t *n_count_adress, const uint16_t *start_adress) {
     56a:	af 92       	push	r10
     56c:	bf 92       	push	r11
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	7c 01       	movw	r14, r24
     57e:	5b 01       	movw	r10, r22
     580:	8a 01       	movw	r16, r20
	uint8_t byte = eeprom_read_byte(*start_adress); // reads from start adress-get number of occupied addresses
     582:	fa 01       	movw	r30, r20
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	0e 94 50 13 	call	0x26a0	; 0x26a0 <eeprom_read_byte>
     58c:	c8 2f       	mov	r28, r24
	printf("n_count adress is: %d\r\n", byte); //prints to user
     58e:	c8 2e       	mov	r12, r24
     590:	d1 2c       	mov	r13, r1
     592:	1f 92       	push	r1
     594:	8f 93       	push	r24
     596:	84 ec       	ldi	r24, 0xC4	; 196
     598:	90 e4       	ldi	r25, 0x40	; 64
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
	*n_count_adress = byte; //number is set to global variable
     5a2:	f5 01       	movw	r30, r10
     5a4:	c0 82       	st	Z, r12
     5a6:	d1 82       	std	Z+1, r13	; 0x01
	
	uint16_t len = *start_adress + byte; // Calculate the current address
     5a8:	f8 01       	movw	r30, r16
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	8c 0d       	add	r24, r12
     5b0:	9d 1d       	adc	r25, r13
	
	*current_adress = len; // Update the value at the memory location pointed to by current_adress
     5b2:	f7 01       	movw	r30, r14
     5b4:	80 83       	st	Z, r24
     5b6:	91 83       	std	Z+1, r25	; 0x01
	
	printf("current adress is: %d\r\n", *current_adress); //prints to user
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	8c ed       	ldi	r24, 0xDC	; 220
     5c2:	90 e4       	ldi	r25, 0x40	; 64
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
	
	if (byte > 30) { //if storage is full, rewriting will commence
     5cc:	8d b7       	in	r24, 0x3d	; 61
     5ce:	9e b7       	in	r25, 0x3e	; 62
     5d0:	08 96       	adiw	r24, 0x08	; 8
     5d2:	8d bf       	out	0x3d, r24	; 61
     5d4:	9e bf       	out	0x3e, r25	; 62
     5d6:	cf 31       	cpi	r28, 0x1F	; 31
     5d8:	50 f0       	brcs	.+20     	; 0x5ee <eeprom_current_adress_boot+0x84>
		printf("storage is full, rewriting will commence\r\n");
     5da:	84 ef       	ldi	r24, 0xF4	; 244
     5dc:	90 e4       	ldi	r25, 0x40	; 64
     5de:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		eeprom_update_byte(*start_adress, 1); // reset for overwriting
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	f8 01       	movw	r30, r16
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	0e 94 58 13 	call	0x26b0	; 0x26b0 <eeprom_update_byte>
	}
}
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	08 95       	ret

00000602 <initialize_adresses>:
	current_adress++;
}
void initialize_adresses(){ //sets the last address of every fan
	//adress_space_clear(); //manually resets adresses
	
	eeprom_current_adress_boot(&current_fan_adress1,&n_count_adress1,&start_fan_adress1);
     602:	44 e6       	ldi	r20, 0x64	; 100
     604:	51 e4       	ldi	r21, 0x41	; 65
     606:	6e e0       	ldi	r22, 0x0E	; 14
     608:	70 e4       	ldi	r23, 0x40	; 64
     60a:	82 ec       	ldi	r24, 0xC2	; 194
     60c:	95 e4       	ldi	r25, 0x45	; 69
     60e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress2,&n_count_adress2,&start_fan_adress2);
     612:	42 e6       	ldi	r20, 0x62	; 98
     614:	51 e4       	ldi	r21, 0x41	; 65
     616:	6c e0       	ldi	r22, 0x0C	; 12
     618:	70 e4       	ldi	r23, 0x40	; 64
     61a:	81 eb       	ldi	r24, 0xB1	; 177
     61c:	95 e4       	ldi	r25, 0x45	; 69
     61e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress3,&n_count_adress3,&start_fan_adress3);
     622:	40 e6       	ldi	r20, 0x60	; 96
     624:	51 e4       	ldi	r21, 0x41	; 65
     626:	6a e0       	ldi	r22, 0x0A	; 10
     628:	70 e4       	ldi	r23, 0x40	; 64
     62a:	8d e9       	ldi	r24, 0x9D	; 157
     62c:	95 e4       	ldi	r25, 0x45	; 69
     62e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress4,&n_count_adress4,&start_fan_adress4);
     632:	4e e5       	ldi	r20, 0x5E	; 94
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	68 e0       	ldi	r22, 0x08	; 8
     638:	70 e4       	ldi	r23, 0x40	; 64
     63a:	8f e9       	ldi	r24, 0x9F	; 159
     63c:	95 e4       	ldi	r25, 0x45	; 69
     63e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress5,&n_count_adress5,&start_fan_adress5);
     642:	4c e5       	ldi	r20, 0x5C	; 92
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	66 e0       	ldi	r22, 0x06	; 6
     648:	70 e4       	ldi	r23, 0x40	; 64
     64a:	87 ea       	ldi	r24, 0xA7	; 167
     64c:	95 e4       	ldi	r25, 0x45	; 69
     64e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress6,&n_count_adress6,&start_fan_adress6);
     652:	4a e5       	ldi	r20, 0x5A	; 90
     654:	51 e4       	ldi	r21, 0x41	; 65
     656:	64 e0       	ldi	r22, 0x04	; 4
     658:	70 e4       	ldi	r23, 0x40	; 64
     65a:	8f ea       	ldi	r24, 0xAF	; 175
     65c:	95 e4       	ldi	r25, 0x45	; 69
     65e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress7,&n_count_adress7,&start_fan_adress7);
     662:	48 e5       	ldi	r20, 0x58	; 88
     664:	51 e4       	ldi	r21, 0x41	; 65
     666:	62 e0       	ldi	r22, 0x02	; 2
     668:	70 e4       	ldi	r23, 0x40	; 64
     66a:	8c eb       	ldi	r24, 0xBC	; 188
     66c:	95 e4       	ldi	r25, 0x45	; 69
     66e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
	eeprom_current_adress_boot(&current_fan_adress8,&n_count_adress8,&start_fan_adress8);
     672:	46 e5       	ldi	r20, 0x56	; 86
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e4       	ldi	r23, 0x40	; 64
     67a:	85 ec       	ldi	r24, 0xC5	; 197
     67c:	95 e4       	ldi	r25, 0x45	; 69
     67e:	0e 94 b5 02 	call	0x56a	; 0x56a <eeprom_current_adress_boot>
     682:	08 95       	ret

00000684 <read_data_rpm_eeprom>:
	}
}



void read_data_rpm_eeprom(volatile uint16_t *cur_adress,const uint16_t *start_address,volatile uint16_t *n_count_adress){
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	8b 01       	movw	r16, r22
	data_read = true; //stops writing to eeprom
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 6e 45 	sts	0x456E, r24	; 0x80456e <data_read>
	uint16_t byte = 0;
	uint8_t len =eeprom_read_byte(*start_address); //finds the number of adresses
     694:	fb 01       	movw	r30, r22
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	0e 94 50 13 	call	0x26a0	; 0x26a0 <eeprom_read_byte>
     69e:	d8 2f       	mov	r29, r24
	
	printf("number of occupied adresses is : "); //print to user
     6a0:	8e e1       	ldi	r24, 0x1E	; 30
     6a2:	91 e4       	ldi	r25, 0x41	; 65
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
	printf("%u",(len));
     6ac:	1f 92       	push	r1
     6ae:	df 93       	push	r29
     6b0:	83 e5       	ldi	r24, 0x53	; 83
     6b2:	91 e4       	ldi	r25, 0x41	; 65
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
	printf("\r\n");
     6bc:	84 ef       	ldi	r24, 0xF4	; 244
     6be:	94 e4       	ldi	r25, 0x44	; 68
     6c0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		eeprom_check_ready();
     6c4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <eeprom_check_ready>

		for (uint8_t i = 1; i <=len; i++){  //for lenght og occupied adresses
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	c1 e0       	ldi	r28, 0x01	; 1
     6d6:	1c c0       	rjmp	.+56     	; 0x710 <read_data_rpm_eeprom+0x8c>
			byte = eeprom_read_byte((*start_address)+i); // reads the pred-value for each occupied adress
     6d8:	f8 01       	movw	r30, r16
     6da:	80 81       	ld	r24, Z
     6dc:	91 81       	ldd	r25, Z+1	; 0x01
     6de:	8c 0f       	add	r24, r28
     6e0:	91 1d       	adc	r25, r1
     6e2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <eeprom_read_byte>
			
			printf("Difference nr %u : %u", i,byte );  // prints the value of the pred value
     6e6:	1f 92       	push	r1
     6e8:	8f 93       	push	r24
     6ea:	1f 92       	push	r1
     6ec:	cf 93       	push	r28
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	91 e4       	ldi	r25, 0x41	; 65
     6f2:	9f 93       	push	r25
     6f4:	8f 93       	push	r24
     6f6:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
			printf("\r\n");
     6fa:	84 ef       	ldi	r24, 0xF4	; 244
     6fc:	94 e4       	ldi	r25, 0x44	; 68
     6fe:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("number of occupied adresses is : "); //print to user
	printf("%u",(len));
	printf("\r\n");
		eeprom_check_ready();

		for (uint8_t i = 1; i <=len; i++){  //for lenght og occupied adresses
     702:	cf 5f       	subi	r28, 0xFF	; 255
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	dc 17       	cp	r29, r28
     712:	10 f7       	brcc	.-60     	; 0x6d8 <read_data_rpm_eeprom+0x54>
			byte = eeprom_read_byte((*start_address)+i); // reads the pred-value for each occupied adress
			
			printf("Difference nr %u : %u", i,byte );  // prints the value of the pred value
			printf("\r\n");
		}
		data_read=false; //writing can commence
     714:	10 92 6e 45 	sts	0x456E, r1	; 0x80456e <data_read>
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <adress_space_clear>:


void adress_space_clear(){ //starts rewriting
	eeprom_write_byte(start_fan_adress1,1);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	94 e1       	ldi	r25, 0x14	; 20
     728:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress2,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	80 e3       	ldi	r24, 0x30	; 48
     730:	94 e1       	ldi	r25, 0x14	; 20
     732:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress3,1);
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	80 e6       	ldi	r24, 0x60	; 96
     73a:	94 e1       	ldi	r25, 0x14	; 20
     73c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress4,1);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	80 e9       	ldi	r24, 0x90	; 144
     744:	94 e1       	ldi	r25, 0x14	; 20
     746:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress5,1);
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	80 ec       	ldi	r24, 0xC0	; 192
     74e:	94 e1       	ldi	r25, 0x14	; 20
     750:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress6,1);
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	80 ef       	ldi	r24, 0xF0	; 240
     758:	94 e1       	ldi	r25, 0x14	; 20
     75a:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress7,1);
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	80 e2       	ldi	r24, 0x20	; 32
     762:	95 e1       	ldi	r25, 0x15	; 21
     764:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
	eeprom_write_byte(start_fan_adress8,1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	80 e5       	ldi	r24, 0x50	; 80
     76c:	95 e1       	ldi	r25, 0x15	; 21
     76e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <eeprom_write_byte>
     772:	08 95       	ret

00000774 <main>:
volatile uint16_t signal_period = 0;
volatile uint16_t rpm_from_inter;

int main ( void )
{
	PORT_init(); 																		//initialize pwm
     774:	0e 94 d3 05 	call	0xba6	; 0xba6 <PORT_init>
	TCA0_init(); 																		//initialize the TCA0
     778:	0e 94 c3 05 	call	0xb86	; 0xb86 <TCA0_init>
	USART3.CTRLA |= USART_RXCIE_bm ; 													// set usart read register
     77c:	e0 e6       	ldi	r30, 0x60	; 96
     77e:	f8 e0       	ldi	r31, 0x08	; 8
     780:	85 81       	ldd	r24, Z+5	; 0x05
     782:	80 68       	ori	r24, 0x80	; 128
     784:	85 83       	std	Z+5, r24	; 0x05
	USART3_init (); 																	//initialize usart3
     786:	0e 94 c7 0a 	call	0x158e	; 0x158e <USART3_init>
	EVSYS_init(); 																		//initialize event system
     78a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EVSYS_init>
	TCB0_init(); 																		// initialize the TCB0
     78e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <TCB0_init>
	
	PORTB.DIR &= ~PIN5_bm;
     792:	e0 e2       	ldi	r30, 0x20	; 32
     794:	f4 e0       	ldi	r31, 0x04	; 4
     796:	80 81       	ld	r24, Z
     798:	8f 7d       	andi	r24, 0xDF	; 223
     79a:	80 83       	st	Z, r24
	PORTB.PIN5CTRL |= PORT_PULLUPEN_bm;
     79c:	85 89       	ldd	r24, Z+21	; 0x15
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	85 8b       	std	Z+21, r24	; 0x15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a2:	8f e0       	ldi	r24, 0x0F	; 15
     7a4:	97 e2       	ldi	r25, 0x27	; 39
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <main+0x32>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <main+0x38>
     7ac:	00 00       	nop
	
	_delay_ms (10) ;
	initialize_rpm(); 																	//initialize rpm reading
     7ae:	0e 94 02 06 	call	0xc04	; 0xc04 <initialize_rpm>
	sei();  																			//activate global interupts
     7b2:	78 94       	sei
     7b4:	8f e0       	ldi	r24, 0x0F	; 15
     7b6:	97 e2       	ldi	r25, 0x27	; 39
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <main+0x44>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <main+0x4a>
     7be:	00 00       	nop
	_delay_ms (10) ;
	twi_master_init_aht10(); 															//initialize setup for TWI to AHT10 sensor
     7c0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <twi_master_init_aht10>
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	24 e3       	ldi	r18, 0x34	; 52
     7c8:	8c e0       	ldi	r24, 0x0C	; 12
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	20 40       	sbci	r18, 0x00	; 0
     7ce:	80 40       	sbci	r24, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0x56>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0x60>
     7d4:	00 00       	nop
	_delay_ms (1000);
	initialize_adresses(); 																//updates last adresses used
     7d6:	0e 94 01 03 	call	0x602	; 0x602 <initialize_adresses>
	automaticspeed_limiter=0; 															//limit times the rpm and eeprom is written to
     7da:	10 92 c7 45 	sts	0x45C7, r1	; 0x8045c7 <automaticspeed_limiter>
	// FUSE.SYSCFG0 |=(0<<1); 															//Eeprom is saved under chip erase, optional
	
	while (1)
	{
		//	_delay_ms(100);
		cli();
     7de:	f8 94       	cli
		automaticspeed_limiter++;
     7e0:	80 91 c7 45 	lds	r24, 0x45C7	; 0x8045c7 <automaticspeed_limiter>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 c7 45 	sts	0x45C7, r24	; 0x8045c7 <automaticspeed_limiter>
		if(automaticspeed_limiter>10){ 													//10 iteration before 1 run
     7ea:	8b 30       	cpi	r24, 0x0B	; 11
     7ec:	a0 f0       	brcs	.+40     	; 0x816 <main+0xa2>
			automaticspeed();																//needs to be updated always
     7ee:	0e 94 50 08 	call	0x10a0	; 0x10a0 <automaticspeed>
			sei();																			//activate interupt for short time
     7f2:	78 94       	sei
			cli(); 																			//deactivate interupt
     7f4:	f8 94       	cli
			automaticspeed_limiter=0;
     7f6:	10 92 c7 45 	sts	0x45C7, r1	; 0x8045c7 <automaticspeed_limiter>
			average_rpm(RPM,&current_fan_adress1,&store_rpm1,&n_count_adress1,start_fan_adress1); //eeprom update for pred-values
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	14 e1       	ldi	r17, 0x14	; 20
     7fe:	2e e0       	ldi	r18, 0x0E	; 14
     800:	30 e4       	ldi	r19, 0x40	; 64
     802:	42 e9       	ldi	r20, 0x92	; 146
     804:	55 e4       	ldi	r21, 0x45	; 69
     806:	62 ec       	ldi	r22, 0xC2	; 194
     808:	75 e4       	ldi	r23, 0x45	; 69
     80a:	80 91 96 45 	lds	r24, 0x4596	; 0x804596 <RPM>
     80e:	90 91 97 45 	lds	r25, 0x4597	; 0x804597 <RPM+0x1>
     812:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <average_rpm>
		}
		
		if (data_ready_flag) { 															//if interupt on usart has happend, change to data ready flag if interupt is used
     816:	80 91 73 45 	lds	r24, 0x4573	; 0x804573 <data_ready_flag>
     81a:	88 23       	and	r24, r24
     81c:	61 f1       	breq	.+88     	; 0x876 <main+0x102>
			
			//recived = USART3_read();
			c = recived; 																// Update 'c' with the received character
     81e:	80 91 9c 45 	lds	r24, 0x459C	; 0x80459c <recived>
     822:	80 93 a6 45 	sts	0x45A6, r24	; 0x8045a6 <c>
			data_ready_flag = 0; 														//Disable so it only runs once each message and iteration
     826:	10 92 73 45 	sts	0x4573, r1	; 0x804573 <data_ready_flag>
			
			// Process received_char as needed
			if(c != LF && c != CR){ 													// If received \r or \n
     82a:	8a 30       	cpi	r24, 0x0A	; 10
     82c:	a1 f0       	breq	.+40     	; 0x856 <main+0xe2>
     82e:	8d 30       	cpi	r24, 0x0D	; 13
     830:	91 f0       	breq	.+36     	; 0x856 <main+0xe2>
				command[index++] = c;
     832:	e0 91 74 45 	lds	r30, 0x4574	; 0x804574 <index>
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9e 0f       	add	r25, r30
     83a:	90 93 74 45 	sts	0x4574, r25	; 0x804574 <index>
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	e9 57       	subi	r30, 0x79	; 121
     842:	fa 4b       	sbci	r31, 0xBA	; 186
     844:	80 83       	st	Z, r24
				if( index > MAX_COMMAND_LEN ) 											//If command to large; print newline
     846:	9b 30       	cpi	r25, 0x0B	; 11
     848:	30 f0       	brcs	.+12     	; 0x856 <main+0xe2>
				{
					index = 0;
     84a:	10 92 74 45 	sts	0x4574, r1	; 0x804574 <index>
					printf("\r");
     84e:	8d e0       	ldi	r24, 0x0D	; 13
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 63 10 	call	0x20c6	; 0x20c6 <putchar>
				}
			}
			if(c == CR || c == LF){ 													//If recived \r or \n
     856:	80 91 a6 45 	lds	r24, 0x45A6	; 0x8045a6 <c>
     85a:	8d 30       	cpi	r24, 0x0D	; 13
     85c:	11 f0       	breq	.+4      	; 0x862 <main+0xee>
     85e:	8a 30       	cpi	r24, 0x0A	; 10
     860:	51 f4       	brne	.+20     	; 0x876 <main+0x102>
				command [index] = 0;
     862:	e0 91 74 45 	lds	r30, 0x4574	; 0x804574 <index>
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	e9 57       	subi	r30, 0x79	; 121
     86a:	fa 4b       	sbci	r31, 0xBA	; 186
     86c:	10 82       	st	Z, r1
				index = 0;
     86e:	10 92 74 45 	sts	0x4574, r1	; 0x804574 <index>
				startMenu();																	//Main function for the USART menu
     872:	0e 94 55 09 	call	0x12aa	; 0x12aa <startMenu>
				
				
			}
		}
		sei();																			//Activate interupts
     876:	78 94       	sei
	}
     878:	b2 cf       	rjmp	.-156    	; 0x7de <main+0x6a>

0000087a <__vector_14>:
}


//Interupt for reading from the fans
ISR(TCB0_INT_vect)
{
     87a:	1f 92       	push	r1
     87c:	0f 92       	push	r0
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	0f 92       	push	r0
     882:	11 24       	eor	r1, r1
     884:	0b b6       	in	r0, 0x3b	; 59
     886:	0f 92       	push	r0
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
	cli();																				//Disable interrupts globally while data is collected
     8a4:	f8 94       	cli
	signal_pulse = TCB0.CCMP/4;															//Calculate high pulse length
     8a6:	c0 e0       	ldi	r28, 0x00	; 0
     8a8:	db e0       	ldi	r29, 0x0B	; 11
     8aa:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ac:	9d 85       	ldd	r25, Y+13	; 0x0d
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	80 93 71 45 	sts	0x4571, r24	; 0x804571 <signal_pulse>
     8ba:	90 93 72 45 	sts	0x4572, r25	; 0x804572 <signal_pulse+0x1>
	signal_period = TCB0.CNT/4;															//Collect period length, this can be used for calculating frequency, if needed.
     8be:	8a 85       	ldd	r24, Y+10	; 0x0a
     8c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8c2:	96 95       	lsr	r25
     8c4:	87 95       	ror	r24
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	80 93 6f 45 	sts	0x456F, r24	; 0x80456f <signal_period>
     8ce:	90 93 70 45 	sts	0x4570, r25	; 0x804570 <signal_period+0x1>
	RPM = (60.0/(pow(10, -6)*signal_pulse*4));											//Calculate RPM
     8d2:	60 91 71 45 	lds	r22, 0x4571	; 0x804571 <signal_pulse>
     8d6:	70 91 72 45 	lds	r23, 0x4572	; 0x804572 <signal_pulse+0x1>
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
     8e2:	2d eb       	ldi	r18, 0xBD	; 189
     8e4:	37 e3       	ldi	r19, 0x37	; 55
     8e6:	46 e8       	ldi	r20, 0x86	; 134
     8e8:	55 e3       	ldi	r21, 0x35	; 53
     8ea:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e8       	ldi	r20, 0x80	; 128
     8f4:	50 e4       	ldi	r21, 0x40	; 64
     8f6:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
     8fa:	9b 01       	movw	r18, r22
     8fc:	ac 01       	movw	r20, r24
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e7       	ldi	r24, 0x70	; 112
     904:	92 e4       	ldi	r25, 0x42	; 66
     906:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__divsf3>
     90a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
     90e:	60 93 96 45 	sts	0x4596, r22	; 0x804596 <RPM>
     912:	70 93 97 45 	sts	0x4597, r23	; 0x804597 <RPM+0x1>

	TCB0.INTFLAGS = TCB_CAPT_bm;														//Reset interrupt flag
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	8e 83       	std	Y+6, r24	; 0x06
	sei();																				//Resume interrupts globally
     91a:	78 94       	sei
	
}
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	bf 91       	pop	r27
     926:	af 91       	pop	r26
     928:	9f 91       	pop	r25
     92a:	8f 91       	pop	r24
     92c:	7f 91       	pop	r23
     92e:	6f 91       	pop	r22
     930:	5f 91       	pop	r21
     932:	4f 91       	pop	r20
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0b be       	out	0x3b, r0	; 59
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0f 90       	pop	r0
     942:	1f 90       	pop	r1
     944:	18 95       	reti

00000946 <__vector_53>:


//Interrupt for receiving information from USART
ISR (USART3_RXC_vect){
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	0b b6       	in	r0, 0x3b	; 59
     952:	0f 92       	push	r0
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
	recived = USART3_read();  															//variable containing information about the message
     96c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <USART3_read>
     970:	80 93 9c 45 	sts	0x459C, r24	; 0x80459c <recived>
	USART3.STATUS |= USART_RXCIF_bm; 													//usart status set to clear, so information can be recived next interupt
     974:	e0 e6       	ldi	r30, 0x60	; 96
     976:	f8 e0       	ldi	r31, 0x08	; 8
     978:	84 81       	ldd	r24, Z+4	; 0x04
     97a:	80 68       	ori	r24, 0x80	; 128
     97c:	84 83       	std	Z+4, r24	; 0x04
	data_ready_flag = 1;																//set flag to recived information on usart
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 73 45 	sts	0x4573, r24	; 0x804573 <data_ready_flag>
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0b be       	out	0x3b, r0	; 59
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <speed_controll_0>:

	 /* Set PWM frequency and duty cycle */
	TCA1.SINGLE.PER = PERIOD_VALUE;
	
	/* Set clock source and start timer */
	TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV2_gc | TCA_SINGLE_ENABLE_bm;
     9aa:	85 36       	cpi	r24, 0x65	; 101
     9ac:	20 f0       	brcs	.+8      	; 0x9b6 <speed_controll_0+0xc>
     9ae:	8f e4       	ldi	r24, 0x4F	; 79
     9b0:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     9b4:	08 95       	ret
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	40 f4       	brcc	.+16     	; 0x9ca <speed_controll_0+0x20>
     9ba:	9f e0       	ldi	r25, 0x0F	; 15
     9bc:	90 93 28 0a 	sts	0x0A28, r25	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     9c0:	81 11       	cpse	r24, r1
     9c2:	0d c0       	rjmp	.+26     	; 0x9de <speed_controll_0+0x34>
     9c4:	10 92 28 0a 	sts	0x0A28, r1	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     9c8:	08 95       	ret
     9ca:	2f e4       	ldi	r18, 0x4F	; 79
     9cc:	82 9f       	mul	r24, r18
     9ce:	c0 01       	movw	r24, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	64 e6       	ldi	r22, 0x64	; 100
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     9da:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     9de:	08 95       	ret

000009e0 <speed_controll_1>:
     9e0:	85 36       	cpi	r24, 0x65	; 101
     9e2:	20 f0       	brcs	.+8      	; 0x9ec <speed_controll_1+0xc>
     9e4:	8f e4       	ldi	r24, 0x4F	; 79
     9e6:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
     9ea:	08 95       	ret
     9ec:	84 31       	cpi	r24, 0x14	; 20
     9ee:	40 f4       	brcc	.+16     	; 0xa00 <speed_controll_1+0x20>
     9f0:	9f e0       	ldi	r25, 0x0F	; 15
     9f2:	90 93 2a 0a 	sts	0x0A2A, r25	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
     9f6:	81 11       	cpse	r24, r1
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <speed_controll_1+0x34>
     9fa:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
     9fe:	08 95       	ret
     a00:	2f e4       	ldi	r18, 0x4F	; 79
     a02:	82 9f       	mul	r24, r18
     a04:	c0 01       	movw	r24, r0
     a06:	11 24       	eor	r1, r1
     a08:	64 e6       	ldi	r22, 0x64	; 100
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     a10:	60 93 2a 0a 	sts	0x0A2A, r22	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
     a14:	08 95       	ret

00000a16 <speed_controll_2>:
     a16:	85 36       	cpi	r24, 0x65	; 101
     a18:	20 f0       	brcs	.+8      	; 0xa22 <speed_controll_2+0xc>
     a1a:	8f e4       	ldi	r24, 0x4F	; 79
     a1c:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     a20:	08 95       	ret
     a22:	84 31       	cpi	r24, 0x14	; 20
     a24:	40 f4       	brcc	.+16     	; 0xa36 <speed_controll_2+0x20>
     a26:	9f e0       	ldi	r25, 0x0F	; 15
     a28:	90 93 2c 0a 	sts	0x0A2C, r25	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     a2c:	81 11       	cpse	r24, r1
     a2e:	0d c0       	rjmp	.+26     	; 0xa4a <speed_controll_2+0x34>
     a30:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     a34:	08 95       	ret
     a36:	2f e4       	ldi	r18, 0x4F	; 79
     a38:	82 9f       	mul	r24, r18
     a3a:	c0 01       	movw	r24, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	64 e6       	ldi	r22, 0x64	; 100
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     a46:	60 93 2c 0a 	sts	0x0A2C, r22	; 0x800a2c <__TEXT_REGION_LENGTH__+0x7e0a2c>
     a4a:	08 95       	ret

00000a4c <speed_controll_3>:
     a4c:	85 36       	cpi	r24, 0x65	; 101
     a4e:	20 f0       	brcs	.+8      	; 0xa58 <speed_controll_3+0xc>
     a50:	8f e4       	ldi	r24, 0x4F	; 79
     a52:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     a56:	08 95       	ret
     a58:	84 31       	cpi	r24, 0x14	; 20
     a5a:	40 f4       	brcc	.+16     	; 0xa6c <speed_controll_3+0x20>
     a5c:	9f e0       	ldi	r25, 0x0F	; 15
     a5e:	90 93 29 0a 	sts	0x0A29, r25	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     a62:	81 11       	cpse	r24, r1
     a64:	0d c0       	rjmp	.+26     	; 0xa80 <speed_controll_3+0x34>
     a66:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     a6a:	08 95       	ret
     a6c:	2f e4       	ldi	r18, 0x4F	; 79
     a6e:	82 9f       	mul	r24, r18
     a70:	c0 01       	movw	r24, r0
     a72:	11 24       	eor	r1, r1
     a74:	64 e6       	ldi	r22, 0x64	; 100
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     a7c:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7e0a29>
     a80:	08 95       	ret

00000a82 <speed_controll_4>:
     a82:	85 36       	cpi	r24, 0x65	; 101
     a84:	20 f0       	brcs	.+8      	; 0xa8e <speed_controll_4+0xc>
     a86:	8f e4       	ldi	r24, 0x4F	; 79
     a88:	80 93 2b 0a 	sts	0x0A2B, r24	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
     a8c:	08 95       	ret
     a8e:	84 31       	cpi	r24, 0x14	; 20
     a90:	40 f4       	brcc	.+16     	; 0xaa2 <speed_controll_4+0x20>
     a92:	9f e0       	ldi	r25, 0x0F	; 15
     a94:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
     a98:	81 11       	cpse	r24, r1
     a9a:	0d c0       	rjmp	.+26     	; 0xab6 <speed_controll_4+0x34>
     a9c:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
     aa0:	08 95       	ret
     aa2:	2f e4       	ldi	r18, 0x4F	; 79
     aa4:	82 9f       	mul	r24, r18
     aa6:	c0 01       	movw	r24, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	64 e6       	ldi	r22, 0x64	; 100
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     ab2:	60 93 2b 0a 	sts	0x0A2B, r22	; 0x800a2b <__TEXT_REGION_LENGTH__+0x7e0a2b>
     ab6:	08 95       	ret

00000ab8 <speed_controll_5>:
     ab8:	85 36       	cpi	r24, 0x65	; 101
     aba:	20 f0       	brcs	.+8      	; 0xac4 <speed_controll_5+0xc>
     abc:	8f e4       	ldi	r24, 0x4F	; 79
     abe:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
     ac2:	08 95       	ret
     ac4:	84 31       	cpi	r24, 0x14	; 20
     ac6:	40 f4       	brcc	.+16     	; 0xad8 <speed_controll_5+0x20>
     ac8:	9f e0       	ldi	r25, 0x0F	; 15
     aca:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
     ace:	81 11       	cpse	r24, r1
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <speed_controll_5+0x34>
     ad2:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
     ad6:	08 95       	ret
     ad8:	2f e4       	ldi	r18, 0x4F	; 79
     ada:	82 9f       	mul	r24, r18
     adc:	c0 01       	movw	r24, r0
     ade:	11 24       	eor	r1, r1
     ae0:	64 e6       	ldi	r22, 0x64	; 100
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     ae8:	60 93 2d 0a 	sts	0x0A2D, r22	; 0x800a2d <__TEXT_REGION_LENGTH__+0x7e0a2d>
     aec:	08 95       	ret

00000aee <speed_controll_6>:
     aee:	85 36       	cpi	r24, 0x65	; 101
     af0:	38 f0       	brcs	.+14     	; 0xb00 <speed_controll_6+0x12>
     af2:	8f e4       	ldi	r24, 0x4F	; 79
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <__TEXT_REGION_LENGTH__+0x7e0a78>
     afa:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <__TEXT_REGION_LENGTH__+0x7e0a79>
     afe:	08 95       	ret
     b00:	84 31       	cpi	r24, 0x14	; 20
     b02:	68 f4       	brcc	.+26     	; 0xb1e <speed_controll_6+0x30>
     b04:	2f e0       	ldi	r18, 0x0F	; 15
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	20 93 78 0a 	sts	0x0A78, r18	; 0x800a78 <__TEXT_REGION_LENGTH__+0x7e0a78>
     b0c:	30 93 79 0a 	sts	0x0A79, r19	; 0x800a79 <__TEXT_REGION_LENGTH__+0x7e0a79>
     b10:	81 11       	cpse	r24, r1
     b12:	12 c0       	rjmp	.+36     	; 0xb38 <speed_controll_6+0x4a>
     b14:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <__TEXT_REGION_LENGTH__+0x7e0a78>
     b18:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <__TEXT_REGION_LENGTH__+0x7e0a79>
     b1c:	08 95       	ret
     b1e:	2f e4       	ldi	r18, 0x4F	; 79
     b20:	82 9f       	mul	r24, r18
     b22:	c0 01       	movw	r24, r0
     b24:	11 24       	eor	r1, r1
     b26:	64 e6       	ldi	r22, 0x64	; 100
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     b2e:	77 27       	eor	r23, r23
     b30:	60 93 78 0a 	sts	0x0A78, r22	; 0x800a78 <__TEXT_REGION_LENGTH__+0x7e0a78>
     b34:	70 93 79 0a 	sts	0x0A79, r23	; 0x800a79 <__TEXT_REGION_LENGTH__+0x7e0a79>
     b38:	08 95       	ret

00000b3a <speed_controll_7>:
     b3a:	85 36       	cpi	r24, 0x65	; 101
     b3c:	38 f0       	brcs	.+14     	; 0xb4c <speed_controll_7+0x12>
     b3e:	8f e4       	ldi	r24, 0x4F	; 79
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <__TEXT_REGION_LENGTH__+0x7e0a7a>
     b46:	90 93 7b 0a 	sts	0x0A7B, r25	; 0x800a7b <__TEXT_REGION_LENGTH__+0x7e0a7b>
     b4a:	08 95       	ret
     b4c:	84 31       	cpi	r24, 0x14	; 20
     b4e:	68 f4       	brcc	.+26     	; 0xb6a <speed_controll_7+0x30>
     b50:	2f e0       	ldi	r18, 0x0F	; 15
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	20 93 7a 0a 	sts	0x0A7A, r18	; 0x800a7a <__TEXT_REGION_LENGTH__+0x7e0a7a>
     b58:	30 93 7b 0a 	sts	0x0A7B, r19	; 0x800a7b <__TEXT_REGION_LENGTH__+0x7e0a7b>
     b5c:	81 11       	cpse	r24, r1
     b5e:	12 c0       	rjmp	.+36     	; 0xb84 <speed_controll_7+0x4a>
     b60:	10 92 7a 0a 	sts	0x0A7A, r1	; 0x800a7a <__TEXT_REGION_LENGTH__+0x7e0a7a>
     b64:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <__TEXT_REGION_LENGTH__+0x7e0a7b>
     b68:	08 95       	ret
     b6a:	2f e4       	ldi	r18, 0x4F	; 79
     b6c:	82 9f       	mul	r24, r18
     b6e:	c0 01       	movw	r24, r0
     b70:	11 24       	eor	r1, r1
     b72:	64 e6       	ldi	r22, 0x64	; 100
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <__divmodhi4>
     b7a:	77 27       	eor	r23, r23
     b7c:	60 93 7a 0a 	sts	0x0A7A, r22	; 0x800a7a <__TEXT_REGION_LENGTH__+0x7e0a7a>
     b80:	70 93 7b 0a 	sts	0x0A7B, r23	; 0x800a7b <__TEXT_REGION_LENGTH__+0x7e0a7b>
     b84:	08 95       	ret

00000b86 <TCA0_init>:
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	fa e0       	ldi	r31, 0x0A	; 10
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	83 83       	std	Z+3, r24	; 0x03
     b94:	8f ef       	ldi	r24, 0xFF	; 255
     b96:	81 83       	std	Z+1, r24	; 0x01
     b98:	8f e4       	ldi	r24, 0x4F	; 79
     b9a:	86 a3       	std	Z+38, r24	; 0x26
     b9c:	87 a3       	std	Z+39, r24	; 0x27
     b9e:	80 81       	ld	r24, Z
     ba0:	83 60       	ori	r24, 0x03	; 3
     ba2:	80 83       	st	Z, r24
     ba4:	08 95       	ret

00000ba6 <PORT_init>:
 * @brief Initialize PORT D and PORT G for PWM output.
 */
void PORT_init(void)
{
    	/* Set pin 0 to 5 of PORT D as output */
	PORTD.DIRSET |= PIN0_bm;
     ba6:	e0 e6       	ldi	r30, 0x60	; 96
     ba8:	f4 e0       	ldi	r31, 0x04	; 4
     baa:	81 81       	ldd	r24, Z+1	; 0x01
     bac:	81 60       	ori	r24, 0x01	; 1
     bae:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= PIN1_bm;
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= PIN2_bm;
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	84 60       	ori	r24, 0x04	; 4
     bba:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= PIN3_bm;
     bbc:	81 81       	ldd	r24, Z+1	; 0x01
     bbe:	88 60       	ori	r24, 0x08	; 8
     bc0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= PIN4_bm;
     bc2:	81 81       	ldd	r24, Z+1	; 0x01
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET |= PIN5_bm;
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	80 62       	ori	r24, 0x20	; 32
     bcc:	81 83       	std	Z+1, r24	; 0x01

  	/* Set pin 0 and 1 of PORT C as output */
	PORTC.DIRSET |= PIN4_bm;
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f4 e0       	ldi	r31, 0x04	; 4
     bd2:	81 81       	ldd	r24, Z+1	; 0x01
     bd4:	80 61       	ori	r24, 0x10	; 16
     bd6:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET |= PIN5_bm;
     bd8:	81 81       	ldd	r24, Z+1	; 0x01
     bda:	80 62       	ori	r24, 0x20	; 32
     bdc:	81 83       	std	Z+1, r24	; 0x01
     bde:	08 95       	ret

00000be0 <TCB0_init>:
// Interrupt Service Routine for capturing rising edges on tachometer pin


void TCB0_init(void){
	//Config register CTRLB
	TCB0.CTRLB  =
     be0:	e0 e0       	ldi	r30, 0x00	; 0
     be2:	fb e0       	ldi	r31, 0x0B	; 11
     be4:	85 e1       	ldi	r24, 0x15	; 21
     be6:	81 83       	std	Z+1, r24	; 0x01
	| TCB_CNTMODE_FRQPW_gc;																/* Input Capture pulsewidth measurement mode*/
	//| TCB_ASYNC_bm       																/* Asynchronous Enable: disabled */
	//| TCB_CCMPINIT_bm																	/* Pin Initial State: disabled */

	//Config event control
	TCB0.EVCTRL = 
     be8:	81 e1       	ldi	r24, 0x11	; 17
     bea:	84 83       	std	Z+4, r24	; 0x04
	TCB_CAPTEI_bm																		/* Event Input Enable: enabled */
	| TCB_EDGE_bm;																		/* Event Edge: enabled */
	//| TCB_FILTER_bm;																	/* Input Capture Noise Cancellation Filter: disabled */

	//Config interrupt control
	TCB0.INTCTRL= 
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	85 83       	std	Z+5, r24	; 0x05
	TCB_CAPT_bm;																		/* Capture or Timeout: enabled */
	//| TCB_OVF_bm;																		/* OverFlow Interrupt: disabled */

	//Config register CTRLA
	TCB0.CTRLA = 
     bf0:	81 e4       	ldi	r24, 0x41	; 65
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret

00000bf6 <EVSYS_init>:
}

//Event system configuration function
void EVSYS_init(void){

	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTB_PIN5_gc;										//Set pin PB5 to channel 0 in the event system
     bf6:	e0 e0       	ldi	r30, 0x00	; 0
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	8d e4       	ldi	r24, 0x4D	; 77
     bfc:	80 8b       	std	Z+16, r24	; 0x10
	
	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc;										//Bind user TCB0CAPT to event system channel 0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	86 af       	std	Z+62, r24	; 0x3e
     c02:	08 95       	ret

00000c04 <initialize_rpm>:
void TCB0_init(void);
void EVSYS_init();

//Function to setup everything needed for RPM calculations to work
void initialize_rpm(){
		EVSYS_init();
     c04:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <EVSYS_init>
		TCB0_init();
     c08:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <TCB0_init>
		
		PORTB.DIR &= ~PIN5_bm;															//Set PB5 to input
     c0c:	e0 e2       	ldi	r30, 0x20	; 32
     c0e:	f4 e0       	ldi	r31, 0x04	; 4
     c10:	80 81       	ld	r24, Z
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	80 83       	st	Z, r24
		PORTB.PIN5CTRL |= PORT_PULLUPEN_bm;												//Enable pullup on PB5
     c16:	85 89       	ldd	r24, Z+21	; 0x15
     c18:	88 60       	ori	r24, 0x08	; 8
     c1a:	85 8b       	std	Z+21, r24	; 0x15
     c1c:	08 95       	ret

00000c1e <RPM_value>:
int RPM_value(uint16_t var){
	
	uint16_t RPM =  var;																//Sets the RPM variable equal to var
	
	return  RPM;
}
     c1e:	08 95       	ret

00000c20 <percentageVifte>:
		printf("2 = Go Back\r\n");
		
	}
}

void percentageVifte() {
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <percentageVifte+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
	// Convert the entire command array to an integer
	percentage_val = atoi(command);
     c2a:	87 e8       	ldi	r24, 0x87	; 135
     c2c:	95 e4       	ldi	r25, 0x45	; 69
     c2e:	0e 94 12 10 	call	0x2024	; 0x2024 <atoi>
     c32:	80 93 a9 45 	sts	0x45A9, r24	; 0x8045a9 <percentage_val>
     c36:	90 93 aa 45 	sts	0x45AA, r25	; 0x8045aa <percentage_val+0x1>

	// use strtol better for errors
	char* endptr;
	percentage_val = (int) strtol(command, &endptr, 10);
     c3a:	4a e0       	ldi	r20, 0x0A	; 10
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	be 01       	movw	r22, r28
     c40:	6f 5f       	subi	r22, 0xFF	; 255
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	87 e8       	ldi	r24, 0x87	; 135
     c46:	95 e4       	ldi	r25, 0x45	; 69
     c48:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <strtol>
     c4c:	60 93 a9 45 	sts	0x45A9, r22	; 0x8045a9 <percentage_val>
     c50:	70 93 aa 45 	sts	0x45AA, r23	; 0x8045aa <percentage_val+0x1>

	// Check if conversion was successful
	if (*endptr != '\0') {
     c54:	e9 81       	ldd	r30, Y+1	; 0x01
     c56:	fa 81       	ldd	r31, Y+2	; 0x02
     c58:	80 81       	ld	r24, Z
     c5a:	88 23       	and	r24, r24
     c5c:	29 f0       	breq	.+10     	; 0xc68 <percentageVifte+0x48>
		// Conversion failed
		printf("Error: Invalid input\n");
     c5e:	86 e6       	ldi	r24, 0x66	; 102
     c60:	91 e4       	ldi	r25, 0x41	; 65
     c62:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
     c66:	27 c0       	rjmp	.+78     	; 0xcb6 <percentageVifte+0x96>
		// Handle error here
		} else {
		// Conversion successful
		// Check if the value is within the range of 0-100
		if (percentage_val >= 0 && percentage_val <= 100) {
     c68:	86 2f       	mov	r24, r22
     c6a:	97 2f       	mov	r25, r23
     c6c:	85 36       	cpi	r24, 0x65	; 101
     c6e:	91 05       	cpc	r25, r1
     c70:	f0 f4       	brcc	.+60     	; 0xcae <percentageVifte+0x8e>
			// Set a variable with the value of percentage_val
			printf("Percentage value: %d\n", percentage_val); //prints to user
     c72:	7f 93       	push	r23
     c74:	6f 93       	push	r22
     c76:	8b e7       	ldi	r24, 0x7B	; 123
     c78:	91 e4       	ldi	r25, 0x41	; 65
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
			fanspeed_val = percentage_val;
     c82:	80 91 a9 45 	lds	r24, 0x45A9	; 0x8045a9 <percentage_val>
     c86:	90 91 aa 45 	lds	r25, 0x45AA	; 0x8045aa <percentage_val+0x1>
     c8a:	80 93 b3 45 	sts	0x45B3, r24	; 0x8045b3 <fanspeed_val>
			fanspeed_val1 = percentage_val;
     c8e:	80 93 a5 45 	sts	0x45A5, r24	; 0x8045a5 <fanspeed_val1>
			
			printf(percentage_val);
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
			
			set_speed_flag = true; //fanspeedchoice is activated
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 75 45 	sts	0x4575, r24	; 0x804575 <set_speed_flag>
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <percentageVifte+0x96>
			} else {
			// Value is out of range
			printf("Error: Value out of range, please select within the range of 0-100\n");
     cae:	81 e9       	ldi	r24, 0x91	; 145
     cb0:	91 e4       	ldi	r25, 0x41	; 65
     cb2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		}
	}
	
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <fan_choice>:


void fan_choice(){ //choose which fan that the speed is set to
	switch(fan_var)
     cc0:	e0 91 7c 45 	lds	r30, 0x457C	; 0x80457c <fan_var>
     cc4:	8e 2f       	mov	r24, r30
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fc 01       	movw	r30, r24
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	e9 30       	cpi	r30, 0x09	; 9
     cce:	f1 05       	cpc	r31, r1
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <fan_choice+0x14>
     cd2:	1c c1       	rjmp	.+568    	; 0xf0c <fan_choice+0x24c>
     cd4:	e6 58       	subi	r30, 0x86	; 134
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__tablejump2__>
	{
		case 1:
		printf("Fan 1 set to :%d\r\n",percentage_val); 
     cdc:	80 91 aa 45 	lds	r24, 0x45AA	; 0x8045aa <percentage_val+0x1>
     ce0:	8f 93       	push	r24
     ce2:	80 91 a9 45 	lds	r24, 0x45A9	; 0x8045a9 <percentage_val>
     ce6:	8f 93       	push	r24
     ce8:	84 ed       	ldi	r24, 0xD4	; 212
     cea:	91 e4       	ldi	r25, 0x41	; 65
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     cf4:	84 ef       	ldi	r24, 0xF4	; 244
     cf6:	94 e4       	ldi	r25, 0x44	; 68
     cf8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     cfc:	87 ee       	ldi	r24, 0xE7	; 231
     cfe:	91 e4       	ldi	r25, 0x41	; 65
     d00:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_0(percentage_val);
     d04:	80 91 a9 45 	lds	r24, 0x45A9	; 0x8045a9 <percentage_val>
     d08:	0e 94 d5 04 	call	0x9aa	; 0x9aa <speed_controll_0>
		
		printf(fanspeed_val);
     d0c:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     d10:	1f 92       	push	r1
     d12:	8f 93       	push	r24
     d14:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		fan_var=255;
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		set_speed_flag = false;
     d1e:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		break;
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	08 95       	ret
		
		case 2:
		printf("Fan 2 set to :%d\r\n",fanspeed_val);
     d30:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     d34:	1f 92       	push	r1
     d36:	8f 93       	push	r24
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	92 e4       	ldi	r25, 0x42	; 66
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	94 e4       	ldi	r25, 0x44	; 68
     d48:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     d4c:	87 ee       	ldi	r24, 0xE7	; 231
     d4e:	91 e4       	ldi	r25, 0x41	; 65
     d50:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_1(fanspeed_val);
     d54:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     d58:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <speed_controll_1>
		set_speed_flag = false;
     d5c:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		fan_var=255;
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		break;
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	08 95       	ret
		
		case 3:
		printf("Fan 3 set to :%d\r\n",fanspeed_val);
     d70:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	88 e1       	ldi	r24, 0x18	; 24
     d7a:	92 e4       	ldi	r25, 0x42	; 66
     d7c:	9f 93       	push	r25
     d7e:	8f 93       	push	r24
     d80:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     d84:	84 ef       	ldi	r24, 0xF4	; 244
     d86:	94 e4       	ldi	r25, 0x44	; 68
     d88:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     d8c:	87 ee       	ldi	r24, 0xE7	; 231
     d8e:	91 e4       	ldi	r25, 0x41	; 65
     d90:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_2(fanspeed_val);
     d94:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     d98:	0e 94 0b 05 	call	0xa16	; 0xa16 <speed_controll_2>
		fan_var=255;
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		set_speed_flag = false;
     da2:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		break;
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	08 95       	ret
		
		case 4:
		printf("Fan 4 set to :%d\r\n",fanspeed_val);
     db0:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     db4:	1f 92       	push	r1
     db6:	8f 93       	push	r24
     db8:	8b e2       	ldi	r24, 0x2B	; 43
     dba:	92 e4       	ldi	r25, 0x42	; 66
     dbc:	9f 93       	push	r25
     dbe:	8f 93       	push	r24
     dc0:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     dc4:	84 ef       	ldi	r24, 0xF4	; 244
     dc6:	94 e4       	ldi	r25, 0x44	; 68
     dc8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     dcc:	87 ee       	ldi	r24, 0xE7	; 231
     dce:	91 e4       	ldi	r25, 0x41	; 65
     dd0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		fan_var=255;
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		speed_controll_3(fanspeed_val);
     dda:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     dde:	0e 94 26 05 	call	0xa4c	; 0xa4c <speed_controll_3>
		set_speed_flag = false;
     de2:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		break;
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	08 95       	ret
		
		case 5:
		printf("Fan 5 set to :%d\r\n",fanspeed_val);
     df0:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	8e e3       	ldi	r24, 0x3E	; 62
     dfa:	92 e4       	ldi	r25, 0x42	; 66
     dfc:	9f 93       	push	r25
     dfe:	8f 93       	push	r24
     e00:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     e04:	84 ef       	ldi	r24, 0xF4	; 244
     e06:	94 e4       	ldi	r25, 0x44	; 68
     e08:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     e0c:	87 ee       	ldi	r24, 0xE7	; 231
     e0e:	91 e4       	ldi	r25, 0x41	; 65
     e10:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_4(fanspeed_val);
     e14:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     e18:	0e 94 41 05 	call	0xa82	; 0xa82 <speed_controll_4>
		set_speed_flag = false;
     e1c:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		fan_var=255;
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		break;
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	08 95       	ret
		
		case 6:
		printf("Fan 6 set to :%d\r\n",fanspeed_val);
     e30:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	81 e5       	ldi	r24, 0x51	; 81
     e3a:	92 e4       	ldi	r25, 0x42	; 66
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     e44:	84 ef       	ldi	r24, 0xF4	; 244
     e46:	94 e4       	ldi	r25, 0x44	; 68
     e48:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     e4c:	87 ee       	ldi	r24, 0xE7	; 231
     e4e:	91 e4       	ldi	r25, 0x41	; 65
     e50:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_5(fanspeed_val);
     e54:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     e58:	0e 94 5c 05 	call	0xab8	; 0xab8 <speed_controll_5>
		set_speed_flag = false;
     e5c:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		fan_var=255;
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		break;
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	08 95       	ret
		
		case 7:
		printf("Fan 7 set to :%d\r\n",fanspeed_val);
     e70:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     e74:	1f 92       	push	r1
     e76:	8f 93       	push	r24
     e78:	84 e6       	ldi	r24, 0x64	; 100
     e7a:	92 e4       	ldi	r25, 0x42	; 66
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     e84:	84 ef       	ldi	r24, 0xF4	; 244
     e86:	94 e4       	ldi	r25, 0x44	; 68
     e88:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     e8c:	87 ee       	ldi	r24, 0xE7	; 231
     e8e:	91 e4       	ldi	r25, 0x41	; 65
     e90:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_6(fanspeed_val);
     e94:	80 91 b3 45 	lds	r24, 0x45B3	; 0x8045b3 <fanspeed_val>
     e98:	0e 94 77 05 	call	0xaee	; 0xaee <speed_controll_6>
		fan_var=255;
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		set_speed_flag = false;
     ea2:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		break;
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	08 95       	ret
		
		case 8:
		printf("Fan 8 set to :%d\r\n",percentage_val);
     eb0:	80 91 aa 45 	lds	r24, 0x45AA	; 0x8045aa <percentage_val+0x1>
     eb4:	8f 93       	push	r24
     eb6:	80 91 a9 45 	lds	r24, 0x45A9	; 0x8045a9 <percentage_val>
     eba:	8f 93       	push	r24
     ebc:	87 e7       	ldi	r24, 0x77	; 119
     ebe:	92 e4       	ldi	r25, 0x42	; 66
     ec0:	9f 93       	push	r25
     ec2:	8f 93       	push	r24
     ec4:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		printf("\r\n");
     ec8:	84 ef       	ldi	r24, 0xF4	; 244
     eca:	94 e4       	ldi	r25, 0x44	; 68
     ecc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Choose your next percentage:\r\n");
     ed0:	87 ee       	ldi	r24, 0xE7	; 231
     ed2:	91 e4       	ldi	r25, 0x41	; 65
     ed4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		speed_controll_7(percentage_val);
     ed8:	80 91 a9 45 	lds	r24, 0x45A9	; 0x8045a9 <percentage_val>
     edc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <speed_controll_7>
		fan_var=255;
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		set_speed_flag = false;
     ee6:	10 92 75 45 	sts	0x4575, r1	; 0x804575 <set_speed_flag>
		break;
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	08 95       	ret
		
		case 9:
		printf("Going Back->");
     ef4:	8a e8       	ldi	r24, 0x8A	; 138
     ef6:	92 e4       	ldi	r25, 0x42	; 66
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		manual_var = 255;
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <manual_var>
		break;
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	08 95       	ret
		
		default:
		printf(("Choose your fan\r\n" ));
     f0c:	87 e9       	ldi	r24, 0x97	; 151
     f0e:	92 e4       	ldi	r25, 0x42	; 66
     f10:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("1 = Fan 1\r\n"));
     f14:	88 ea       	ldi	r24, 0xA8	; 168
     f16:	92 e4       	ldi	r25, 0x42	; 66
     f18:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("2 = Fan 2\r\n"));
     f1c:	83 eb       	ldi	r24, 0xB3	; 179
     f1e:	92 e4       	ldi	r25, 0x42	; 66
     f20:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("3 = Fan 3\r\n"));
     f24:	8e eb       	ldi	r24, 0xBE	; 190
     f26:	92 e4       	ldi	r25, 0x42	; 66
     f28:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("4 = Fan 4\r\n"));
     f2c:	89 ec       	ldi	r24, 0xC9	; 201
     f2e:	92 e4       	ldi	r25, 0x42	; 66
     f30:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("5 = Fan 5\r\n"));
     f34:	84 ed       	ldi	r24, 0xD4	; 212
     f36:	92 e4       	ldi	r25, 0x42	; 66
     f38:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("6 = Fan 6\r\n"));
     f3c:	8f ed       	ldi	r24, 0xDF	; 223
     f3e:	92 e4       	ldi	r25, 0x42	; 66
     f40:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("7 = Fan 7\r\n"));
     f44:	8a ee       	ldi	r24, 0xEA	; 234
     f46:	92 e4       	ldi	r25, 0x42	; 66
     f48:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("8 = Fan 8\r\n"));
     f4c:	85 ef       	ldi	r24, 0xF5	; 245
     f4e:	92 e4       	ldi	r25, 0x42	; 66
     f50:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf(("9 = Go Back->\r\n"));
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	93 e4       	ldi	r25, 0x43	; 67
     f58:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		
		fan_var = compareCommands(command,choicearray,9); //compares command to command array
     f5c:	49 e0       	ldi	r20, 0x09	; 9
     f5e:	60 e1       	ldi	r22, 0x10	; 16
     f60:	70 e4       	ldi	r23, 0x40	; 64
     f62:	87 e8       	ldi	r24, 0x87	; 135
     f64:	95 e4       	ldi	r25, 0x45	; 69
     f66:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
     f6a:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
     f6e:	08 95       	ret

00000f70 <manualMenu>:
		fan_var=255;
		
		break;
	}
}
void manualMenu(){
     f70:	cf 93       	push	r28
	switch (manual_var)
     f72:	80 91 81 45 	lds	r24, 0x4581	; 0x804581 <manual_var>
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	19 f0       	breq	.+6      	; 0xf80 <manualMenu+0x10>
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <manualMenu+0x30>
     f7e:	20 c0       	rjmp	.+64     	; 0xfc0 <manualMenu+0x50>
	{
		case 1://set speed manually
		auto_flag = false;
     f80:	10 92 22 40 	sts	0x4022, r1	; 0x804022 <auto_flag>
		if (set_speed_flag)
     f84:	80 91 75 45 	lds	r24, 0x4575	; 0x804575 <set_speed_flag>
     f88:	88 23       	and	r24, r24
     f8a:	19 f0       	breq	.+6      	; 0xf92 <manualMenu+0x22>
		{
			fan_choice(); //pick which fan to set the percentage speed to
     f8c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fan_choice>
     f90:	2f c0       	rjmp	.+94     	; 0xff0 <manualMenu+0x80>
			
		}else{ percentageVifte(); //pick speed
     f92:	0e 94 10 06 	call	0xc20	; 0xc20 <percentageVifte>
			printf("Enter Percentage\r\n"); 
     f96:	8f e0       	ldi	r24, 0x0F	; 15
     f98:	93 e4       	ldi	r25, 0x43	; 67
     f9a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
     f9e:	28 c0       	rjmp	.+80     	; 0xff0 <manualMenu+0x80>
		}
			
		break;
		
		case 2:
		printf("Going back->\r\n");
     fa0:	81 e2       	ldi	r24, 0x21	; 33
     fa2:	93 e4       	ldi	r25, 0x43	; 67
     fa4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		modes_var=255;
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	80 93 c4 45 	sts	0x45C4, r24	; 0x8045c4 <modes_var>
		manual_var=255;
     fae:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <manual_var>
		break;
     fb2:	1e c0       	rjmp	.+60     	; 0xff0 <manualMenu+0x80>
		
		default:
		for (uint8_t i = 0; i < 8; i++){
			printf("\r\n");
     fb4:	84 ef       	ldi	r24, 0xF4	; 244
     fb6:	94 e4       	ldi	r25, 0x44	; 68
     fb8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		modes_var=255;
		manual_var=255;
		break;
		
		default:
		for (uint8_t i = 0; i < 8; i++){
     fbc:	cf 5f       	subi	r28, 0xFF	; 255
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <manualMenu+0x52>
		
		break;
	}
}
void manualMenu(){
	switch (manual_var)
     fc0:	c0 e0       	ldi	r28, 0x00	; 0
		modes_var=255;
		manual_var=255;
		break;
		
		default:
		for (uint8_t i = 0; i < 8; i++){
     fc2:	c8 30       	cpi	r28, 0x08	; 8
     fc4:	b8 f3       	brcs	.-18     	; 0xfb4 <manualMenu+0x44>
			printf("\r\n");
		}
		manual_var = compareCommands(command,choicearray,5); //compares command to command array
     fc6:	45 e0       	ldi	r20, 0x05	; 5
     fc8:	60 e1       	ldi	r22, 0x10	; 16
     fca:	70 e4       	ldi	r23, 0x40	; 64
     fcc:	87 e8       	ldi	r24, 0x87	; 135
     fce:	95 e4       	ldi	r25, 0x45	; 69
     fd0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
     fd4:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <manual_var>
		printf("Start Menu > Modes > Manual speed\r\n");
     fd8:	8f e2       	ldi	r24, 0x2F	; 47
     fda:	93 e4       	ldi	r25, 0x43	; 67
     fdc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("1 = Percentage\r\n");
     fe0:	82 e5       	ldi	r24, 0x52	; 82
     fe2:	93 e4       	ldi	r25, 0x43	; 67
     fe4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("2 = Go Back\r\n");
     fe8:	82 e6       	ldi	r24, 0x62	; 98
     fea:	93 e4       	ldi	r25, 0x43	; 67
     fec:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		
	}
}
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <modesMenu>:
		}
	
		}


void modesMenu(){
     ff4:	cf 93       	push	r28
	switch (modes_var) //switch case for different types of speed-controlling
     ff6:	80 91 c4 45 	lds	r24, 0x45C4	; 0x8045c4 <modes_var>
     ffa:	82 30       	cpi	r24, 0x02	; 2
     ffc:	a1 f0       	breq	.+40     	; 0x1026 <modesMenu+0x32>
     ffe:	18 f4       	brcc	.+6      	; 0x1006 <modesMenu+0x12>
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	31 f0       	breq	.+12     	; 0x1010 <modesMenu+0x1c>
    1004:	26 c0       	rjmp	.+76     	; 0x1052 <modesMenu+0x5e>
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	89 f0       	breq	.+34     	; 0x102c <modesMenu+0x38>
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	a1 f0       	breq	.+40     	; 0x1036 <modesMenu+0x42>
    100e:	21 c0       	rjmp	.+66     	; 0x1052 <modesMenu+0x5e>
	{
		case 1:
		printf("Automatic speed activated\r\n");
    1010:	8f e6       	ldi	r24, 0x6F	; 111
    1012:	93 e4       	ldi	r25, 0x43	; 67
    1014:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		auto_flag = true; //automatic speed is set
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <auto_flag>
		modes_var=255;
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	80 93 c4 45 	sts	0x45C4, r24	; 0x8045c4 <modes_var>
		break;
    1024:	3b c0       	rjmp	.+118    	; 0x109c <modesMenu+0xa8>
		case 2:
		manualMenu(); //manualspeed menu
    1026:	0e 94 b8 07 	call	0xf70	; 0xf70 <manualMenu>
		break;
    102a:	38 c0       	rjmp	.+112    	; 0x109c <modesMenu+0xa8>
		case 3:
		printf("Additional\r\n"); //not implemented
    102c:	88 ed       	ldi	r24, 0xD8	; 216
    102e:	93 e4       	ldi	r25, 0x43	; 67
    1030:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		break;
    1034:	33 c0       	rjmp	.+102    	; 0x109c <modesMenu+0xa8>
		case 4:
		printf("Going back ->\r\n"); // go back
    1036:	8a e8       	ldi	r24, 0x8A	; 138
    1038:	93 e4       	ldi	r25, 0x43	; 67
    103a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		start_var= 255;
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	80 93 86 45 	sts	0x4586, r24	; 0x804586 <start_var>
		break;
    1044:	2b c0       	rjmp	.+86     	; 0x109c <modesMenu+0xa8>
		
		default:
		for (uint8_t i = 0; i < 10; i++){
			printf("\r\n");
    1046:	84 ef       	ldi	r24, 0xF4	; 244
    1048:	94 e4       	ldi	r25, 0x44	; 68
    104a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("Going back ->\r\n"); // go back
		start_var= 255;
		break;
		
		default:
		for (uint8_t i = 0; i < 10; i++){
    104e:	cf 5f       	subi	r28, 0xFF	; 255
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <modesMenu+0x60>
	
		}


void modesMenu(){
	switch (modes_var) //switch case for different types of speed-controlling
    1052:	c0 e0       	ldi	r28, 0x00	; 0
		printf("Going back ->\r\n"); // go back
		start_var= 255;
		break;
		
		default:
		for (uint8_t i = 0; i < 10; i++){
    1054:	ca 30       	cpi	r28, 0x0A	; 10
    1056:	b8 f3       	brcs	.-18     	; 0x1046 <modesMenu+0x52>
			printf("\r\n");
		}
		printf("Start Menu > Modes\r\n");
    1058:	89 e9       	ldi	r24, 0x99	; 153
    105a:	93 e4       	ldi	r25, 0x43	; 67
    105c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("1 = Automatic Speed\r\n");
    1060:	8d ea       	ldi	r24, 0xAD	; 173
    1062:	93 e4       	ldi	r25, 0x43	; 67
    1064:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("2 = Manual Speed\r\n");
    1068:	82 ec       	ldi	r24, 0xC2	; 194
    106a:	93 e4       	ldi	r25, 0x43	; 67
    106c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("3 = Additional\r\n");
    1070:	84 ed       	ldi	r24, 0xD4	; 212
    1072:	93 e4       	ldi	r25, 0x43	; 67
    1074:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("4 = Go Back\r\n");
    1078:	84 ee       	ldi	r24, 0xE4	; 228
    107a:	93 e4       	ldi	r25, 0x43	; 67
    107c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		modes_var = compareCommands(command,choicearray,5); //compares command to command array
    1080:	45 e0       	ldi	r20, 0x05	; 5
    1082:	60 e1       	ldi	r22, 0x10	; 16
    1084:	70 e4       	ldi	r23, 0x40	; 64
    1086:	87 e8       	ldi	r24, 0x87	; 135
    1088:	95 e4       	ldi	r25, 0x45	; 69
    108a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
    108e:	80 93 c4 45 	sts	0x45C4, r24	; 0x8045c4 <modes_var>
		manual_var=255;
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	80 93 81 45 	sts	0x4581, r24	; 0x804581 <manual_var>
		fan_var=255;
    1098:	80 93 7c 45 	sts	0x457C, r24	; 0x80457c <fan_var>
		
		break;
	}
}
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <automaticspeed>:
		printf("3 = Go Back->\r\n");
		data_var = compareCommands(command,choicearray,9);
	}	
}

int automaticspeed(){ //sets the speed of the fans with temprature data
    10a0:	cf 93       	push	r28
	
	uint8_t setspeed = 0; //setmanual speed is false
   if (auto_flag) { //if autospeed is activated
    10a2:	80 91 22 40 	lds	r24, 0x4022	; 0x804022 <auto_flag>
    10a6:	88 23       	and	r24, r24
    10a8:	01 f1       	breq	.+64     	; 0x10ea <automaticspeed+0x4a>
	  
	   setspeed = (read_aht10_data(0)) * 8 - 150; // Linear interpolation to calculate speed
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 43 0a 	call	0x1486	; 0x1486 <read_aht10_data>
    10b2:	88 0f       	add	r24, r24
    10b4:	88 0f       	add	r24, r24
    10b6:	88 0f       	add	r24, r24
    10b8:	ca e6       	ldi	r28, 0x6A	; 106
    10ba:	c8 0f       	add	r28, r24
	   
	   if (!(setspeed < 100 && setspeed > 0)) {
    10bc:	87 59       	subi	r24, 0x97	; 151
    10be:	83 36       	cpi	r24, 0x63	; 99
    10c0:	80 f0       	brcs	.+32     	; 0x10e2 <automaticspeed+0x42>
		   setspeed = 0; // Set to default if speed is out of range
		  speed_controll_0(setspeed); //setspeed to zero
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <speed_controll_0>
		   printf("ERROR: speed is set to zero\n");
    10c8:	81 ef       	ldi	r24, 0xF1	; 241
    10ca:	93 e4       	ldi	r25, 0x43	; 67
    10cc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		   printf("ERROR reading data from temprature sensor");
    10d0:	8d e0       	ldi	r24, 0x0D	; 13
    10d2:	94 e4       	ldi	r25, 0x44	; 68
    10d4:	9f 93       	push	r25
    10d6:	8f 93       	push	r24
    10d8:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
   if (auto_flag) { //if autospeed is activated
	  
	   setspeed = (read_aht10_data(0)) * 8 - 150; // Linear interpolation to calculate speed
	   
	   if (!(setspeed < 100 && setspeed > 0)) {
		   setspeed = 0; // Set to default if speed is out of range
    10e0:	c0 e0       	ldi	r28, 0x00	; 0
		  speed_controll_0(setspeed); //setspeed to zero
		   printf("ERROR: speed is set to zero\n");
		   printf("ERROR reading data from temprature sensor");
	   }
		speed_controll_0(setspeed); //setspeed
    10e2:	8c 2f       	mov	r24, r28
    10e4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <speed_controll_0>
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <automaticspeed+0x4c>
	}	
}

int automaticspeed(){ //sets the speed of the fans with temprature data
	
	uint8_t setspeed = 0; //setmanual speed is false
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
	   }
		speed_controll_0(setspeed); //setspeed
   }
   return setspeed; //returns value

   }
    10ec:	8c 2f       	mov	r24, r28
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <readeeprom>:


void readeeprom(){
	switch (read_val) //reads pred-value of each address occupied to specified fan
    10f4:	e0 91 b4 45 	lds	r30, 0x45B4	; 0x8045b4 <read_val>
    10f8:	8e 2f       	mov	r24, r30
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	fc 01       	movw	r30, r24
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	e9 30       	cpi	r30, 0x09	; 9
    1102:	f1 05       	cpc	r31, r1
    1104:	08 f0       	brcs	.+2      	; 0x1108 <readeeprom+0x14>
    1106:	6c c0       	rjmp	.+216    	; 0x11e0 <readeeprom+0xec>
    1108:	ed 57       	subi	r30, 0x7D	; 125
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__tablejump2__>
	{
	case 1:
	read_data_rpm_eeprom(&current_fan_adress1,&start_fan_adress1,&n_count_adress1);
    1110:	4e e0       	ldi	r20, 0x0E	; 14
    1112:	50 e4       	ldi	r21, 0x40	; 64
    1114:	6d e2       	ldi	r22, 0x2D	; 45
    1116:	75 e4       	ldi	r23, 0x45	; 69
    1118:	82 ec       	ldi	r24, 0xC2	; 194
    111a:	95 e4       	ldi	r25, 0x45	; 69
    111c:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    1126:	08 95       	ret
	case 2 :
	read_data_rpm_eeprom(&current_fan_adress2,&start_fan_adress2,&n_count_adress2);
    1128:	4c e0       	ldi	r20, 0x0C	; 12
    112a:	50 e4       	ldi	r21, 0x40	; 64
    112c:	6b e2       	ldi	r22, 0x2B	; 43
    112e:	75 e4       	ldi	r23, 0x45	; 69
    1130:	81 eb       	ldi	r24, 0xB1	; 177
    1132:	95 e4       	ldi	r25, 0x45	; 69
    1134:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    113e:	08 95       	ret
	case 3:
	read_data_rpm_eeprom(&current_fan_adress3,&start_fan_adress3,&n_count_adress3);
    1140:	4a e0       	ldi	r20, 0x0A	; 10
    1142:	50 e4       	ldi	r21, 0x40	; 64
    1144:	69 e2       	ldi	r22, 0x29	; 41
    1146:	75 e4       	ldi	r23, 0x45	; 69
    1148:	8d e9       	ldi	r24, 0x9D	; 157
    114a:	95 e4       	ldi	r25, 0x45	; 69
    114c:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    1156:	08 95       	ret
	case 4:
	read_data_rpm_eeprom(&current_fan_adress4,&start_fan_adress4,&n_count_adress4);
    1158:	48 e0       	ldi	r20, 0x08	; 8
    115a:	50 e4       	ldi	r21, 0x40	; 64
    115c:	67 e2       	ldi	r22, 0x27	; 39
    115e:	75 e4       	ldi	r23, 0x45	; 69
    1160:	8f e9       	ldi	r24, 0x9F	; 159
    1162:	95 e4       	ldi	r25, 0x45	; 69
    1164:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    116e:	08 95       	ret
	case 5:
	read_data_rpm_eeprom(&current_fan_adress5,&start_fan_adress5,&n_count_adress5);
    1170:	46 e0       	ldi	r20, 0x06	; 6
    1172:	50 e4       	ldi	r21, 0x40	; 64
    1174:	65 e2       	ldi	r22, 0x25	; 37
    1176:	75 e4       	ldi	r23, 0x45	; 69
    1178:	87 ea       	ldi	r24, 0xA7	; 167
    117a:	95 e4       	ldi	r25, 0x45	; 69
    117c:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1180:	8f ef       	ldi	r24, 0xFF	; 255
    1182:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    1186:	08 95       	ret
	case 6:
	read_data_rpm_eeprom(&current_fan_adress6,&start_fan_adress6,&n_count_adress6);
    1188:	44 e0       	ldi	r20, 0x04	; 4
    118a:	50 e4       	ldi	r21, 0x40	; 64
    118c:	63 e2       	ldi	r22, 0x23	; 35
    118e:	75 e4       	ldi	r23, 0x45	; 69
    1190:	8f ea       	ldi	r24, 0xAF	; 175
    1192:	95 e4       	ldi	r25, 0x45	; 69
    1194:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    119e:	08 95       	ret
	case 7:
	read_data_rpm_eeprom(&current_fan_adress7,&start_fan_adress7,&n_count_adress7);
    11a0:	42 e0       	ldi	r20, 0x02	; 2
    11a2:	50 e4       	ldi	r21, 0x40	; 64
    11a4:	61 e2       	ldi	r22, 0x21	; 33
    11a6:	75 e4       	ldi	r23, 0x45	; 69
    11a8:	8c eb       	ldi	r24, 0xBC	; 188
    11aa:	95 e4       	ldi	r25, 0x45	; 69
    11ac:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    11b6:	08 95       	ret
	case 8:
	read_data_rpm_eeprom(&current_fan_adress8,&start_fan_adress8,&n_count_adress8);
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	50 e4       	ldi	r21, 0x40	; 64
    11bc:	6f e1       	ldi	r22, 0x1F	; 31
    11be:	75 e4       	ldi	r23, 0x45	; 69
    11c0:	85 ec       	ldi	r24, 0xC5	; 197
    11c2:	95 e4       	ldi	r25, 0x45	; 69
    11c4:	0e 94 42 03 	call	0x684	; 0x684 <read_data_rpm_eeprom>
	read_val=255;
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
		break;
    11ce:	08 95       	ret
	case 9:
		printf("Going Back->\r\n");
    11d0:	87 e3       	ldi	r24, 0x37	; 55
    11d2:	94 e4       	ldi	r25, 0x44	; 68
    11d4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		start_var=255;
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	80 93 86 45 	sts	0x4586, r24	; 0x804586 <start_var>
		break;
    11de:	08 95       	ret
	default:
	printf("1 = Fan 1\r\n");
    11e0:	88 ea       	ldi	r24, 0xA8	; 168
    11e2:	92 e4       	ldi	r25, 0x42	; 66
    11e4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("2 = Fan 2\r\n");
    11e8:	83 eb       	ldi	r24, 0xB3	; 179
    11ea:	92 e4       	ldi	r25, 0x42	; 66
    11ec:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("3 = Fan 3\r\n");
    11f0:	8e eb       	ldi	r24, 0xBE	; 190
    11f2:	92 e4       	ldi	r25, 0x42	; 66
    11f4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("4 = Fan 4\r\n");
    11f8:	89 ec       	ldi	r24, 0xC9	; 201
    11fa:	92 e4       	ldi	r25, 0x42	; 66
    11fc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("5 = Fan 5\r\n");
    1200:	84 ed       	ldi	r24, 0xD4	; 212
    1202:	92 e4       	ldi	r25, 0x42	; 66
    1204:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("6 = Fan 6\r\n");
    1208:	8f ed       	ldi	r24, 0xDF	; 223
    120a:	92 e4       	ldi	r25, 0x42	; 66
    120c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("7 = Fan 7\r\n");
    1210:	8a ee       	ldi	r24, 0xEA	; 234
    1212:	92 e4       	ldi	r25, 0x42	; 66
    1214:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("8 = Fan 8\r\n");
    1218:	85 ef       	ldi	r24, 0xF5	; 245
    121a:	92 e4       	ldi	r25, 0x42	; 66
    121c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	printf("9 = Go Back->\r\n");
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	93 e4       	ldi	r25, 0x43	; 67
    1224:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	read_val=compareCommands(command,choicearray,9);
    1228:	49 e0       	ldi	r20, 0x09	; 9
    122a:	60 e1       	ldi	r22, 0x10	; 16
    122c:	70 e4       	ldi	r23, 0x40	; 64
    122e:	87 e8       	ldi	r24, 0x87	; 135
    1230:	95 e4       	ldi	r25, 0x45	; 69
    1232:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
    1236:	80 93 b4 45 	sts	0x45B4, r24	; 0x8045b4 <read_val>
    123a:	08 95       	ret

0000123c <dataMenu>:
		
		fan_var = compareCommands(command,choicearray,9); //compares command to command array
	}
}
void dataMenu(){
	switch (data_var)
    123c:	80 91 91 45 	lds	r24, 0x4591	; 0x804591 <data_var>
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	39 f0       	breq	.+14     	; 0x1252 <dataMenu+0x16>
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	79 f0       	breq	.+30     	; 0x1266 <dataMenu+0x2a>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a9 f4       	brne	.+42     	; 0x1276 <dataMenu+0x3a>
	{
		case 1:

		readeeprom(); //read pred-data on fans
    124c:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <readeeprom>
		
		break;
    1250:	08 95       	ret
		
		case 2:
		printf("erase all data\r\n");
    1252:	85 e4       	ldi	r24, 0x45	; 69
    1254:	94 e4       	ldi	r25, 0x44	; 68
    1256:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		adress_space_clear(); //rewriting will commence
    125a:	0e 94 91 03 	call	0x722	; 0x722 <adress_space_clear>
		data_var=255;
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	80 93 91 45 	sts	0x4591, r24	; 0x804591 <data_var>
		break;
    1264:	08 95       	ret
		
		case 3:
		printf("Going back\r\n");
    1266:	85 e5       	ldi	r24, 0x55	; 85
    1268:	94 e4       	ldi	r25, 0x44	; 68
    126a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		start_var = 255;
    126e:	8f ef       	ldi	r24, 0xFF	; 255
    1270:	80 93 86 45 	sts	0x4586, r24	; 0x804586 <start_var>
		break;
    1274:	08 95       	ret
		
		default:
		printf("Start Menu > Data\r\n");
    1276:	81 e6       	ldi	r24, 0x61	; 97
    1278:	94 e4       	ldi	r25, 0x44	; 68
    127a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("1 = Read data from the fans\r\n");
    127e:	84 e7       	ldi	r24, 0x74	; 116
    1280:	94 e4       	ldi	r25, 0x44	; 68
    1282:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("2 = Erase all data\r\n");
    1286:	81 e9       	ldi	r24, 0x91	; 145
    1288:	94 e4       	ldi	r25, 0x44	; 68
    128a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("3 = Go Back->\r\n");
    128e:	85 ea       	ldi	r24, 0xA5	; 165
    1290:	94 e4       	ldi	r25, 0x44	; 68
    1292:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		data_var = compareCommands(command,choicearray,9);
    1296:	49 e0       	ldi	r20, 0x09	; 9
    1298:	60 e1       	ldi	r22, 0x10	; 16
    129a:	70 e4       	ldi	r23, 0x40	; 64
    129c:	87 e8       	ldi	r24, 0x87	; 135
    129e:	95 e4       	ldi	r25, 0x45	; 69
    12a0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
    12a4:	80 93 91 45 	sts	0x4591, r24	; 0x804591 <data_var>
    12a8:	08 95       	ret

000012aa <startMenu>:
#include "RPM.h"
bool auto_flag= true; //activates temprature controlled speed and eeprom storing of data
bool set_speed_flag = false; // bool to keep track of writing speed to fan


void startMenu(){
    12aa:	cf 93       	push	r28
	
	//automaticspeed();
	
			
	switch (start_var) //startmenu and its choices
    12ac:	80 91 86 45 	lds	r24, 0x4586	; 0x804586 <start_var>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <startMenu+0x18>
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	41 f0       	breq	.+16     	; 0x12c8 <startMenu+0x1e>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	a9 f4       	brne	.+42     	; 0x12e6 <startMenu+0x3c>
	{
		case 1:
		modesMenu();
    12bc:	0e 94 fa 07 	call	0xff4	; 0xff4 <modesMenu>
		break;
    12c0:	31 c0       	rjmp	.+98     	; 0x1324 <startMenu+0x7a>
		
		case 2:
		dataMenu();
    12c2:	0e 94 1e 09 	call	0x123c	; 0x123c <dataMenu>
		break;
    12c6:	2e c0       	rjmp	.+92     	; 0x1324 <startMenu+0x7a>
		
		case 3:
		printf("you have chosen the third menu");
    12c8:	84 eb       	ldi	r24, 0xB4	; 180
    12ca:	94 e4       	ldi	r25, 0x44	; 68
    12cc:	9f 93       	push	r25
    12ce:	8f 93       	push	r24
    12d0:	0e 94 4f 10 	call	0x209e	; 0x209e <printf>
		
		break;
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	25 c0       	rjmp	.+74     	; 0x1324 <startMenu+0x7a>
		
		default:
		for (uint8_t i = 0; i < 11; i++){
			printf("\r\n");
    12da:	84 ef       	ldi	r24, 0xF4	; 244
    12dc:	94 e4       	ldi	r25, 0x44	; 68
    12de:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("you have chosen the third menu");
		
		break;
		
		default:
		for (uint8_t i = 0; i < 11; i++){
    12e2:	cf 5f       	subi	r28, 0xFF	; 255
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <startMenu+0x3e>
void startMenu(){
	
	//automaticspeed();
	
			
	switch (start_var) //startmenu and its choices
    12e6:	c0 e0       	ldi	r28, 0x00	; 0
		printf("you have chosen the third menu");
		
		break;
		
		default:
		for (uint8_t i = 0; i < 11; i++){
    12e8:	cb 30       	cpi	r28, 0x0B	; 11
    12ea:	b8 f3       	brcs	.-18     	; 0x12da <startMenu+0x30>
			printf("\r\n");
		}
			//prints choices
		printf("Start Menu\r\n");
    12ec:	83 ed       	ldi	r24, 0xD3	; 211
    12ee:	94 e4       	ldi	r25, 0x44	; 68
    12f0:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("1 = Modes \r\n");
    12f4:	8f ed       	ldi	r24, 0xDF	; 223
    12f6:	94 e4       	ldi	r25, 0x44	; 68
    12f8:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("2 = Data \r\n");
    12fc:	8b ee       	ldi	r24, 0xEB	; 235
    12fe:	94 e4       	ldi	r25, 0x44	; 68
    1300:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		printf("3 = Configure address\r\n");
    1304:	86 ef       	ldi	r24, 0xF6	; 246
    1306:	94 e4       	ldi	r25, 0x44	; 68
    1308:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
		start_var = compareCommands(command,choicearray,3); //compares command to array of commads
    130c:	43 e0       	ldi	r20, 0x03	; 3
    130e:	60 e1       	ldi	r22, 0x10	; 16
    1310:	70 e4       	ldi	r23, 0x40	; 64
    1312:	87 e8       	ldi	r24, 0x87	; 135
    1314:	95 e4       	ldi	r25, 0x45	; 69
    1316:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <compareCommands>
    131a:	80 93 86 45 	sts	0x4586, r24	; 0x804586 <start_var>
		modes_var = 255;
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	80 93 c4 45 	sts	0x45C4, r24	; 0x8045c4 <modes_var>
		break;
		}
	
		}
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <TWI0_M_init>:
#include <string.h>
# include "uart.h"
#include "twi_aht10.h"

static void TWI0_M_init ( void ) {
	PORTA.DIRSET = PIN2_bm | PIN3_bm ;
    1328:	e0 e0       	ldi	r30, 0x00	; 0
    132a:	f4 e0       	ldi	r31, 0x04	; 4
    132c:	8c e0       	ldi	r24, 0x0C	; 12
    132e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.PINCONFIG = PORT_PULLUPEN_bm ;
    1330:	98 e0       	ldi	r25, 0x08	; 8
    1332:	93 87       	std	Z+11, r25	; 0x0b
	PORTA.PINCTRLUPD = PIN2_bm | PIN3_bm ;
    1334:	84 87       	std	Z+12, r24	; 0x0c
	// TWI0.CTRLA = TWI_SDAHOLD_50NS_gc ; // Setting hold time to 50 NS.
	
	TWI0.MCTRLA = TWI_ENABLE_bm ; // Enable TWI /I2C as controller .
    1336:	e0 e0       	ldi	r30, 0x00	; 0
    1338:	f9 e0       	ldi	r31, 0x09	; 9
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	83 83       	std	Z+3, r24	; 0x03
	TWI0.MBAUD = ( uint8_t ) TWI0_BAUD ( I2C_SCL_FREQ ,0) ; // Configure TWI baud rate .
    133e:	97 e0       	ldi	r25, 0x07	; 7
    1340:	96 83       	std	Z+6, r25	; 0x06
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc ; // Setting the I2C bus to idle .
    1342:	85 83       	std	Z+5, r24	; 0x05
    1344:	08 95       	ret

00001346 <I2C0_M_start>:
* @param addr The address of the device on the bus.
* @param dir Specifies direction of transfer . 1 is read , 0 is write .
*/
static void I2C0_M_start ( uint8_t addr , uint8_t dir ) {
	/* Specify read or write of client */
	TWI0.MADDR = ( addr << 1) | dir ;
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	86 2b       	or	r24, r22
    134e:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	TWI_WAIT() ;
    1352:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1356:	85 fd       	sbrc	r24, 5
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <I2C0_M_start+0x2e>
    135a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    135e:	82 fd       	sbrc	r24, 2
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <I2C0_M_start+0x2e>
    1362:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1366:	83 fd       	sbrc	r24, 3
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <I2C0_M_start+0x2e>
    136a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    136e:	83 70       	andi	r24, 0x03	; 3
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	79 f7       	brne	.-34     	; 0x1352 <I2C0_M_start+0xc>
    1374:	08 95       	ret

00001376 <I2C_M_read>:
* @brief This function reads len bytes to the device on the specified address .
* @param addr The address of the device on the bus.
* @param data Pointer to data array .
* @param len The number of bytes to be read .
*/
static void I2C_M_read ( uint8_t addr , uint8_t* data , uint8_t len ) {
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	8b 01       	movw	r16, r22
    137e:	c4 2f       	mov	r28, r20
	I2C0_M_start ( addr , DIR_READ );
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	0e 94 a3 09 	call	0x1346	; 0x1346 <I2C0_M_start>
	uint8_t byte_count = 0;
    1386:	90 e0       	ldi	r25, 0x00	; 0
	while ( byte_count < len ) {
    1388:	1d c0       	rjmp	.+58     	; 0x13c4 <I2C_M_read+0x4e>
		TWI_WAIT () ;
    138a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    138e:	85 fd       	sbrc	r24, 5
    1390:	0d c0       	rjmp	.+26     	; 0x13ac <I2C_M_read+0x36>
    1392:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1396:	82 fd       	sbrc	r24, 2
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <I2C_M_read+0x36>
    139a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    139e:	83 fd       	sbrc	r24, 3
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <I2C_M_read+0x36>
    13a2:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    13a6:	83 70       	andi	r24, 0x03	; 3
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	79 f7       	brne	.-34     	; 0x138a <I2C_M_read+0x14>
		data [ byte_count ] = TWI0 . MDATA ;
    13ac:	f8 01       	movw	r30, r16
    13ae:	e9 0f       	add	r30, r25
    13b0:	f1 1d       	adc	r31, r1
    13b2:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
    13b6:	80 83       	st	Z, r24
		byte_count ++;
    13b8:	9f 5f       	subi	r25, 0xFF	; 255
		if( byte_count != len ) {
    13ba:	c9 17       	cp	r28, r25
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <I2C_M_read+0x4e>
			TWI0 . MCTRLB = TWI_ACKACT_ACK_gc
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
* @param len The number of bytes to be read .
*/
static void I2C_M_read ( uint8_t addr , uint8_t* data , uint8_t len ) {
	I2C0_M_start ( addr , DIR_READ );
	uint8_t byte_count = 0;
	while ( byte_count < len ) {
    13c4:	9c 17       	cp	r25, r28
    13c6:	08 f3       	brcs	.-62     	; 0x138a <I2C_M_read+0x14>
			TWI0 . MCTRLB = TWI_ACKACT_ACK_gc
			| TWI_MCMD_RECVTRANS_gc ;
		}
	}
	/* Finish transaction with a NACK and stop condition */
	TWI0.MCTRLB = TWI_ACKACT_NACK_gc | TWI_MCMD_STOP_gc ;
    13c8:	87 e0       	ldi	r24, 0x07	; 7
    13ca:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <__TEXT_REGION_LENGTH__+0x7e0904>
}
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	08 95       	ret

000013d6 <I2C_M_write>:
/**
* @brief This function writes one byte to the device on the specified address .
* @param addr The address of the device on the bus.
* @param data The byte to be written .
*/
static void I2C_M_write ( uint8_t addr , uint8_t data ) {
    13d6:	cf 93       	push	r28
    13d8:	c6 2f       	mov	r28, r22
	I2C0_M_start ( addr , DIR_WRITE ); // Enable commenication with the target slave
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	0e 94 a3 09 	call	0x1346	; 0x1346 <I2C0_M_start>
    13e0:	2f e5       	ldi	r18, 0x5F	; 95
    13e2:	8a ee       	ldi	r24, 0xEA	; 234
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	21 50       	subi	r18, 0x01	; 1
    13e8:	80 40       	sbci	r24, 0x00	; 0
    13ea:	90 40       	sbci	r25, 0x00	; 0
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <I2C_M_write+0x10>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <I2C_M_write+0x1a>
    13f0:	00 00       	nop
	_delay_ms(75); // Wait for pakket to recive
	TWI0.MDATA = data ; // Sends data to slave
    13f2:	c0 93 08 09 	sts	0x0908, r28	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	TWI_WAIT();
    13f6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    13fa:	85 fd       	sbrc	r24, 5
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <I2C_M_write+0x42>
    13fe:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1402:	82 fd       	sbrc	r24, 2
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <I2C_M_write+0x42>
    1406:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    140a:	83 fd       	sbrc	r24, 3
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <I2C_M_write+0x42>
    140e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    1412:	83 70       	andi	r24, 0x03	; 3
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	79 f7       	brne	.-34     	; 0x13f6 <I2C_M_write+0x20>
	
	/* Check for NACK */
	if( TWI0.MSTATUS & TWI_RXACK_bm ) {
    1418:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    141c:	84 ff       	sbrs	r24, 4
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <I2C_M_write+0x52>
		// target is full
		printf (" target NACK \n");
    1420:	8f e2       	ldi	r24, 0x2F	; 47
    1422:	95 e4       	ldi	r25, 0x45	; 69
    1424:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	}
	/* Issue a stop condition */
	TWI0.MCTRLB |= TWI_MCMD_STOP_gc ;
    1428:	e0 e0       	ldi	r30, 0x00	; 0
    142a:	f9 e0       	ldi	r31, 0x09	; 9
    142c:	84 81       	ldd	r24, Z+4	; 0x04
    142e:	83 60       	ori	r24, 0x03	; 3
    1430:	84 83       	std	Z+4, r24	; 0x04
}
    1432:	cf 91       	pop	r28
    1434:	08 95       	ret

00001436 <twi_master_init_aht10>:
}
/**
* @brief this function does the nesesary initialization for enabling the aht10 sensor
**/
void twi_master_init_aht10(){
	PORTB.DIRSET |= PIN3_bm; // enables power pin for sensor
    1436:	e0 e2       	ldi	r30, 0x20	; 32
    1438:	f4 e0       	ldi	r31, 0x04	; 4
    143a:	81 81       	ldd	r24, Z+1	; 0x01
    143c:	88 60       	ori	r24, 0x08	; 8
    143e:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUT |= PIN3_bm;
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	88 60       	ori	r24, 0x08	; 8
    1444:	84 83       	std	Z+4, r24	; 0x04
	
	USART3_init () ; // Enables serial communication
    1446:	0e 94 c7 0a 	call	0x158e	; 0x158e <USART3_init>
	TWI0_M_init () ; // Enable twi connection
    144a:	0e 94 94 09 	call	0x1328	; 0x1328 <TWI0_M_init>
    144e:	8f e1       	ldi	r24, 0x1F	; 31
    1450:	9e e4       	ldi	r25, 0x4E	; 78
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <twi_master_init_aht10+0x1c>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <twi_master_init_aht10+0x22>
    1458:	00 00       	nop
	_delay_ms(20);
	printf ("---- Enabled connection with aht10-sensor ----\n");
    145a:	8d e3       	ldi	r24, 0x3D	; 61
    145c:	95 e4       	ldi	r25, 0x45	; 69
    145e:	0e 94 69 10 	call	0x20d2	; 0x20d2 <puts>
	I2C_M_write (0x38 ,0xE1); //Sending enable commando to aht10 sensor
    1462:	61 ee       	ldi	r22, 0xE1	; 225
    1464:	88 e3       	ldi	r24, 0x38	; 56
    1466:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <I2C_M_write>
    146a:	9f e5       	ldi	r25, 0x5F	; 95
    146c:	2a ee       	ldi	r18, 0xEA	; 234
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	91 50       	subi	r25, 0x01	; 1
    1472:	20 40       	sbci	r18, 0x00	; 0
    1474:	80 40       	sbci	r24, 0x00	; 0
    1476:	e1 f7       	brne	.-8      	; 0x1470 <twi_master_init_aht10+0x3a>
    1478:	00 c0       	rjmp	.+0      	; 0x147a <twi_master_init_aht10+0x44>
    147a:	00 00       	nop
	_delay_ms(75); // Waiting for signal to transmitt
	I2C_M_write (0x38 ,0xBA); // Soft starting and calibrating the sensor
    147c:	6a eb       	ldi	r22, 0xBA	; 186
    147e:	88 e3       	ldi	r24, 0x38	; 56
    1480:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <I2C_M_write>
    1484:	08 95       	ret

00001486 <read_aht10_data>:
}
/**
* @brief Reads the data from aht10 sensor and returns the messurmens values
* @param mesurments uses either a 1 or 0 to select humidity data or temperature data
**/
uint8_t read_aht10_data(uint8_t mesurments){
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	26 97       	sbiw	r28, 0x06	; 6
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	18 2f       	mov	r17, r24
	uint8_t data[6];
	I2C_M_write (0x38 ,0xAC); // Sends the measurement commando to aht10 sensor
    1498:	6c ea       	ldi	r22, 0xAC	; 172
    149a:	88 e3       	ldi	r24, 0x38	; 56
    149c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <I2C_M_write>
    14a0:	2f e5       	ldi	r18, 0x5F	; 95
    14a2:	8a ee       	ldi	r24, 0xEA	; 234
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	21 50       	subi	r18, 0x01	; 1
    14a8:	80 40       	sbci	r24, 0x00	; 0
    14aa:	90 40       	sbci	r25, 0x00	; 0
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <read_aht10_data+0x20>
    14ae:	00 c0       	rjmp	.+0      	; 0x14b0 <read_aht10_data+0x2a>
    14b0:	00 00       	nop
	_delay_ms (75); // Wait for the signal to transmit
	I2C_M_read (0x38, data , 6) ; // Reasive the data, placing it in the data value
    14b2:	46 e0       	ldi	r20, 0x06	; 6
    14b4:	be 01       	movw	r22, r28
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	88 e3       	ldi	r24, 0x38	; 56
    14bc:	0e 94 bb 09 	call	0x1376	; 0x1376 <I2C_M_read>

	if (mesurments == 1){ // If 1 return humidity measurements
    14c0:	11 30       	cpi	r17, 0x01	; 1
    14c2:	99 f5       	brne	.+102    	; 0x152a <read_aht10_data+0xa4>
		uint32_t h = data[1]; // Place all the humidity data to data.
    14c4:	6a 81       	ldd	r22, Y+2	; 0x02
    14c6:	86 2f       	mov	r24, r22
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
		h <<= 8;
    14ce:	ba 2f       	mov	r27, r26
    14d0:	a9 2f       	mov	r26, r25
    14d2:	98 2f       	mov	r25, r24
    14d4:	88 27       	eor	r24, r24
		h |= data[2];
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	82 2b       	or	r24, r18
		h <<= 4;
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	aa 1f       	adc	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	aa 1f       	adc	r26, r26
    14e8:	bb 1f       	adc	r27, r27
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	aa 1f       	adc	r26, r26
    14f0:	bb 1f       	adc	r27, r27
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	aa 1f       	adc	r26, r26
    14f8:	bb 1f       	adc	r27, r27
		h |= data[3] >> 4;
    14fa:	2c 81       	ldd	r18, Y+4	; 0x04
    14fc:	22 95       	swap	r18
    14fe:	2f 70       	andi	r18, 0x0F	; 15
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	62 2b       	or	r22, r18
		return ((float)h*100)/0x100000; // Returns formated humidety value in persentage humidity
    1506:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	48 ec       	ldi	r20, 0xC8	; 200
    1510:	52 e4       	ldi	r21, 0x42	; 66
    1512:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e8       	ldi	r20, 0x80	; 128
    151c:	55 e3       	ldi	r21, 0x35	; 53
    151e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    1522:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
    1526:	86 2f       	mov	r24, r22
    1528:	2b c0       	rjmp	.+86     	; 0x1580 <read_aht10_data+0xfa>
		}else{ // else returns temperature measurement
		uint32_t tdata = data[3] & 0x0F; // place all temperature data to data
    152a:	6c 81       	ldd	r22, Y+4	; 0x04
    152c:	6f 70       	andi	r22, 0x0F	; 15
    152e:	86 2f       	mov	r24, r22
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e0       	ldi	r27, 0x00	; 0
		tdata <<=8;
    1536:	ba 2f       	mov	r27, r26
    1538:	a9 2f       	mov	r26, r25
    153a:	98 2f       	mov	r25, r24
    153c:	88 27       	eor	r24, r24
		tdata |= data[4];
    153e:	2d 81       	ldd	r18, Y+5	; 0x05
    1540:	82 2b       	or	r24, r18
		tdata <<= 8;
    1542:	ba 2f       	mov	r27, r26
    1544:	a9 2f       	mov	r26, r25
    1546:	98 2f       	mov	r25, r24
    1548:	88 27       	eor	r24, r24
		tdata |= data[5];
    154a:	2e 81       	ldd	r18, Y+6	; 0x06
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	62 2b       	or	r22, r18
		return ((((float)tdata* 200 / 0x100000) ) - 50); // Retrurn formated temperature in celsius
    1552:	0e 94 33 0c 	call	0x1866	; 0x1866 <__floatunsisf>
    1556:	20 e0       	ldi	r18, 0x00	; 0
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	48 e4       	ldi	r20, 0x48	; 72
    155c:	53 e4       	ldi	r21, 0x43	; 67
    155e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	55 e3       	ldi	r21, 0x35	; 53
    156a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	48 e4       	ldi	r20, 0x48	; 72
    1574:	52 e4       	ldi	r21, 0x42	; 66
    1576:	0e 94 1e 0b 	call	0x163c	; 0x163c <__subsf3>
    157a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
    157e:	86 2f       	mov	r24, r22
	}
    1580:	26 96       	adiw	r28, 0x06	; 6
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	de bf       	out	0x3e, r29	; 62
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	08 95       	ret

0000158e <USART3_init>:
{
	for ( size_t i = 0; i < strlen ( str ); i ++)
	{
		USART3_sendChar ( str [i]);
	}
}
    158e:	e0 e2       	ldi	r30, 0x20	; 32
    1590:	f4 e0       	ldi	r31, 0x04	; 4
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	81 83       	std	Z+1, r24	; 0x01
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	82 83       	std	Z+2, r24	; 0x02
    159a:	e0 e6       	ldi	r30, 0x60	; 96
    159c:	f8 e0       	ldi	r31, 0x08	; 8
    159e:	83 e8       	ldi	r24, 0x83	; 131
    15a0:	96 e0       	ldi	r25, 0x06	; 6
    15a2:	80 87       	std	Z+8, r24	; 0x08
    15a4:	91 87       	std	Z+9, r25	; 0x09
    15a6:	86 81       	ldd	r24, Z+6	; 0x06
    15a8:	80 6c       	ori	r24, 0xC0	; 192
    15aa:	86 83       	std	Z+6, r24	; 0x06
    15ac:	83 e2       	ldi	r24, 0x23	; 35
    15ae:	90 e4       	ldi	r25, 0x40	; 64
    15b0:	80 93 ca 45 	sts	0x45CA, r24	; 0x8045ca <__iob+0x2>
    15b4:	90 93 cb 45 	sts	0x45CB, r25	; 0x8045cb <__iob+0x3>
    15b8:	08 95       	ret

000015ba <USART3_sendChar>:
    15ba:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    15be:	95 ff       	sbrs	r25, 5
    15c0:	fc cf       	rjmp	.-8      	; 0x15ba <USART3_sendChar>
    15c2:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
    15c6:	08 95       	ret

000015c8 <USART3_printChar>:
    15c8:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <USART3_sendChar>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	08 95       	ret

000015d2 <USART3_read>:
// Function to read received char
uint8_t USART3_read ()
{
    15d2:	cf 93       	push	r28
	while (!( USART3.STATUS & USART_RXCIF_bm ))
    15d4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
    15d8:	88 23       	and	r24, r24
    15da:	e4 f7       	brge	.-8      	; 0x15d4 <USART3_read+0x2>
	{
		
		;
	}
	uint8_t src = USART3.RXDATAL ;
    15dc:	c0 91 60 08 	lds	r28, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	USART3_sendChar ( src );
    15e0:	8c 2f       	mov	r24, r28
    15e2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <USART3_sendChar>
	return src ;
	
	}
    15e6:	8c 2f       	mov	r24, r28
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <compareCommands>:

uint8_t compareCommands(char* src, char* arrays[], uint8_t array_size) {//compares usart command to command array
    15ec:	ef 92       	push	r14
    15ee:	ff 92       	push	r15
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
    15f8:	7c 01       	movw	r14, r24
    15fa:	8b 01       	movw	r16, r22
    15fc:	d4 2f       	mov	r29, r20
	// Return index of command received or 255 if none
	for (uint8_t a = 0; a < array_size; a++) { //checks for lenght of array
    15fe:	c0 e0       	ldi	r28, 0x00	; 0
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <compareCommands+0x3c>
		
		if (!strncmp(src, arrays[a], array_size)) { //if command is not equal to current char in array
    1602:	ec 2f       	mov	r30, r28
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e0 0f       	add	r30, r16
    160c:	f1 1f       	adc	r31, r17
    160e:	4d 2f       	mov	r20, r29
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
    1616:	c7 01       	movw	r24, r14
    1618:	0e 94 39 10 	call	0x2072	; 0x2072 <strncmp>
    161c:	89 2b       	or	r24, r25
    161e:	19 f4       	brne	.+6      	; 0x1626 <compareCommands+0x3a>
			
			
			return a+1 ;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	8c 0f       	add	r24, r28
    1624:	04 c0       	rjmp	.+8      	; 0x162e <compareCommands+0x42>
	
	}

uint8_t compareCommands(char* src, char* arrays[], uint8_t array_size) {//compares usart command to command array
	// Return index of command received or 255 if none
	for (uint8_t a = 0; a < array_size; a++) { //checks for lenght of array
    1626:	cf 5f       	subi	r28, 0xFF	; 255
    1628:	cd 17       	cp	r28, r29
    162a:	58 f3       	brcs	.-42     	; 0x1602 <compareCommands+0x16>
			
			return a+1 ;
			
		}
	}
	return 255; //return command not in array
    162c:	8f ef       	ldi	r24, 0xFF	; 255
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	08 95       	ret

0000163c <__subsf3>:
    163c:	50 58       	subi	r21, 0x80	; 128

0000163e <__addsf3>:
    163e:	bb 27       	eor	r27, r27
    1640:	aa 27       	eor	r26, r26
    1642:	0e 94 36 0b 	call	0x166c	; 0x166c <__addsf3x>
    1646:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    164a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    164e:	38 f0       	brcs	.+14     	; 0x165e <__addsf3+0x20>
    1650:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1654:	20 f0       	brcs	.+8      	; 0x165e <__addsf3+0x20>
    1656:	39 f4       	brne	.+14     	; 0x1666 <__addsf3+0x28>
    1658:	9f 3f       	cpi	r25, 0xFF	; 255
    165a:	19 f4       	brne	.+6      	; 0x1662 <__addsf3+0x24>
    165c:	26 f4       	brtc	.+8      	; 0x1666 <__addsf3+0x28>
    165e:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    1662:	0e f4       	brtc	.+2      	; 0x1666 <__addsf3+0x28>
    1664:	e0 95       	com	r30
    1666:	e7 fb       	bst	r30, 7
    1668:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>

0000166c <__addsf3x>:
    166c:	e9 2f       	mov	r30, r25
    166e:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    1672:	58 f3       	brcs	.-42     	; 0x164a <__addsf3+0xc>
    1674:	ba 17       	cp	r27, r26
    1676:	62 07       	cpc	r22, r18
    1678:	73 07       	cpc	r23, r19
    167a:	84 07       	cpc	r24, r20
    167c:	95 07       	cpc	r25, r21
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__addsf3x+0x1c>
    1680:	79 f4       	brne	.+30     	; 0x16a0 <__addsf3x+0x34>
    1682:	a6 f5       	brtc	.+104    	; 0x16ec <__addsf3x+0x80>
    1684:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_zero>
    1688:	0e f4       	brtc	.+2      	; 0x168c <__addsf3x+0x20>
    168a:	e0 95       	com	r30
    168c:	0b 2e       	mov	r0, r27
    168e:	ba 2f       	mov	r27, r26
    1690:	a0 2d       	mov	r26, r0
    1692:	0b 01       	movw	r0, r22
    1694:	b9 01       	movw	r22, r18
    1696:	90 01       	movw	r18, r0
    1698:	0c 01       	movw	r0, r24
    169a:	ca 01       	movw	r24, r20
    169c:	a0 01       	movw	r20, r0
    169e:	11 24       	eor	r1, r1
    16a0:	ff 27       	eor	r31, r31
    16a2:	59 1b       	sub	r21, r25
    16a4:	99 f0       	breq	.+38     	; 0x16cc <__addsf3x+0x60>
    16a6:	59 3f       	cpi	r21, 0xF9	; 249
    16a8:	50 f4       	brcc	.+20     	; 0x16be <__addsf3x+0x52>
    16aa:	50 3e       	cpi	r21, 0xE0	; 224
    16ac:	68 f1       	brcs	.+90     	; 0x1708 <__addsf3x+0x9c>
    16ae:	1a 16       	cp	r1, r26
    16b0:	f0 40       	sbci	r31, 0x00	; 0
    16b2:	a2 2f       	mov	r26, r18
    16b4:	23 2f       	mov	r18, r19
    16b6:	34 2f       	mov	r19, r20
    16b8:	44 27       	eor	r20, r20
    16ba:	58 5f       	subi	r21, 0xF8	; 248
    16bc:	f3 cf       	rjmp	.-26     	; 0x16a4 <__addsf3x+0x38>
    16be:	46 95       	lsr	r20
    16c0:	37 95       	ror	r19
    16c2:	27 95       	ror	r18
    16c4:	a7 95       	ror	r26
    16c6:	f0 40       	sbci	r31, 0x00	; 0
    16c8:	53 95       	inc	r21
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__addsf3x+0x52>
    16cc:	7e f4       	brtc	.+30     	; 0x16ec <__addsf3x+0x80>
    16ce:	1f 16       	cp	r1, r31
    16d0:	ba 0b       	sbc	r27, r26
    16d2:	62 0b       	sbc	r22, r18
    16d4:	73 0b       	sbc	r23, r19
    16d6:	84 0b       	sbc	r24, r20
    16d8:	ba f0       	brmi	.+46     	; 0x1708 <__addsf3x+0x9c>
    16da:	91 50       	subi	r25, 0x01	; 1
    16dc:	a1 f0       	breq	.+40     	; 0x1706 <__addsf3x+0x9a>
    16de:	ff 0f       	add	r31, r31
    16e0:	bb 1f       	adc	r27, r27
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	c2 f7       	brpl	.-16     	; 0x16da <__addsf3x+0x6e>
    16ea:	0e c0       	rjmp	.+28     	; 0x1708 <__addsf3x+0x9c>
    16ec:	ba 0f       	add	r27, r26
    16ee:	62 1f       	adc	r22, r18
    16f0:	73 1f       	adc	r23, r19
    16f2:	84 1f       	adc	r24, r20
    16f4:	48 f4       	brcc	.+18     	; 0x1708 <__addsf3x+0x9c>
    16f6:	87 95       	ror	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	b7 95       	ror	r27
    16fe:	f7 95       	ror	r31
    1700:	9e 3f       	cpi	r25, 0xFE	; 254
    1702:	08 f0       	brcs	.+2      	; 0x1706 <__addsf3x+0x9a>
    1704:	b0 cf       	rjmp	.-160    	; 0x1666 <__addsf3+0x28>
    1706:	93 95       	inc	r25
    1708:	88 0f       	add	r24, r24
    170a:	08 f0       	brcs	.+2      	; 0x170e <__addsf3x+0xa2>
    170c:	99 27       	eor	r25, r25
    170e:	ee 0f       	add	r30, r30
    1710:	97 95       	ror	r25
    1712:	87 95       	ror	r24
    1714:	08 95       	ret

00001716 <__divsf3>:
    1716:	0e 94 9f 0b 	call	0x173e	; 0x173e <__divsf3x>
    171a:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    171e:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1722:	58 f0       	brcs	.+22     	; 0x173a <__divsf3+0x24>
    1724:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    1728:	40 f0       	brcs	.+16     	; 0x173a <__divsf3+0x24>
    172a:	29 f4       	brne	.+10     	; 0x1736 <__divsf3+0x20>
    172c:	5f 3f       	cpi	r21, 0xFF	; 255
    172e:	29 f0       	breq	.+10     	; 0x173a <__divsf3+0x24>
    1730:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1734:	51 11       	cpse	r21, r1
    1736:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    173a:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>

0000173e <__divsf3x>:
    173e:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    1742:	68 f3       	brcs	.-38     	; 0x171e <__divsf3+0x8>

00001744 <__divsf3_pse>:
    1744:	99 23       	and	r25, r25
    1746:	b1 f3       	breq	.-20     	; 0x1734 <__divsf3+0x1e>
    1748:	55 23       	and	r21, r21
    174a:	91 f3       	breq	.-28     	; 0x1730 <__divsf3+0x1a>
    174c:	95 1b       	sub	r25, r21
    174e:	55 0b       	sbc	r21, r21
    1750:	bb 27       	eor	r27, r27
    1752:	aa 27       	eor	r26, r26
    1754:	62 17       	cp	r22, r18
    1756:	73 07       	cpc	r23, r19
    1758:	84 07       	cpc	r24, r20
    175a:	38 f0       	brcs	.+14     	; 0x176a <__divsf3_pse+0x26>
    175c:	9f 5f       	subi	r25, 0xFF	; 255
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	44 1f       	adc	r20, r20
    1766:	aa 1f       	adc	r26, r26
    1768:	a9 f3       	breq	.-22     	; 0x1754 <__divsf3_pse+0x10>
    176a:	35 d0       	rcall	.+106    	; 0x17d6 <__divsf3_pse+0x92>
    176c:	0e 2e       	mov	r0, r30
    176e:	3a f0       	brmi	.+14     	; 0x177e <__divsf3_pse+0x3a>
    1770:	e0 e8       	ldi	r30, 0x80	; 128
    1772:	32 d0       	rcall	.+100    	; 0x17d8 <__divsf3_pse+0x94>
    1774:	91 50       	subi	r25, 0x01	; 1
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	e6 95       	lsr	r30
    177a:	00 1c       	adc	r0, r0
    177c:	ca f7       	brpl	.-14     	; 0x1770 <__divsf3_pse+0x2c>
    177e:	2b d0       	rcall	.+86     	; 0x17d6 <__divsf3_pse+0x92>
    1780:	fe 2f       	mov	r31, r30
    1782:	29 d0       	rcall	.+82     	; 0x17d6 <__divsf3_pse+0x92>
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	bb 1f       	adc	r27, r27
    178c:	26 17       	cp	r18, r22
    178e:	37 07       	cpc	r19, r23
    1790:	48 07       	cpc	r20, r24
    1792:	ab 07       	cpc	r26, r27
    1794:	b0 e8       	ldi	r27, 0x80	; 128
    1796:	09 f0       	breq	.+2      	; 0x179a <__divsf3_pse+0x56>
    1798:	bb 0b       	sbc	r27, r27
    179a:	80 2d       	mov	r24, r0
    179c:	bf 01       	movw	r22, r30
    179e:	ff 27       	eor	r31, r31
    17a0:	93 58       	subi	r25, 0x83	; 131
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	3a f0       	brmi	.+14     	; 0x17b4 <__divsf3_pse+0x70>
    17a6:	9e 3f       	cpi	r25, 0xFE	; 254
    17a8:	51 05       	cpc	r21, r1
    17aa:	78 f0       	brcs	.+30     	; 0x17ca <__divsf3_pse+0x86>
    17ac:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    17b0:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    17b4:	5f 3f       	cpi	r21, 0xFF	; 255
    17b6:	e4 f3       	brlt	.-8      	; 0x17b0 <__divsf3_pse+0x6c>
    17b8:	98 3e       	cpi	r25, 0xE8	; 232
    17ba:	d4 f3       	brlt	.-12     	; 0x17b0 <__divsf3_pse+0x6c>
    17bc:	86 95       	lsr	r24
    17be:	77 95       	ror	r23
    17c0:	67 95       	ror	r22
    17c2:	b7 95       	ror	r27
    17c4:	f7 95       	ror	r31
    17c6:	9f 5f       	subi	r25, 0xFF	; 255
    17c8:	c9 f7       	brne	.-14     	; 0x17bc <__divsf3_pse+0x78>
    17ca:	88 0f       	add	r24, r24
    17cc:	91 1d       	adc	r25, r1
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	97 f9       	bld	r25, 7
    17d4:	08 95       	ret
    17d6:	e1 e0       	ldi	r30, 0x01	; 1
    17d8:	66 0f       	add	r22, r22
    17da:	77 1f       	adc	r23, r23
    17dc:	88 1f       	adc	r24, r24
    17de:	bb 1f       	adc	r27, r27
    17e0:	62 17       	cp	r22, r18
    17e2:	73 07       	cpc	r23, r19
    17e4:	84 07       	cpc	r24, r20
    17e6:	ba 07       	cpc	r27, r26
    17e8:	20 f0       	brcs	.+8      	; 0x17f2 <__divsf3_pse+0xae>
    17ea:	62 1b       	sub	r22, r18
    17ec:	73 0b       	sbc	r23, r19
    17ee:	84 0b       	sbc	r24, r20
    17f0:	ba 0b       	sbc	r27, r26
    17f2:	ee 1f       	adc	r30, r30
    17f4:	88 f7       	brcc	.-30     	; 0x17d8 <__divsf3_pse+0x94>
    17f6:	e0 95       	com	r30
    17f8:	08 95       	ret

000017fa <__fixsfsi>:
    17fa:	0e 94 04 0c 	call	0x1808	; 0x1808 <__fixunssfsi>
    17fe:	68 94       	set
    1800:	b1 11       	cpse	r27, r1
    1802:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    1806:	08 95       	ret

00001808 <__fixunssfsi>:
    1808:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_splitA>
    180c:	88 f0       	brcs	.+34     	; 0x1830 <__fixunssfsi+0x28>
    180e:	9f 57       	subi	r25, 0x7F	; 127
    1810:	98 f0       	brcs	.+38     	; 0x1838 <__fixunssfsi+0x30>
    1812:	b9 2f       	mov	r27, r25
    1814:	99 27       	eor	r25, r25
    1816:	b7 51       	subi	r27, 0x17	; 23
    1818:	b0 f0       	brcs	.+44     	; 0x1846 <__fixunssfsi+0x3e>
    181a:	e1 f0       	breq	.+56     	; 0x1854 <__fixunssfsi+0x4c>
    181c:	66 0f       	add	r22, r22
    181e:	77 1f       	adc	r23, r23
    1820:	88 1f       	adc	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	1a f0       	brmi	.+6      	; 0x182c <__fixunssfsi+0x24>
    1826:	ba 95       	dec	r27
    1828:	c9 f7       	brne	.-14     	; 0x181c <__fixunssfsi+0x14>
    182a:	14 c0       	rjmp	.+40     	; 0x1854 <__fixunssfsi+0x4c>
    182c:	b1 30       	cpi	r27, 0x01	; 1
    182e:	91 f0       	breq	.+36     	; 0x1854 <__fixunssfsi+0x4c>
    1830:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_zero>
    1834:	b1 e0       	ldi	r27, 0x01	; 1
    1836:	08 95       	ret
    1838:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_zero>
    183c:	67 2f       	mov	r22, r23
    183e:	78 2f       	mov	r23, r24
    1840:	88 27       	eor	r24, r24
    1842:	b8 5f       	subi	r27, 0xF8	; 248
    1844:	39 f0       	breq	.+14     	; 0x1854 <__fixunssfsi+0x4c>
    1846:	b9 3f       	cpi	r27, 0xF9	; 249
    1848:	cc f3       	brlt	.-14     	; 0x183c <__fixunssfsi+0x34>
    184a:	86 95       	lsr	r24
    184c:	77 95       	ror	r23
    184e:	67 95       	ror	r22
    1850:	b3 95       	inc	r27
    1852:	d9 f7       	brne	.-10     	; 0x184a <__fixunssfsi+0x42>
    1854:	3e f4       	brtc	.+14     	; 0x1864 <__fixunssfsi+0x5c>
    1856:	90 95       	com	r25
    1858:	80 95       	com	r24
    185a:	70 95       	com	r23
    185c:	61 95       	neg	r22
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	8f 4f       	sbci	r24, 0xFF	; 255
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	08 95       	ret

00001866 <__floatunsisf>:
    1866:	e8 94       	clt
    1868:	09 c0       	rjmp	.+18     	; 0x187c <__floatsisf+0x12>

0000186a <__floatsisf>:
    186a:	97 fb       	bst	r25, 7
    186c:	3e f4       	brtc	.+14     	; 0x187c <__floatsisf+0x12>
    186e:	90 95       	com	r25
    1870:	80 95       	com	r24
    1872:	70 95       	com	r23
    1874:	61 95       	neg	r22
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	8f 4f       	sbci	r24, 0xFF	; 255
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	99 23       	and	r25, r25
    187e:	a9 f0       	breq	.+42     	; 0x18aa <__floatsisf+0x40>
    1880:	f9 2f       	mov	r31, r25
    1882:	96 e9       	ldi	r25, 0x96	; 150
    1884:	bb 27       	eor	r27, r27
    1886:	93 95       	inc	r25
    1888:	f6 95       	lsr	r31
    188a:	87 95       	ror	r24
    188c:	77 95       	ror	r23
    188e:	67 95       	ror	r22
    1890:	b7 95       	ror	r27
    1892:	f1 11       	cpse	r31, r1
    1894:	f8 cf       	rjmp	.-16     	; 0x1886 <__floatsisf+0x1c>
    1896:	fa f4       	brpl	.+62     	; 0x18d6 <__floatsisf+0x6c>
    1898:	bb 0f       	add	r27, r27
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__floatsisf+0x36>
    189c:	60 ff       	sbrs	r22, 0
    189e:	1b c0       	rjmp	.+54     	; 0x18d6 <__floatsisf+0x6c>
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <__floatsisf+0x6c>
    18aa:	88 23       	and	r24, r24
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <__floatsisf+0x48>
    18ae:	96 e9       	ldi	r25, 0x96	; 150
    18b0:	11 c0       	rjmp	.+34     	; 0x18d4 <__floatsisf+0x6a>
    18b2:	77 23       	and	r23, r23
    18b4:	21 f0       	breq	.+8      	; 0x18be <__floatsisf+0x54>
    18b6:	9e e8       	ldi	r25, 0x8E	; 142
    18b8:	87 2f       	mov	r24, r23
    18ba:	76 2f       	mov	r23, r22
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <__floatsisf+0x5e>
    18be:	66 23       	and	r22, r22
    18c0:	71 f0       	breq	.+28     	; 0x18de <__floatsisf+0x74>
    18c2:	96 e8       	ldi	r25, 0x86	; 134
    18c4:	86 2f       	mov	r24, r22
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	60 e0       	ldi	r22, 0x00	; 0
    18ca:	2a f0       	brmi	.+10     	; 0x18d6 <__floatsisf+0x6c>
    18cc:	9a 95       	dec	r25
    18ce:	66 0f       	add	r22, r22
    18d0:	77 1f       	adc	r23, r23
    18d2:	88 1f       	adc	r24, r24
    18d4:	da f7       	brpl	.-10     	; 0x18cc <__floatsisf+0x62>
    18d6:	88 0f       	add	r24, r24
    18d8:	96 95       	lsr	r25
    18da:	87 95       	ror	r24
    18dc:	97 f9       	bld	r25, 7
    18de:	08 95       	ret

000018e0 <__fp_inf>:
    18e0:	97 f9       	bld	r25, 7
    18e2:	9f 67       	ori	r25, 0x7F	; 127
    18e4:	80 e8       	ldi	r24, 0x80	; 128
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	08 95       	ret

000018ec <__fp_nan>:
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	80 ec       	ldi	r24, 0xC0	; 192
    18f0:	08 95       	ret

000018f2 <__fp_pscA>:
    18f2:	00 24       	eor	r0, r0
    18f4:	0a 94       	dec	r0
    18f6:	16 16       	cp	r1, r22
    18f8:	17 06       	cpc	r1, r23
    18fa:	18 06       	cpc	r1, r24
    18fc:	09 06       	cpc	r0, r25
    18fe:	08 95       	ret

00001900 <__fp_pscB>:
    1900:	00 24       	eor	r0, r0
    1902:	0a 94       	dec	r0
    1904:	12 16       	cp	r1, r18
    1906:	13 06       	cpc	r1, r19
    1908:	14 06       	cpc	r1, r20
    190a:	05 06       	cpc	r0, r21
    190c:	08 95       	ret

0000190e <__fp_round>:
    190e:	09 2e       	mov	r0, r25
    1910:	03 94       	inc	r0
    1912:	00 0c       	add	r0, r0
    1914:	11 f4       	brne	.+4      	; 0x191a <__fp_round+0xc>
    1916:	88 23       	and	r24, r24
    1918:	52 f0       	brmi	.+20     	; 0x192e <__fp_round+0x20>
    191a:	bb 0f       	add	r27, r27
    191c:	40 f4       	brcc	.+16     	; 0x192e <__fp_round+0x20>
    191e:	bf 2b       	or	r27, r31
    1920:	11 f4       	brne	.+4      	; 0x1926 <__fp_round+0x18>
    1922:	60 ff       	sbrs	r22, 0
    1924:	04 c0       	rjmp	.+8      	; 0x192e <__fp_round+0x20>
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	08 95       	ret

00001930 <__fp_split3>:
    1930:	57 fd       	sbrc	r21, 7
    1932:	90 58       	subi	r25, 0x80	; 128
    1934:	44 0f       	add	r20, r20
    1936:	55 1f       	adc	r21, r21
    1938:	59 f0       	breq	.+22     	; 0x1950 <__fp_splitA+0x10>
    193a:	5f 3f       	cpi	r21, 0xFF	; 255
    193c:	71 f0       	breq	.+28     	; 0x195a <__fp_splitA+0x1a>
    193e:	47 95       	ror	r20

00001940 <__fp_splitA>:
    1940:	88 0f       	add	r24, r24
    1942:	97 fb       	bst	r25, 7
    1944:	99 1f       	adc	r25, r25
    1946:	61 f0       	breq	.+24     	; 0x1960 <__fp_splitA+0x20>
    1948:	9f 3f       	cpi	r25, 0xFF	; 255
    194a:	79 f0       	breq	.+30     	; 0x196a <__fp_splitA+0x2a>
    194c:	87 95       	ror	r24
    194e:	08 95       	ret
    1950:	12 16       	cp	r1, r18
    1952:	13 06       	cpc	r1, r19
    1954:	14 06       	cpc	r1, r20
    1956:	55 1f       	adc	r21, r21
    1958:	f2 cf       	rjmp	.-28     	; 0x193e <__fp_split3+0xe>
    195a:	46 95       	lsr	r20
    195c:	f1 df       	rcall	.-30     	; 0x1940 <__fp_splitA>
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <__fp_splitA+0x30>
    1960:	16 16       	cp	r1, r22
    1962:	17 06       	cpc	r1, r23
    1964:	18 06       	cpc	r1, r24
    1966:	99 1f       	adc	r25, r25
    1968:	f1 cf       	rjmp	.-30     	; 0x194c <__fp_splitA+0xc>
    196a:	86 95       	lsr	r24
    196c:	71 05       	cpc	r23, r1
    196e:	61 05       	cpc	r22, r1
    1970:	08 94       	sec
    1972:	08 95       	ret

00001974 <__fp_zero>:
    1974:	e8 94       	clt

00001976 <__fp_szero>:
    1976:	bb 27       	eor	r27, r27
    1978:	66 27       	eor	r22, r22
    197a:	77 27       	eor	r23, r23
    197c:	cb 01       	movw	r24, r22
    197e:	97 f9       	bld	r25, 7
    1980:	08 95       	ret

00001982 <__mulsf3>:
    1982:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3x>
    1986:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>
    198a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fp_pscA>
    198e:	38 f0       	brcs	.+14     	; 0x199e <__mulsf3+0x1c>
    1990:	0e 94 80 0c 	call	0x1900	; 0x1900 <__fp_pscB>
    1994:	20 f0       	brcs	.+8      	; 0x199e <__mulsf3+0x1c>
    1996:	95 23       	and	r25, r21
    1998:	11 f0       	breq	.+4      	; 0x199e <__mulsf3+0x1c>
    199a:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    199e:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    19a2:	11 24       	eor	r1, r1
    19a4:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>

000019a8 <__mulsf3x>:
    19a8:	0e 94 98 0c 	call	0x1930	; 0x1930 <__fp_split3>
    19ac:	70 f3       	brcs	.-36     	; 0x198a <__mulsf3+0x8>

000019ae <__mulsf3_pse>:
    19ae:	95 9f       	mul	r25, r21
    19b0:	c1 f3       	breq	.-16     	; 0x19a2 <__mulsf3+0x20>
    19b2:	95 0f       	add	r25, r21
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	55 1f       	adc	r21, r21
    19b8:	62 9f       	mul	r22, r18
    19ba:	f0 01       	movw	r30, r0
    19bc:	72 9f       	mul	r23, r18
    19be:	bb 27       	eor	r27, r27
    19c0:	f0 0d       	add	r31, r0
    19c2:	b1 1d       	adc	r27, r1
    19c4:	63 9f       	mul	r22, r19
    19c6:	aa 27       	eor	r26, r26
    19c8:	f0 0d       	add	r31, r0
    19ca:	b1 1d       	adc	r27, r1
    19cc:	aa 1f       	adc	r26, r26
    19ce:	64 9f       	mul	r22, r20
    19d0:	66 27       	eor	r22, r22
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	66 1f       	adc	r22, r22
    19d8:	82 9f       	mul	r24, r18
    19da:	22 27       	eor	r18, r18
    19dc:	b0 0d       	add	r27, r0
    19de:	a1 1d       	adc	r26, r1
    19e0:	62 1f       	adc	r22, r18
    19e2:	73 9f       	mul	r23, r19
    19e4:	b0 0d       	add	r27, r0
    19e6:	a1 1d       	adc	r26, r1
    19e8:	62 1f       	adc	r22, r18
    19ea:	83 9f       	mul	r24, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	22 1f       	adc	r18, r18
    19f2:	74 9f       	mul	r23, r20
    19f4:	33 27       	eor	r19, r19
    19f6:	a0 0d       	add	r26, r0
    19f8:	61 1d       	adc	r22, r1
    19fa:	23 1f       	adc	r18, r19
    19fc:	84 9f       	mul	r24, r20
    19fe:	60 0d       	add	r22, r0
    1a00:	21 1d       	adc	r18, r1
    1a02:	82 2f       	mov	r24, r18
    1a04:	76 2f       	mov	r23, r22
    1a06:	6a 2f       	mov	r22, r26
    1a08:	11 24       	eor	r1, r1
    1a0a:	9f 57       	subi	r25, 0x7F	; 127
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	9a f0       	brmi	.+38     	; 0x1a36 <__mulsf3_pse+0x88>
    1a10:	f1 f0       	breq	.+60     	; 0x1a4e <__mulsf3_pse+0xa0>
    1a12:	88 23       	and	r24, r24
    1a14:	4a f0       	brmi	.+18     	; 0x1a28 <__mulsf3_pse+0x7a>
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	66 1f       	adc	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	50 40       	sbci	r21, 0x00	; 0
    1a26:	a9 f7       	brne	.-22     	; 0x1a12 <__mulsf3_pse+0x64>
    1a28:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	80 f0       	brcs	.+32     	; 0x1a4e <__mulsf3_pse+0xa0>
    1a2e:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1a32:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    1a36:	5f 3f       	cpi	r21, 0xFF	; 255
    1a38:	e4 f3       	brlt	.-8      	; 0x1a32 <__mulsf3_pse+0x84>
    1a3a:	98 3e       	cpi	r25, 0xE8	; 232
    1a3c:	d4 f3       	brlt	.-12     	; 0x1a32 <__mulsf3_pse+0x84>
    1a3e:	86 95       	lsr	r24
    1a40:	77 95       	ror	r23
    1a42:	67 95       	ror	r22
    1a44:	b7 95       	ror	r27
    1a46:	f7 95       	ror	r31
    1a48:	e7 95       	ror	r30
    1a4a:	9f 5f       	subi	r25, 0xFF	; 255
    1a4c:	c1 f7       	brne	.-16     	; 0x1a3e <__mulsf3_pse+0x90>
    1a4e:	fe 2b       	or	r31, r30
    1a50:	88 0f       	add	r24, r24
    1a52:	91 1d       	adc	r25, r1
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	97 f9       	bld	r25, 7
    1a5a:	08 95       	ret

00001a5c <pow>:
    1a5c:	fa 01       	movw	r30, r20
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	30 96       	adiw	r30, 0x00	; 0
    1a64:	21 05       	cpc	r18, r1
    1a66:	31 05       	cpc	r19, r1
    1a68:	a1 f1       	breq	.+104    	; 0x1ad2 <pow+0x76>
    1a6a:	61 15       	cp	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	61 f4       	brne	.+24     	; 0x1a88 <pow+0x2c>
    1a70:	80 38       	cpi	r24, 0x80	; 128
    1a72:	bf e3       	ldi	r27, 0x3F	; 63
    1a74:	9b 07       	cpc	r25, r27
    1a76:	49 f1       	breq	.+82     	; 0x1aca <pow+0x6e>
    1a78:	68 94       	set
    1a7a:	90 38       	cpi	r25, 0x80	; 128
    1a7c:	81 05       	cpc	r24, r1
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <pow+0x3c>
    1a80:	80 38       	cpi	r24, 0x80	; 128
    1a82:	bf ef       	ldi	r27, 0xFF	; 255
    1a84:	9b 07       	cpc	r25, r27
    1a86:	41 f0       	breq	.+16     	; 0x1a98 <pow+0x3c>
    1a88:	99 23       	and	r25, r25
    1a8a:	4a f5       	brpl	.+82     	; 0x1ade <pow+0x82>
    1a8c:	ff 3f       	cpi	r31, 0xFF	; 255
    1a8e:	e1 05       	cpc	r30, r1
    1a90:	31 05       	cpc	r19, r1
    1a92:	21 05       	cpc	r18, r1
    1a94:	19 f1       	breq	.+70     	; 0x1adc <pow+0x80>
    1a96:	e8 94       	clt
    1a98:	08 94       	sec
    1a9a:	e7 95       	ror	r30
    1a9c:	d9 01       	movw	r26, r18
    1a9e:	aa 23       	and	r26, r26
    1aa0:	29 f4       	brne	.+10     	; 0x1aac <pow+0x50>
    1aa2:	ab 2f       	mov	r26, r27
    1aa4:	be 2f       	mov	r27, r30
    1aa6:	f8 5f       	subi	r31, 0xF8	; 248
    1aa8:	d0 f3       	brcs	.-12     	; 0x1a9e <pow+0x42>
    1aaa:	10 c0       	rjmp	.+32     	; 0x1acc <pow+0x70>
    1aac:	ff 5f       	subi	r31, 0xFF	; 255
    1aae:	70 f4       	brcc	.+28     	; 0x1acc <pow+0x70>
    1ab0:	a6 95       	lsr	r26
    1ab2:	e0 f7       	brcc	.-8      	; 0x1aac <pow+0x50>
    1ab4:	f7 39       	cpi	r31, 0x97	; 151
    1ab6:	50 f0       	brcs	.+20     	; 0x1acc <pow+0x70>
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <pow+0x64>
    1aba:	ff 3a       	cpi	r31, 0xAF	; 175
    1abc:	38 f4       	brcc	.+14     	; 0x1acc <pow+0x70>
    1abe:	9f 77       	andi	r25, 0x7F	; 127
    1ac0:	9f 93       	push	r25
    1ac2:	0d d0       	rcall	.+26     	; 0x1ade <pow+0x82>
    1ac4:	0f 90       	pop	r0
    1ac6:	07 fc       	sbrc	r0, 7
    1ac8:	90 58       	subi	r25, 0x80	; 128
    1aca:	08 95       	ret
    1acc:	46 f0       	brts	.+16     	; 0x1ade <pow+0x82>
    1ace:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	80 e8       	ldi	r24, 0x80	; 128
    1ad8:	9f e3       	ldi	r25, 0x3F	; 63
    1ada:	08 95       	ret
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	9f 77       	andi	r25, 0x7F	; 127
    1ae0:	5f 93       	push	r21
    1ae2:	4f 93       	push	r20
    1ae4:	3f 93       	push	r19
    1ae6:	2f 93       	push	r18
    1ae8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <log>
    1aec:	2f 91       	pop	r18
    1aee:	3f 91       	pop	r19
    1af0:	4f 91       	pop	r20
    1af2:	5f 91       	pop	r21
    1af4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__mulsf3>
    1af8:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <exp>
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <pow+0xac>
    1afe:	16 f0       	brts	.+4      	; 0x1b04 <pow+0xa8>
    1b00:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1b04:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__fp_zero>
    1b08:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>

00001b0c <exp>:
    1b0c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_splitA>
    1b10:	a8 f3       	brcs	.-22     	; 0x1afc <pow+0xa0>
    1b12:	96 38       	cpi	r25, 0x86	; 134
    1b14:	a0 f7       	brcc	.-24     	; 0x1afe <pow+0xa2>
    1b16:	07 f8       	bld	r0, 7
    1b18:	0f 92       	push	r0
    1b1a:	e8 94       	clt
    1b1c:	2b e3       	ldi	r18, 0x3B	; 59
    1b1e:	3a ea       	ldi	r19, 0xAA	; 170
    1b20:	48 eb       	ldi	r20, 0xB8	; 184
    1b22:	5f e7       	ldi	r21, 0x7F	; 127
    1b24:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__mulsf3_pse>
    1b28:	0f 92       	push	r0
    1b2a:	0f 92       	push	r0
    1b2c:	0f 92       	push	r0
    1b2e:	4d b7       	in	r20, 0x3d	; 61
    1b30:	5e b7       	in	r21, 0x3e	; 62
    1b32:	0f 92       	push	r0
    1b34:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <modf>
    1b38:	e8 e1       	ldi	r30, 0x18	; 24
    1b3a:	f1 e0       	ldi	r31, 0x01	; 1
    1b3c:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_powser>
    1b40:	4f 91       	pop	r20
    1b42:	5f 91       	pop	r21
    1b44:	ef 91       	pop	r30
    1b46:	ff 91       	pop	r31
    1b48:	e5 95       	asr	r30
    1b4a:	ee 1f       	adc	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	49 f0       	breq	.+18     	; 0x1b62 <exp+0x56>
    1b50:	fe 57       	subi	r31, 0x7E	; 126
    1b52:	e0 68       	ori	r30, 0x80	; 128
    1b54:	44 27       	eor	r20, r20
    1b56:	ee 0f       	add	r30, r30
    1b58:	44 1f       	adc	r20, r20
    1b5a:	fa 95       	dec	r31
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <exp+0x4a>
    1b5e:	41 95       	neg	r20
    1b60:	55 0b       	sbc	r21, r21
    1b62:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <ldexp>
    1b66:	0f 90       	pop	r0
    1b68:	07 fe       	sbrs	r0, 7
    1b6a:	0c 94 df 0d 	jmp	0x1bbe	; 0x1bbe <inverse>
    1b6e:	08 95       	ret

00001b70 <__fp_powser>:
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	1f 93       	push	r17
    1b76:	0f 93       	push	r16
    1b78:	ff 92       	push	r15
    1b7a:	ef 92       	push	r14
    1b7c:	df 92       	push	r13
    1b7e:	7b 01       	movw	r14, r22
    1b80:	8c 01       	movw	r16, r24
    1b82:	68 94       	set
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <__fp_powser+0x22>
    1b86:	da 2e       	mov	r13, r26
    1b88:	ef 01       	movw	r28, r30
    1b8a:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3x>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e8 94       	clt
    1b92:	a5 91       	lpm	r26, Z+
    1b94:	25 91       	lpm	r18, Z+
    1b96:	35 91       	lpm	r19, Z+
    1b98:	45 91       	lpm	r20, Z+
    1b9a:	55 91       	lpm	r21, Z+
    1b9c:	a6 f3       	brts	.-24     	; 0x1b86 <__fp_powser+0x16>
    1b9e:	ef 01       	movw	r28, r30
    1ba0:	0e 94 36 0b 	call	0x166c	; 0x166c <__addsf3x>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	97 01       	movw	r18, r14
    1ba8:	a8 01       	movw	r20, r16
    1baa:	da 94       	dec	r13
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <__fp_powser+0x18>
    1bae:	df 90       	pop	r13
    1bb0:	ef 90       	pop	r14
    1bb2:	ff 90       	pop	r15
    1bb4:	0f 91       	pop	r16
    1bb6:	1f 91       	pop	r17
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <inverse>:
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	80 e8       	ldi	r24, 0x80	; 128
    1bc8:	9f e3       	ldi	r25, 0x3F	; 63
    1bca:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__divsf3>
    1bce:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>
    1bd2:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__fp_mpack>

00001bd6 <ldexp>:
    1bd6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_splitA>
    1bda:	d8 f3       	brcs	.-10     	; 0x1bd2 <inverse+0x14>
    1bdc:	99 23       	and	r25, r25
    1bde:	c9 f3       	breq	.-14     	; 0x1bd2 <inverse+0x14>
    1be0:	94 0f       	add	r25, r20
    1be2:	51 1d       	adc	r21, r1
    1be4:	a3 f3       	brvs	.-24     	; 0x1bce <inverse+0x10>
    1be6:	91 50       	subi	r25, 0x01	; 1
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	94 f0       	brlt	.+36     	; 0x1c10 <ldexp+0x3a>
    1bec:	59 f0       	breq	.+22     	; 0x1c04 <ldexp+0x2e>
    1bee:	88 23       	and	r24, r24
    1bf0:	32 f0       	brmi	.+12     	; 0x1bfe <ldexp+0x28>
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	91 50       	subi	r25, 0x01	; 1
    1bfa:	50 40       	sbci	r21, 0x00	; 0
    1bfc:	c1 f7       	brne	.-16     	; 0x1bee <ldexp+0x18>
    1bfe:	9e 3f       	cpi	r25, 0xFE	; 254
    1c00:	51 05       	cpc	r21, r1
    1c02:	2c f7       	brge	.-54     	; 0x1bce <inverse+0x10>
    1c04:	88 0f       	add	r24, r24
    1c06:	91 1d       	adc	r25, r1
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	97 f9       	bld	r25, 7
    1c0e:	08 95       	ret
    1c10:	5f 3f       	cpi	r21, 0xFF	; 255
    1c12:	ac f0       	brlt	.+42     	; 0x1c3e <ldexp+0x68>
    1c14:	98 3e       	cpi	r25, 0xE8	; 232
    1c16:	9c f0       	brlt	.+38     	; 0x1c3e <ldexp+0x68>
    1c18:	bb 27       	eor	r27, r27
    1c1a:	86 95       	lsr	r24
    1c1c:	77 95       	ror	r23
    1c1e:	67 95       	ror	r22
    1c20:	b7 95       	ror	r27
    1c22:	08 f4       	brcc	.+2      	; 0x1c26 <ldexp+0x50>
    1c24:	b1 60       	ori	r27, 0x01	; 1
    1c26:	93 95       	inc	r25
    1c28:	c1 f7       	brne	.-16     	; 0x1c1a <ldexp+0x44>
    1c2a:	bb 0f       	add	r27, r27
    1c2c:	58 f7       	brcc	.-42     	; 0x1c04 <ldexp+0x2e>
    1c2e:	11 f4       	brne	.+4      	; 0x1c34 <ldexp+0x5e>
    1c30:	60 ff       	sbrs	r22, 0
    1c32:	e8 cf       	rjmp	.-48     	; 0x1c04 <ldexp+0x2e>
    1c34:	6f 5f       	subi	r22, 0xFF	; 255
    1c36:	7f 4f       	sbci	r23, 0xFF	; 255
    1c38:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	e3 cf       	rjmp	.-58     	; 0x1c04 <ldexp+0x2e>
    1c3e:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <__fp_szero>
    1c42:	16 f0       	brts	.+4      	; 0x1c48 <ldexp+0x72>
    1c44:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__fp_mpack>
    1c48:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__fp_nan>
    1c4c:	68 94       	set
    1c4e:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__fp_inf>

00001c52 <log>:
    1c52:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__fp_splitA>
    1c56:	a8 f3       	brcs	.-22     	; 0x1c42 <ldexp+0x6c>
    1c58:	99 23       	and	r25, r25
    1c5a:	c1 f3       	breq	.-16     	; 0x1c4c <ldexp+0x76>
    1c5c:	ae f3       	brts	.-22     	; 0x1c48 <ldexp+0x72>
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	1f 93       	push	r17
    1c64:	0f 93       	push	r16
    1c66:	ff 92       	push	r15
    1c68:	c9 2f       	mov	r28, r25
    1c6a:	dd 27       	eor	r29, r29
    1c6c:	88 23       	and	r24, r24
    1c6e:	2a f0       	brmi	.+10     	; 0x1c7a <log+0x28>
    1c70:	21 97       	sbiw	r28, 0x01	; 1
    1c72:	66 0f       	add	r22, r22
    1c74:	77 1f       	adc	r23, r23
    1c76:	88 1f       	adc	r24, r24
    1c78:	da f7       	brpl	.-10     	; 0x1c70 <log+0x1e>
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f eb       	ldi	r21, 0xBF	; 191
    1c82:	9f e3       	ldi	r25, 0x3F	; 63
    1c84:	88 39       	cpi	r24, 0x98	; 152
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <log+0x3e>
    1c88:	80 3e       	cpi	r24, 0xE0	; 224
    1c8a:	38 f0       	brcs	.+14     	; 0x1c9a <log+0x48>
    1c8c:	21 96       	adiw	r28, 0x01	; 1
    1c8e:	8f 77       	andi	r24, 0x7F	; 127
    1c90:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
    1c94:	e0 e4       	ldi	r30, 0x40	; 64
    1c96:	f1 e0       	ldi	r31, 0x01	; 1
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <log+0x50>
    1c9a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__addsf3>
    1c9e:	ed e6       	ldi	r30, 0x6D	; 109
    1ca0:	f1 e0       	ldi	r31, 0x01	; 1
    1ca2:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__fp_powser>
    1ca6:	8b 01       	movw	r16, r22
    1ca8:	be 01       	movw	r22, r28
    1caa:	ec 01       	movw	r28, r24
    1cac:	fb 2e       	mov	r15, r27
    1cae:	6f 57       	subi	r22, 0x7F	; 127
    1cb0:	71 09       	sbc	r23, r1
    1cb2:	75 95       	asr	r23
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 0b       	sbc	r24, r24
    1cb8:	99 0b       	sbc	r25, r25
    1cba:	0e 94 35 0c 	call	0x186a	; 0x186a <__floatsisf>
    1cbe:	28 e1       	ldi	r18, 0x18	; 24
    1cc0:	32 e7       	ldi	r19, 0x72	; 114
    1cc2:	41 e3       	ldi	r20, 0x31	; 49
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__mulsf3x>
    1cca:	af 2d       	mov	r26, r15
    1ccc:	98 01       	movw	r18, r16
    1cce:	ae 01       	movw	r20, r28
    1cd0:	ff 90       	pop	r15
    1cd2:	0f 91       	pop	r16
    1cd4:	1f 91       	pop	r17
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	0e 94 36 0b 	call	0x166c	; 0x166c <__addsf3x>
    1cde:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__fp_round>

00001ce2 <modf>:
    1ce2:	fa 01       	movw	r30, r20
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	aa 0f       	add	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	bf 57       	subi	r27, 0x7F	; 127
    1cf0:	28 f4       	brcc	.+10     	; 0x1cfc <modf+0x1a>
    1cf2:	22 27       	eor	r18, r18
    1cf4:	33 27       	eor	r19, r19
    1cf6:	44 27       	eor	r20, r20
    1cf8:	50 78       	andi	r21, 0x80	; 128
    1cfa:	20 c0       	rjmp	.+64     	; 0x1d3c <modf+0x5a>
    1cfc:	b7 51       	subi	r27, 0x17	; 23
    1cfe:	90 f4       	brcc	.+36     	; 0x1d24 <modf+0x42>
    1d00:	ab 2f       	mov	r26, r27
    1d02:	00 24       	eor	r0, r0
    1d04:	46 95       	lsr	r20
    1d06:	37 95       	ror	r19
    1d08:	27 95       	ror	r18
    1d0a:	01 1c       	adc	r0, r1
    1d0c:	a3 95       	inc	r26
    1d0e:	d2 f3       	brmi	.-12     	; 0x1d04 <modf+0x22>
    1d10:	00 20       	and	r0, r0
    1d12:	71 f0       	breq	.+28     	; 0x1d30 <modf+0x4e>
    1d14:	22 0f       	add	r18, r18
    1d16:	33 1f       	adc	r19, r19
    1d18:	44 1f       	adc	r20, r20
    1d1a:	b3 95       	inc	r27
    1d1c:	da f3       	brmi	.-10     	; 0x1d14 <modf+0x32>
    1d1e:	0e d0       	rcall	.+28     	; 0x1d3c <modf+0x5a>
    1d20:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__subsf3>
    1d24:	61 30       	cpi	r22, 0x01	; 1
    1d26:	71 05       	cpc	r23, r1
    1d28:	a0 e8       	ldi	r26, 0x80	; 128
    1d2a:	8a 07       	cpc	r24, r26
    1d2c:	b9 46       	sbci	r27, 0x69	; 105
    1d2e:	30 f4       	brcc	.+12     	; 0x1d3c <modf+0x5a>
    1d30:	9b 01       	movw	r18, r22
    1d32:	ac 01       	movw	r20, r24
    1d34:	66 27       	eor	r22, r22
    1d36:	77 27       	eor	r23, r23
    1d38:	88 27       	eor	r24, r24
    1d3a:	90 78       	andi	r25, 0x80	; 128
    1d3c:	30 96       	adiw	r30, 0x00	; 0
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <modf+0x66>
    1d40:	20 83       	st	Z, r18
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	42 83       	std	Z+2, r20	; 0x02
    1d46:	53 83       	std	Z+3, r21	; 0x03
    1d48:	08 95       	ret

00001d4a <__fp_mpack>:
    1d4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1d4c:	31 f0       	breq	.+12     	; 0x1d5a <__fp_mpack_finite+0xc>

00001d4e <__fp_mpack_finite>:
    1d4e:	91 50       	subi	r25, 0x01	; 1
    1d50:	20 f4       	brcc	.+8      	; 0x1d5a <__fp_mpack_finite+0xc>
    1d52:	87 95       	ror	r24
    1d54:	77 95       	ror	r23
    1d56:	67 95       	ror	r22
    1d58:	b7 95       	ror	r27
    1d5a:	88 0f       	add	r24, r24
    1d5c:	91 1d       	adc	r25, r1
    1d5e:	96 95       	lsr	r25
    1d60:	87 95       	ror	r24
    1d62:	97 f9       	bld	r25, 7
    1d64:	08 95       	ret

00001d66 <__divmodhi4>:
    1d66:	97 fb       	bst	r25, 7
    1d68:	07 2e       	mov	r0, r23
    1d6a:	16 f4       	brtc	.+4      	; 0x1d70 <__divmodhi4+0xa>
    1d6c:	00 94       	com	r0
    1d6e:	07 d0       	rcall	.+14     	; 0x1d7e <__divmodhi4_neg1>
    1d70:	77 fd       	sbrc	r23, 7
    1d72:	09 d0       	rcall	.+18     	; 0x1d86 <__divmodhi4_neg2>
    1d74:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__udivmodhi4>
    1d78:	07 fc       	sbrc	r0, 7
    1d7a:	05 d0       	rcall	.+10     	; 0x1d86 <__divmodhi4_neg2>
    1d7c:	3e f4       	brtc	.+14     	; 0x1d8c <__divmodhi4_exit>

00001d7e <__divmodhi4_neg1>:
    1d7e:	90 95       	com	r25
    1d80:	81 95       	neg	r24
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	08 95       	ret

00001d86 <__divmodhi4_neg2>:
    1d86:	70 95       	com	r23
    1d88:	61 95       	neg	r22
    1d8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001d8c <__divmodhi4_exit>:
    1d8c:	08 95       	ret

00001d8e <__tablejump2__>:
    1d8e:	ee 0f       	add	r30, r30
    1d90:	ff 1f       	adc	r31, r31
    1d92:	00 24       	eor	r0, r0
    1d94:	00 1c       	adc	r0, r0
    1d96:	0b be       	out	0x3b, r0	; 59
    1d98:	07 90       	elpm	r0, Z+
    1d9a:	f6 91       	elpm	r31, Z
    1d9c:	e0 2d       	mov	r30, r0
    1d9e:	09 94       	ijmp

00001da0 <__udivmodhi4>:
    1da0:	aa 1b       	sub	r26, r26
    1da2:	bb 1b       	sub	r27, r27
    1da4:	51 e1       	ldi	r21, 0x11	; 17
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <__udivmodhi4_ep>

00001da8 <__udivmodhi4_loop>:
    1da8:	aa 1f       	adc	r26, r26
    1daa:	bb 1f       	adc	r27, r27
    1dac:	a6 17       	cp	r26, r22
    1dae:	b7 07       	cpc	r27, r23
    1db0:	10 f0       	brcs	.+4      	; 0x1db6 <__udivmodhi4_ep>
    1db2:	a6 1b       	sub	r26, r22
    1db4:	b7 0b       	sbc	r27, r23

00001db6 <__udivmodhi4_ep>:
    1db6:	88 1f       	adc	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	5a 95       	dec	r21
    1dbc:	a9 f7       	brne	.-22     	; 0x1da8 <__udivmodhi4_loop>
    1dbe:	80 95       	com	r24
    1dc0:	90 95       	com	r25
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	08 95       	ret

00001dc8 <strtol>:
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	5c 01       	movw	r10, r24
    1dec:	6b 01       	movw	r12, r22
    1dee:	7a 01       	movw	r14, r20
    1df0:	61 15       	cp	r22, r1
    1df2:	71 05       	cpc	r23, r1
    1df4:	19 f0       	breq	.+6      	; 0x1dfc <strtol+0x34>
    1df6:	fb 01       	movw	r30, r22
    1df8:	80 83       	st	Z, r24
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	e1 14       	cp	r14, r1
    1dfe:	f1 04       	cpc	r15, r1
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <strtol+0x44>
    1e02:	c7 01       	movw	r24, r14
    1e04:	02 97       	sbiw	r24, 0x02	; 2
    1e06:	83 97       	sbiw	r24, 0x23	; 35
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <strtol+0x44>
    1e0a:	e5 c0       	rjmp	.+458    	; 0x1fd6 <strtol+0x20e>
    1e0c:	e5 01       	movw	r28, r10
    1e0e:	21 96       	adiw	r28, 0x01	; 1
    1e10:	f5 01       	movw	r30, r10
    1e12:	10 81       	ld	r17, Z
    1e14:	81 2f       	mov	r24, r17
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 30 10 	call	0x2060	; 0x2060 <isspace>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	11 f0       	breq	.+4      	; 0x1e24 <strtol+0x5c>
    1e20:	5e 01       	movw	r10, r28
    1e22:	f4 cf       	rjmp	.-24     	; 0x1e0c <strtol+0x44>
    1e24:	1d 32       	cpi	r17, 0x2D	; 45
    1e26:	29 f4       	brne	.+10     	; 0x1e32 <strtol+0x6a>
    1e28:	21 96       	adiw	r28, 0x01	; 1
    1e2a:	f5 01       	movw	r30, r10
    1e2c:	11 81       	ldd	r17, Z+1	; 0x01
    1e2e:	01 e0       	ldi	r16, 0x01	; 1
    1e30:	07 c0       	rjmp	.+14     	; 0x1e40 <strtol+0x78>
    1e32:	1b 32       	cpi	r17, 0x2B	; 43
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <strtol+0x76>
    1e36:	e5 01       	movw	r28, r10
    1e38:	22 96       	adiw	r28, 0x02	; 2
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	11 81       	ldd	r17, Z+1	; 0x01
    1e3e:	00 e0       	ldi	r16, 0x00	; 0
    1e40:	e1 14       	cp	r14, r1
    1e42:	f1 04       	cpc	r15, r1
    1e44:	09 f1       	breq	.+66     	; 0x1e88 <strtol+0xc0>
    1e46:	f0 e1       	ldi	r31, 0x10	; 16
    1e48:	ef 16       	cp	r14, r31
    1e4a:	f1 04       	cpc	r15, r1
    1e4c:	29 f4       	brne	.+10     	; 0x1e58 <strtol+0x90>
    1e4e:	3f c0       	rjmp	.+126    	; 0x1ece <strtol+0x106>
    1e50:	10 e3       	ldi	r17, 0x30	; 48
    1e52:	e1 14       	cp	r14, r1
    1e54:	f1 04       	cpc	r15, r1
    1e56:	21 f1       	breq	.+72     	; 0x1ea0 <strtol+0xd8>
    1e58:	28 e0       	ldi	r18, 0x08	; 8
    1e5a:	e2 16       	cp	r14, r18
    1e5c:	f1 04       	cpc	r15, r1
    1e5e:	01 f1       	breq	.+64     	; 0x1ea0 <strtol+0xd8>
    1e60:	54 f4       	brge	.+20     	; 0x1e76 <strtol+0xae>
    1e62:	e2 e0       	ldi	r30, 0x02	; 2
    1e64:	ee 16       	cp	r14, r30
    1e66:	f1 04       	cpc	r15, r1
    1e68:	21 f5       	brne	.+72     	; 0x1eb2 <strtol+0xea>
    1e6a:	81 2c       	mov	r8, r1
    1e6c:	91 2c       	mov	r9, r1
    1e6e:	a1 2c       	mov	r10, r1
    1e70:	b0 e4       	ldi	r27, 0x40	; 64
    1e72:	bb 2e       	mov	r11, r27
    1e74:	3e c0       	rjmp	.+124    	; 0x1ef2 <strtol+0x12a>
    1e76:	fa e0       	ldi	r31, 0x0A	; 10
    1e78:	ef 16       	cp	r14, r31
    1e7a:	f1 04       	cpc	r15, r1
    1e7c:	39 f0       	breq	.+14     	; 0x1e8c <strtol+0xc4>
    1e7e:	20 e1       	ldi	r18, 0x10	; 16
    1e80:	e2 16       	cp	r14, r18
    1e82:	f1 04       	cpc	r15, r1
    1e84:	b1 f4       	brne	.+44     	; 0x1eb2 <strtol+0xea>
    1e86:	30 c0       	rjmp	.+96     	; 0x1ee8 <strtol+0x120>
    1e88:	10 33       	cpi	r17, 0x30	; 48
    1e8a:	19 f1       	breq	.+70     	; 0x1ed2 <strtol+0x10a>
    1e8c:	fa e0       	ldi	r31, 0x0A	; 10
    1e8e:	ef 2e       	mov	r14, r31
    1e90:	f1 2c       	mov	r15, r1
    1e92:	ac ec       	ldi	r26, 0xCC	; 204
    1e94:	8a 2e       	mov	r8, r26
    1e96:	98 2c       	mov	r9, r8
    1e98:	a8 2c       	mov	r10, r8
    1e9a:	ac e0       	ldi	r26, 0x0C	; 12
    1e9c:	ba 2e       	mov	r11, r26
    1e9e:	29 c0       	rjmp	.+82     	; 0x1ef2 <strtol+0x12a>
    1ea0:	78 e0       	ldi	r23, 0x08	; 8
    1ea2:	e7 2e       	mov	r14, r23
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	81 2c       	mov	r8, r1
    1ea8:	91 2c       	mov	r9, r1
    1eaa:	a1 2c       	mov	r10, r1
    1eac:	e0 e1       	ldi	r30, 0x10	; 16
    1eae:	be 2e       	mov	r11, r30
    1eb0:	20 c0       	rjmp	.+64     	; 0x1ef2 <strtol+0x12a>
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	90 e8       	ldi	r25, 0x80	; 128
    1eba:	97 01       	movw	r18, r14
    1ebc:	0f 2c       	mov	r0, r15
    1ebe:	00 0c       	add	r0, r0
    1ec0:	44 0b       	sbc	r20, r20
    1ec2:	55 0b       	sbc	r21, r21
    1ec4:	0e 94 8b 13 	call	0x2716	; 0x2716 <__udivmodsi4>
    1ec8:	49 01       	movw	r8, r18
    1eca:	5a 01       	movw	r10, r20
    1ecc:	12 c0       	rjmp	.+36     	; 0x1ef2 <strtol+0x12a>
    1ece:	10 33       	cpi	r17, 0x30	; 48
    1ed0:	59 f4       	brne	.+22     	; 0x1ee8 <strtol+0x120>
    1ed2:	88 81       	ld	r24, Y
    1ed4:	8f 7d       	andi	r24, 0xDF	; 223
    1ed6:	88 35       	cpi	r24, 0x58	; 88
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <strtol+0x114>
    1eda:	ba cf       	rjmp	.-140    	; 0x1e50 <strtol+0x88>
    1edc:	19 81       	ldd	r17, Y+1	; 0x01
    1ede:	22 96       	adiw	r28, 0x02	; 2
    1ee0:	02 60       	ori	r16, 0x02	; 2
    1ee2:	80 e1       	ldi	r24, 0x10	; 16
    1ee4:	e8 2e       	mov	r14, r24
    1ee6:	f1 2c       	mov	r15, r1
    1ee8:	81 2c       	mov	r8, r1
    1eea:	91 2c       	mov	r9, r1
    1eec:	a1 2c       	mov	r10, r1
    1eee:	68 e0       	ldi	r22, 0x08	; 8
    1ef0:	b6 2e       	mov	r11, r22
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	60 e0       	ldi	r22, 0x00	; 0
    1ef6:	70 e0       	ldi	r23, 0x00	; 0
    1ef8:	cb 01       	movw	r24, r22
    1efa:	27 01       	movw	r4, r14
    1efc:	0f 2c       	mov	r0, r15
    1efe:	00 0c       	add	r0, r0
    1f00:	66 08       	sbc	r6, r6
    1f02:	77 08       	sbc	r7, r7
    1f04:	fe 01       	movw	r30, r28
    1f06:	50 ed       	ldi	r21, 0xD0	; 208
    1f08:	35 2e       	mov	r3, r21
    1f0a:	31 0e       	add	r3, r17
    1f0c:	29 e0       	ldi	r18, 0x09	; 9
    1f0e:	23 15       	cp	r18, r3
    1f10:	70 f4       	brcc	.+28     	; 0x1f2e <strtol+0x166>
    1f12:	2f eb       	ldi	r18, 0xBF	; 191
    1f14:	21 0f       	add	r18, r17
    1f16:	2a 31       	cpi	r18, 0x1A	; 26
    1f18:	18 f4       	brcc	.+6      	; 0x1f20 <strtol+0x158>
    1f1a:	39 ec       	ldi	r19, 0xC9	; 201
    1f1c:	33 2e       	mov	r3, r19
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <strtol+0x164>
    1f20:	2f e9       	ldi	r18, 0x9F	; 159
    1f22:	21 0f       	add	r18, r17
    1f24:	2a 31       	cpi	r18, 0x1A	; 26
    1f26:	18 f5       	brcc	.+70     	; 0x1f6e <strtol+0x1a6>
    1f28:	29 ea       	ldi	r18, 0xA9	; 169
    1f2a:	32 2e       	mov	r3, r18
    1f2c:	31 0e       	add	r3, r17
    1f2e:	23 2d       	mov	r18, r3
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	2e 15       	cp	r18, r14
    1f34:	3f 05       	cpc	r19, r15
    1f36:	dc f4       	brge	.+54     	; 0x1f6e <strtol+0x1a6>
    1f38:	47 fd       	sbrc	r20, 7
    1f3a:	16 c0       	rjmp	.+44     	; 0x1f68 <strtol+0x1a0>
    1f3c:	86 16       	cp	r8, r22
    1f3e:	97 06       	cpc	r9, r23
    1f40:	a8 06       	cpc	r10, r24
    1f42:	b9 06       	cpc	r11, r25
    1f44:	70 f0       	brcs	.+28     	; 0x1f62 <strtol+0x19a>
    1f46:	a3 01       	movw	r20, r6
    1f48:	92 01       	movw	r18, r4
    1f4a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__mulsi3>
    1f4e:	63 0d       	add	r22, r3
    1f50:	71 1d       	adc	r23, r1
    1f52:	81 1d       	adc	r24, r1
    1f54:	91 1d       	adc	r25, r1
    1f56:	61 30       	cpi	r22, 0x01	; 1
    1f58:	71 05       	cpc	r23, r1
    1f5a:	81 05       	cpc	r24, r1
    1f5c:	20 e8       	ldi	r18, 0x80	; 128
    1f5e:	92 07       	cpc	r25, r18
    1f60:	10 f0       	brcs	.+4      	; 0x1f66 <strtol+0x19e>
    1f62:	4f ef       	ldi	r20, 0xFF	; 255
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <strtol+0x1a0>
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	21 96       	adiw	r28, 0x01	; 1
    1f6a:	10 81       	ld	r17, Z
    1f6c:	cb cf       	rjmp	.-106    	; 0x1f04 <strtol+0x13c>
    1f6e:	20 2f       	mov	r18, r16
    1f70:	21 70       	andi	r18, 0x01	; 1
    1f72:	c1 14       	cp	r12, r1
    1f74:	d1 04       	cpc	r13, r1
    1f76:	71 f0       	breq	.+28     	; 0x1f94 <strtol+0x1cc>
    1f78:	44 23       	and	r20, r20
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <strtol+0x1be>
    1f7c:	21 97       	sbiw	r28, 0x01	; 1
    1f7e:	f6 01       	movw	r30, r12
    1f80:	c0 83       	st	Z, r28
    1f82:	d1 83       	std	Z+1, r29	; 0x01
    1f84:	07 c0       	rjmp	.+14     	; 0x1f94 <strtol+0x1cc>
    1f86:	01 ff       	sbrs	r16, 1
    1f88:	19 c0       	rjmp	.+50     	; 0x1fbc <strtol+0x1f4>
    1f8a:	22 97       	sbiw	r28, 0x02	; 2
    1f8c:	f6 01       	movw	r30, r12
    1f8e:	c0 83       	st	Z, r28
    1f90:	d1 83       	std	Z+1, r29	; 0x01
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <strtol+0x1f4>
    1f94:	47 ff       	sbrs	r20, 7
    1f96:	12 c0       	rjmp	.+36     	; 0x1fbc <strtol+0x1f4>
    1f98:	22 23       	and	r18, r18
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <strtol+0x1de>
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e8       	ldi	r25, 0x80	; 128
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <strtol+0x1e6>
    1fa6:	6f ef       	ldi	r22, 0xFF	; 255
    1fa8:	7f ef       	ldi	r23, 0xFF	; 255
    1faa:	8f ef       	ldi	r24, 0xFF	; 255
    1fac:	9f e7       	ldi	r25, 0x7F	; 127
    1fae:	22 e2       	ldi	r18, 0x22	; 34
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	20 93 ce 45 	sts	0x45CE, r18	; 0x8045ce <errno>
    1fb6:	30 93 cf 45 	sts	0x45CF, r19	; 0x8045cf <errno+0x1>
    1fba:	09 c0       	rjmp	.+18     	; 0x1fce <strtol+0x206>
    1fbc:	22 23       	and	r18, r18
    1fbe:	81 f0       	breq	.+32     	; 0x1fe0 <strtol+0x218>
    1fc0:	90 95       	com	r25
    1fc2:	80 95       	com	r24
    1fc4:	70 95       	com	r23
    1fc6:	61 95       	neg	r22
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	46 2f       	mov	r20, r22
    1fd0:	37 2f       	mov	r19, r23
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	12 c0       	rjmp	.+36     	; 0x1ffa <strtol+0x232>
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0d c0       	rjmp	.+26     	; 0x1ffa <strtol+0x232>
    1fe0:	97 ff       	sbrs	r25, 7
    1fe2:	f5 cf       	rjmp	.-22     	; 0x1fce <strtol+0x206>
    1fe4:	82 e2       	ldi	r24, 0x22	; 34
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	80 93 ce 45 	sts	0x45CE, r24	; 0x8045ce <errno>
    1fec:	90 93 cf 45 	sts	0x45CF, r25	; 0x8045cf <errno+0x1>
    1ff0:	6f ef       	ldi	r22, 0xFF	; 255
    1ff2:	7f ef       	ldi	r23, 0xFF	; 255
    1ff4:	8f ef       	ldi	r24, 0xFF	; 255
    1ff6:	9f e7       	ldi	r25, 0x7F	; 127
    1ff8:	ea cf       	rjmp	.-44     	; 0x1fce <strtol+0x206>
    1ffa:	64 2f       	mov	r22, r20
    1ffc:	73 2f       	mov	r23, r19
    1ffe:	82 2f       	mov	r24, r18
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	9f 90       	pop	r9
    2016:	8f 90       	pop	r8
    2018:	7f 90       	pop	r7
    201a:	6f 90       	pop	r6
    201c:	5f 90       	pop	r5
    201e:	4f 90       	pop	r4
    2020:	3f 90       	pop	r3
    2022:	08 95       	ret

00002024 <atoi>:
    2024:	fc 01       	movw	r30, r24
    2026:	88 27       	eor	r24, r24
    2028:	99 27       	eor	r25, r25
    202a:	e8 94       	clt
    202c:	21 91       	ld	r18, Z+
    202e:	20 32       	cpi	r18, 0x20	; 32
    2030:	e9 f3       	breq	.-6      	; 0x202c <atoi+0x8>
    2032:	29 30       	cpi	r18, 0x09	; 9
    2034:	10 f0       	brcs	.+4      	; 0x203a <atoi+0x16>
    2036:	2e 30       	cpi	r18, 0x0E	; 14
    2038:	c8 f3       	brcs	.-14     	; 0x202c <atoi+0x8>
    203a:	2b 32       	cpi	r18, 0x2B	; 43
    203c:	41 f0       	breq	.+16     	; 0x204e <atoi+0x2a>
    203e:	2d 32       	cpi	r18, 0x2D	; 45
    2040:	39 f4       	brne	.+14     	; 0x2050 <atoi+0x2c>
    2042:	68 94       	set
    2044:	04 c0       	rjmp	.+8      	; 0x204e <atoi+0x2a>
    2046:	0e 94 47 10 	call	0x208e	; 0x208e <__mulhi_const_10>
    204a:	82 0f       	add	r24, r18
    204c:	91 1d       	adc	r25, r1
    204e:	21 91       	ld	r18, Z+
    2050:	20 53       	subi	r18, 0x30	; 48
    2052:	2a 30       	cpi	r18, 0x0A	; 10
    2054:	c0 f3       	brcs	.-16     	; 0x2046 <atoi+0x22>
    2056:	1e f4       	brtc	.+6      	; 0x205e <atoi+0x3a>
    2058:	90 95       	com	r25
    205a:	81 95       	neg	r24
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	08 95       	ret

00002060 <isspace>:
    2060:	91 11       	cpse	r25, r1
    2062:	0c 94 9d 12 	jmp	0x253a	; 0x253a <__ctype_isfalse>
    2066:	80 32       	cpi	r24, 0x20	; 32
    2068:	19 f0       	breq	.+6      	; 0x2070 <isspace+0x10>
    206a:	89 50       	subi	r24, 0x09	; 9
    206c:	85 50       	subi	r24, 0x05	; 5
    206e:	c8 f7       	brcc	.-14     	; 0x2062 <isspace+0x2>
    2070:	08 95       	ret

00002072 <strncmp>:
    2072:	fb 01       	movw	r30, r22
    2074:	dc 01       	movw	r26, r24
    2076:	41 50       	subi	r20, 0x01	; 1
    2078:	50 40       	sbci	r21, 0x00	; 0
    207a:	30 f0       	brcs	.+12     	; 0x2088 <strncmp+0x16>
    207c:	8d 91       	ld	r24, X+
    207e:	01 90       	ld	r0, Z+
    2080:	80 19       	sub	r24, r0
    2082:	19 f4       	brne	.+6      	; 0x208a <strncmp+0x18>
    2084:	00 20       	and	r0, r0
    2086:	b9 f7       	brne	.-18     	; 0x2076 <strncmp+0x4>
    2088:	88 1b       	sub	r24, r24
    208a:	99 0b       	sbc	r25, r25
    208c:	08 95       	ret

0000208e <__mulhi_const_10>:
    208e:	7a e0       	ldi	r23, 0x0A	; 10
    2090:	97 9f       	mul	r25, r23
    2092:	90 2d       	mov	r25, r0
    2094:	87 9f       	mul	r24, r23
    2096:	80 2d       	mov	r24, r0
    2098:	91 0d       	add	r25, r1
    209a:	11 24       	eor	r1, r1
    209c:	08 95       	ret

0000209e <printf>:
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	ae 01       	movw	r20, r28
    20a8:	4b 5f       	subi	r20, 0xFB	; 251
    20aa:	5f 4f       	sbci	r21, 0xFF	; 255
    20ac:	fa 01       	movw	r30, r20
    20ae:	61 91       	ld	r22, Z+
    20b0:	71 91       	ld	r23, Z+
    20b2:	af 01       	movw	r20, r30
    20b4:	80 91 ca 45 	lds	r24, 0x45CA	; 0x8045ca <__iob+0x2>
    20b8:	90 91 cb 45 	lds	r25, 0x45CB	; 0x8045cb <__iob+0x3>
    20bc:	0e 94 99 10 	call	0x2132	; 0x2132 <vfprintf>
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <putchar>:
    20c6:	60 91 ca 45 	lds	r22, 0x45CA	; 0x8045ca <__iob+0x2>
    20ca:	70 91 cb 45 	lds	r23, 0x45CB	; 0x8045cb <__iob+0x3>
    20ce:	0c 94 b6 12 	jmp	0x256c	; 0x256c <fputc>

000020d2 <puts>:
    20d2:	0f 93       	push	r16
    20d4:	1f 93       	push	r17
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	e0 91 ca 45 	lds	r30, 0x45CA	; 0x8045ca <__iob+0x2>
    20de:	f0 91 cb 45 	lds	r31, 0x45CB	; 0x8045cb <__iob+0x3>
    20e2:	23 81       	ldd	r18, Z+3	; 0x03
    20e4:	21 ff       	sbrs	r18, 1
    20e6:	1b c0       	rjmp	.+54     	; 0x211e <puts+0x4c>
    20e8:	8c 01       	movw	r16, r24
    20ea:	d0 e0       	ldi	r29, 0x00	; 0
    20ec:	c0 e0       	ldi	r28, 0x00	; 0
    20ee:	f8 01       	movw	r30, r16
    20f0:	81 91       	ld	r24, Z+
    20f2:	8f 01       	movw	r16, r30
    20f4:	60 91 ca 45 	lds	r22, 0x45CA	; 0x8045ca <__iob+0x2>
    20f8:	70 91 cb 45 	lds	r23, 0x45CB	; 0x8045cb <__iob+0x3>
    20fc:	db 01       	movw	r26, r22
    20fe:	18 96       	adiw	r26, 0x08	; 8
    2100:	ed 91       	ld	r30, X+
    2102:	fc 91       	ld	r31, X
    2104:	19 97       	sbiw	r26, 0x09	; 9
    2106:	88 23       	and	r24, r24
    2108:	31 f0       	breq	.+12     	; 0x2116 <puts+0x44>
    210a:	09 95       	icall
    210c:	89 2b       	or	r24, r25
    210e:	79 f3       	breq	.-34     	; 0x20ee <puts+0x1c>
    2110:	df ef       	ldi	r29, 0xFF	; 255
    2112:	cf ef       	ldi	r28, 0xFF	; 255
    2114:	ec cf       	rjmp	.-40     	; 0x20ee <puts+0x1c>
    2116:	8a e0       	ldi	r24, 0x0A	; 10
    2118:	09 95       	icall
    211a:	89 2b       	or	r24, r25
    211c:	19 f0       	breq	.+6      	; 0x2124 <puts+0x52>
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	9f ef       	ldi	r25, 0xFF	; 255
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <puts+0x56>
    2124:	8d 2f       	mov	r24, r29
    2126:	9c 2f       	mov	r25, r28
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	08 95       	ret

00002132 <vfprintf>:
    2132:	2f 92       	push	r2
    2134:	3f 92       	push	r3
    2136:	4f 92       	push	r4
    2138:	5f 92       	push	r5
    213a:	6f 92       	push	r6
    213c:	7f 92       	push	r7
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	2b 97       	sbiw	r28, 0x0b	; 11
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	6c 01       	movw	r12, r24
    2162:	7b 01       	movw	r14, r22
    2164:	8a 01       	movw	r16, r20
    2166:	fc 01       	movw	r30, r24
    2168:	16 82       	std	Z+6, r1	; 0x06
    216a:	17 82       	std	Z+7, r1	; 0x07
    216c:	83 81       	ldd	r24, Z+3	; 0x03
    216e:	81 ff       	sbrs	r24, 1
    2170:	cc c1       	rjmp	.+920    	; 0x250a <vfprintf+0x3d8>
    2172:	ce 01       	movw	r24, r28
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	3c 01       	movw	r6, r24
    2178:	f6 01       	movw	r30, r12
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	f7 01       	movw	r30, r14
    217e:	93 fd       	sbrc	r25, 3
    2180:	85 91       	lpm	r24, Z+
    2182:	93 ff       	sbrs	r25, 3
    2184:	81 91       	ld	r24, Z+
    2186:	7f 01       	movw	r14, r30
    2188:	88 23       	and	r24, r24
    218a:	09 f4       	brne	.+2      	; 0x218e <vfprintf+0x5c>
    218c:	ba c1       	rjmp	.+884    	; 0x2502 <vfprintf+0x3d0>
    218e:	85 32       	cpi	r24, 0x25	; 37
    2190:	39 f4       	brne	.+14     	; 0x21a0 <vfprintf+0x6e>
    2192:	93 fd       	sbrc	r25, 3
    2194:	85 91       	lpm	r24, Z+
    2196:	93 ff       	sbrs	r25, 3
    2198:	81 91       	ld	r24, Z+
    219a:	7f 01       	movw	r14, r30
    219c:	85 32       	cpi	r24, 0x25	; 37
    219e:	29 f4       	brne	.+10     	; 0x21aa <vfprintf+0x78>
    21a0:	b6 01       	movw	r22, r12
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    21a8:	e7 cf       	rjmp	.-50     	; 0x2178 <vfprintf+0x46>
    21aa:	91 2c       	mov	r9, r1
    21ac:	21 2c       	mov	r2, r1
    21ae:	31 2c       	mov	r3, r1
    21b0:	ff e1       	ldi	r31, 0x1F	; 31
    21b2:	f3 15       	cp	r31, r3
    21b4:	d8 f0       	brcs	.+54     	; 0x21ec <vfprintf+0xba>
    21b6:	8b 32       	cpi	r24, 0x2B	; 43
    21b8:	79 f0       	breq	.+30     	; 0x21d8 <vfprintf+0xa6>
    21ba:	38 f4       	brcc	.+14     	; 0x21ca <vfprintf+0x98>
    21bc:	80 32       	cpi	r24, 0x20	; 32
    21be:	79 f0       	breq	.+30     	; 0x21de <vfprintf+0xac>
    21c0:	83 32       	cpi	r24, 0x23	; 35
    21c2:	a1 f4       	brne	.+40     	; 0x21ec <vfprintf+0xba>
    21c4:	23 2d       	mov	r18, r3
    21c6:	20 61       	ori	r18, 0x10	; 16
    21c8:	1d c0       	rjmp	.+58     	; 0x2204 <vfprintf+0xd2>
    21ca:	8d 32       	cpi	r24, 0x2D	; 45
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <vfprintf+0xb4>
    21ce:	80 33       	cpi	r24, 0x30	; 48
    21d0:	69 f4       	brne	.+26     	; 0x21ec <vfprintf+0xba>
    21d2:	23 2d       	mov	r18, r3
    21d4:	21 60       	ori	r18, 0x01	; 1
    21d6:	16 c0       	rjmp	.+44     	; 0x2204 <vfprintf+0xd2>
    21d8:	83 2d       	mov	r24, r3
    21da:	82 60       	ori	r24, 0x02	; 2
    21dc:	38 2e       	mov	r3, r24
    21de:	e3 2d       	mov	r30, r3
    21e0:	e4 60       	ori	r30, 0x04	; 4
    21e2:	3e 2e       	mov	r3, r30
    21e4:	2a c0       	rjmp	.+84     	; 0x223a <vfprintf+0x108>
    21e6:	f3 2d       	mov	r31, r3
    21e8:	f8 60       	ori	r31, 0x08	; 8
    21ea:	1d c0       	rjmp	.+58     	; 0x2226 <vfprintf+0xf4>
    21ec:	37 fc       	sbrc	r3, 7
    21ee:	2d c0       	rjmp	.+90     	; 0x224a <vfprintf+0x118>
    21f0:	20 ed       	ldi	r18, 0xD0	; 208
    21f2:	28 0f       	add	r18, r24
    21f4:	2a 30       	cpi	r18, 0x0A	; 10
    21f6:	40 f0       	brcs	.+16     	; 0x2208 <vfprintf+0xd6>
    21f8:	8e 32       	cpi	r24, 0x2E	; 46
    21fa:	b9 f4       	brne	.+46     	; 0x222a <vfprintf+0xf8>
    21fc:	36 fc       	sbrc	r3, 6
    21fe:	81 c1       	rjmp	.+770    	; 0x2502 <vfprintf+0x3d0>
    2200:	23 2d       	mov	r18, r3
    2202:	20 64       	ori	r18, 0x40	; 64
    2204:	32 2e       	mov	r3, r18
    2206:	19 c0       	rjmp	.+50     	; 0x223a <vfprintf+0x108>
    2208:	36 fe       	sbrs	r3, 6
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <vfprintf+0xe6>
    220c:	8a e0       	ldi	r24, 0x0A	; 10
    220e:	98 9e       	mul	r9, r24
    2210:	20 0d       	add	r18, r0
    2212:	11 24       	eor	r1, r1
    2214:	92 2e       	mov	r9, r18
    2216:	11 c0       	rjmp	.+34     	; 0x223a <vfprintf+0x108>
    2218:	ea e0       	ldi	r30, 0x0A	; 10
    221a:	2e 9e       	mul	r2, r30
    221c:	20 0d       	add	r18, r0
    221e:	11 24       	eor	r1, r1
    2220:	22 2e       	mov	r2, r18
    2222:	f3 2d       	mov	r31, r3
    2224:	f0 62       	ori	r31, 0x20	; 32
    2226:	3f 2e       	mov	r3, r31
    2228:	08 c0       	rjmp	.+16     	; 0x223a <vfprintf+0x108>
    222a:	8c 36       	cpi	r24, 0x6C	; 108
    222c:	21 f4       	brne	.+8      	; 0x2236 <vfprintf+0x104>
    222e:	83 2d       	mov	r24, r3
    2230:	80 68       	ori	r24, 0x80	; 128
    2232:	38 2e       	mov	r3, r24
    2234:	02 c0       	rjmp	.+4      	; 0x223a <vfprintf+0x108>
    2236:	88 36       	cpi	r24, 0x68	; 104
    2238:	41 f4       	brne	.+16     	; 0x224a <vfprintf+0x118>
    223a:	f7 01       	movw	r30, r14
    223c:	93 fd       	sbrc	r25, 3
    223e:	85 91       	lpm	r24, Z+
    2240:	93 ff       	sbrs	r25, 3
    2242:	81 91       	ld	r24, Z+
    2244:	7f 01       	movw	r14, r30
    2246:	81 11       	cpse	r24, r1
    2248:	b3 cf       	rjmp	.-154    	; 0x21b0 <vfprintf+0x7e>
    224a:	98 2f       	mov	r25, r24
    224c:	9f 7d       	andi	r25, 0xDF	; 223
    224e:	95 54       	subi	r25, 0x45	; 69
    2250:	93 30       	cpi	r25, 0x03	; 3
    2252:	28 f4       	brcc	.+10     	; 0x225e <vfprintf+0x12c>
    2254:	0c 5f       	subi	r16, 0xFC	; 252
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	9f e3       	ldi	r25, 0x3F	; 63
    225a:	99 83       	std	Y+1, r25	; 0x01
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <vfprintf+0x146>
    225e:	83 36       	cpi	r24, 0x63	; 99
    2260:	31 f0       	breq	.+12     	; 0x226e <vfprintf+0x13c>
    2262:	83 37       	cpi	r24, 0x73	; 115
    2264:	71 f0       	breq	.+28     	; 0x2282 <vfprintf+0x150>
    2266:	83 35       	cpi	r24, 0x53	; 83
    2268:	09 f0       	breq	.+2      	; 0x226c <vfprintf+0x13a>
    226a:	59 c0       	rjmp	.+178    	; 0x231e <vfprintf+0x1ec>
    226c:	21 c0       	rjmp	.+66     	; 0x22b0 <vfprintf+0x17e>
    226e:	f8 01       	movw	r30, r16
    2270:	80 81       	ld	r24, Z
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	0e 5f       	subi	r16, 0xFE	; 254
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	88 24       	eor	r8, r8
    227a:	83 94       	inc	r8
    227c:	91 2c       	mov	r9, r1
    227e:	53 01       	movw	r10, r6
    2280:	13 c0       	rjmp	.+38     	; 0x22a8 <vfprintf+0x176>
    2282:	28 01       	movw	r4, r16
    2284:	f2 e0       	ldi	r31, 0x02	; 2
    2286:	4f 0e       	add	r4, r31
    2288:	51 1c       	adc	r5, r1
    228a:	f8 01       	movw	r30, r16
    228c:	a0 80       	ld	r10, Z
    228e:	b1 80       	ldd	r11, Z+1	; 0x01
    2290:	36 fe       	sbrs	r3, 6
    2292:	03 c0       	rjmp	.+6      	; 0x229a <vfprintf+0x168>
    2294:	69 2d       	mov	r22, r9
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	02 c0       	rjmp	.+4      	; 0x229e <vfprintf+0x16c>
    229a:	6f ef       	ldi	r22, 0xFF	; 255
    229c:	7f ef       	ldi	r23, 0xFF	; 255
    229e:	c5 01       	movw	r24, r10
    22a0:	0e 94 ab 12 	call	0x2556	; 0x2556 <strnlen>
    22a4:	4c 01       	movw	r8, r24
    22a6:	82 01       	movw	r16, r4
    22a8:	f3 2d       	mov	r31, r3
    22aa:	ff 77       	andi	r31, 0x7F	; 127
    22ac:	3f 2e       	mov	r3, r31
    22ae:	16 c0       	rjmp	.+44     	; 0x22dc <vfprintf+0x1aa>
    22b0:	28 01       	movw	r4, r16
    22b2:	22 e0       	ldi	r18, 0x02	; 2
    22b4:	42 0e       	add	r4, r18
    22b6:	51 1c       	adc	r5, r1
    22b8:	f8 01       	movw	r30, r16
    22ba:	a0 80       	ld	r10, Z
    22bc:	b1 80       	ldd	r11, Z+1	; 0x01
    22be:	36 fe       	sbrs	r3, 6
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <vfprintf+0x196>
    22c2:	69 2d       	mov	r22, r9
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <vfprintf+0x19a>
    22c8:	6f ef       	ldi	r22, 0xFF	; 255
    22ca:	7f ef       	ldi	r23, 0xFF	; 255
    22cc:	c5 01       	movw	r24, r10
    22ce:	0e 94 a0 12 	call	0x2540	; 0x2540 <strnlen_P>
    22d2:	4c 01       	movw	r8, r24
    22d4:	f3 2d       	mov	r31, r3
    22d6:	f0 68       	ori	r31, 0x80	; 128
    22d8:	3f 2e       	mov	r3, r31
    22da:	82 01       	movw	r16, r4
    22dc:	33 fc       	sbrc	r3, 3
    22de:	1b c0       	rjmp	.+54     	; 0x2316 <vfprintf+0x1e4>
    22e0:	82 2d       	mov	r24, r2
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	88 16       	cp	r8, r24
    22e6:	99 06       	cpc	r9, r25
    22e8:	b0 f4       	brcc	.+44     	; 0x2316 <vfprintf+0x1e4>
    22ea:	b6 01       	movw	r22, r12
    22ec:	80 e2       	ldi	r24, 0x20	; 32
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    22f4:	2a 94       	dec	r2
    22f6:	f4 cf       	rjmp	.-24     	; 0x22e0 <vfprintf+0x1ae>
    22f8:	f5 01       	movw	r30, r10
    22fa:	37 fc       	sbrc	r3, 7
    22fc:	85 91       	lpm	r24, Z+
    22fe:	37 fe       	sbrs	r3, 7
    2300:	81 91       	ld	r24, Z+
    2302:	5f 01       	movw	r10, r30
    2304:	b6 01       	movw	r22, r12
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    230c:	21 10       	cpse	r2, r1
    230e:	2a 94       	dec	r2
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	82 1a       	sub	r8, r18
    2314:	91 08       	sbc	r9, r1
    2316:	81 14       	cp	r8, r1
    2318:	91 04       	cpc	r9, r1
    231a:	71 f7       	brne	.-36     	; 0x22f8 <vfprintf+0x1c6>
    231c:	e8 c0       	rjmp	.+464    	; 0x24ee <vfprintf+0x3bc>
    231e:	84 36       	cpi	r24, 0x64	; 100
    2320:	11 f0       	breq	.+4      	; 0x2326 <vfprintf+0x1f4>
    2322:	89 36       	cpi	r24, 0x69	; 105
    2324:	41 f5       	brne	.+80     	; 0x2376 <vfprintf+0x244>
    2326:	f8 01       	movw	r30, r16
    2328:	37 fe       	sbrs	r3, 7
    232a:	07 c0       	rjmp	.+14     	; 0x233a <vfprintf+0x208>
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	0c 5f       	subi	r16, 0xFC	; 252
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	08 c0       	rjmp	.+16     	; 0x234a <vfprintf+0x218>
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	07 2e       	mov	r0, r23
    2340:	00 0c       	add	r0, r0
    2342:	88 0b       	sbc	r24, r24
    2344:	99 0b       	sbc	r25, r25
    2346:	0e 5f       	subi	r16, 0xFE	; 254
    2348:	1f 4f       	sbci	r17, 0xFF	; 255
    234a:	f3 2d       	mov	r31, r3
    234c:	ff 76       	andi	r31, 0x6F	; 111
    234e:	3f 2e       	mov	r3, r31
    2350:	97 ff       	sbrs	r25, 7
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <vfprintf+0x234>
    2354:	90 95       	com	r25
    2356:	80 95       	com	r24
    2358:	70 95       	com	r23
    235a:	61 95       	neg	r22
    235c:	7f 4f       	sbci	r23, 0xFF	; 255
    235e:	8f 4f       	sbci	r24, 0xFF	; 255
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	f0 68       	ori	r31, 0x80	; 128
    2364:	3f 2e       	mov	r3, r31
    2366:	2a e0       	ldi	r18, 0x0A	; 10
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	a3 01       	movw	r20, r6
    236c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__ultoa_invert>
    2370:	88 2e       	mov	r8, r24
    2372:	86 18       	sub	r8, r6
    2374:	45 c0       	rjmp	.+138    	; 0x2400 <vfprintf+0x2ce>
    2376:	85 37       	cpi	r24, 0x75	; 117
    2378:	31 f4       	brne	.+12     	; 0x2386 <vfprintf+0x254>
    237a:	23 2d       	mov	r18, r3
    237c:	2f 7e       	andi	r18, 0xEF	; 239
    237e:	b2 2e       	mov	r11, r18
    2380:	2a e0       	ldi	r18, 0x0A	; 10
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	25 c0       	rjmp	.+74     	; 0x23d0 <vfprintf+0x29e>
    2386:	93 2d       	mov	r25, r3
    2388:	99 7f       	andi	r25, 0xF9	; 249
    238a:	b9 2e       	mov	r11, r25
    238c:	8f 36       	cpi	r24, 0x6F	; 111
    238e:	c1 f0       	breq	.+48     	; 0x23c0 <vfprintf+0x28e>
    2390:	18 f4       	brcc	.+6      	; 0x2398 <vfprintf+0x266>
    2392:	88 35       	cpi	r24, 0x58	; 88
    2394:	79 f0       	breq	.+30     	; 0x23b4 <vfprintf+0x282>
    2396:	b5 c0       	rjmp	.+362    	; 0x2502 <vfprintf+0x3d0>
    2398:	80 37       	cpi	r24, 0x70	; 112
    239a:	19 f0       	breq	.+6      	; 0x23a2 <vfprintf+0x270>
    239c:	88 37       	cpi	r24, 0x78	; 120
    239e:	21 f0       	breq	.+8      	; 0x23a8 <vfprintf+0x276>
    23a0:	b0 c0       	rjmp	.+352    	; 0x2502 <vfprintf+0x3d0>
    23a2:	e9 2f       	mov	r30, r25
    23a4:	e0 61       	ori	r30, 0x10	; 16
    23a6:	be 2e       	mov	r11, r30
    23a8:	b4 fe       	sbrs	r11, 4
    23aa:	0d c0       	rjmp	.+26     	; 0x23c6 <vfprintf+0x294>
    23ac:	fb 2d       	mov	r31, r11
    23ae:	f4 60       	ori	r31, 0x04	; 4
    23b0:	bf 2e       	mov	r11, r31
    23b2:	09 c0       	rjmp	.+18     	; 0x23c6 <vfprintf+0x294>
    23b4:	34 fe       	sbrs	r3, 4
    23b6:	0a c0       	rjmp	.+20     	; 0x23cc <vfprintf+0x29a>
    23b8:	29 2f       	mov	r18, r25
    23ba:	26 60       	ori	r18, 0x06	; 6
    23bc:	b2 2e       	mov	r11, r18
    23be:	06 c0       	rjmp	.+12     	; 0x23cc <vfprintf+0x29a>
    23c0:	28 e0       	ldi	r18, 0x08	; 8
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <vfprintf+0x29e>
    23c6:	20 e1       	ldi	r18, 0x10	; 16
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <vfprintf+0x29e>
    23cc:	20 e1       	ldi	r18, 0x10	; 16
    23ce:	32 e0       	ldi	r19, 0x02	; 2
    23d0:	f8 01       	movw	r30, r16
    23d2:	b7 fe       	sbrs	r11, 7
    23d4:	07 c0       	rjmp	.+14     	; 0x23e4 <vfprintf+0x2b2>
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	0c 5f       	subi	r16, 0xFC	; 252
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <vfprintf+0x2be>
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 5f       	subi	r16, 0xFE	; 254
    23ee:	1f 4f       	sbci	r17, 0xFF	; 255
    23f0:	a3 01       	movw	r20, r6
    23f2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__ultoa_invert>
    23f6:	88 2e       	mov	r8, r24
    23f8:	86 18       	sub	r8, r6
    23fa:	fb 2d       	mov	r31, r11
    23fc:	ff 77       	andi	r31, 0x7F	; 127
    23fe:	3f 2e       	mov	r3, r31
    2400:	36 fe       	sbrs	r3, 6
    2402:	0d c0       	rjmp	.+26     	; 0x241e <vfprintf+0x2ec>
    2404:	23 2d       	mov	r18, r3
    2406:	2e 7f       	andi	r18, 0xFE	; 254
    2408:	a2 2e       	mov	r10, r18
    240a:	89 14       	cp	r8, r9
    240c:	58 f4       	brcc	.+22     	; 0x2424 <vfprintf+0x2f2>
    240e:	34 fe       	sbrs	r3, 4
    2410:	0b c0       	rjmp	.+22     	; 0x2428 <vfprintf+0x2f6>
    2412:	32 fc       	sbrc	r3, 2
    2414:	09 c0       	rjmp	.+18     	; 0x2428 <vfprintf+0x2f6>
    2416:	83 2d       	mov	r24, r3
    2418:	8e 7e       	andi	r24, 0xEE	; 238
    241a:	a8 2e       	mov	r10, r24
    241c:	05 c0       	rjmp	.+10     	; 0x2428 <vfprintf+0x2f6>
    241e:	b8 2c       	mov	r11, r8
    2420:	a3 2c       	mov	r10, r3
    2422:	03 c0       	rjmp	.+6      	; 0x242a <vfprintf+0x2f8>
    2424:	b8 2c       	mov	r11, r8
    2426:	01 c0       	rjmp	.+2      	; 0x242a <vfprintf+0x2f8>
    2428:	b9 2c       	mov	r11, r9
    242a:	a4 fe       	sbrs	r10, 4
    242c:	0f c0       	rjmp	.+30     	; 0x244c <vfprintf+0x31a>
    242e:	fe 01       	movw	r30, r28
    2430:	e8 0d       	add	r30, r8
    2432:	f1 1d       	adc	r31, r1
    2434:	80 81       	ld	r24, Z
    2436:	80 33       	cpi	r24, 0x30	; 48
    2438:	21 f4       	brne	.+8      	; 0x2442 <vfprintf+0x310>
    243a:	9a 2d       	mov	r25, r10
    243c:	99 7e       	andi	r25, 0xE9	; 233
    243e:	a9 2e       	mov	r10, r25
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <vfprintf+0x322>
    2442:	a2 fe       	sbrs	r10, 2
    2444:	06 c0       	rjmp	.+12     	; 0x2452 <vfprintf+0x320>
    2446:	b3 94       	inc	r11
    2448:	b3 94       	inc	r11
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <vfprintf+0x322>
    244c:	8a 2d       	mov	r24, r10
    244e:	86 78       	andi	r24, 0x86	; 134
    2450:	09 f0       	breq	.+2      	; 0x2454 <vfprintf+0x322>
    2452:	b3 94       	inc	r11
    2454:	a3 fc       	sbrc	r10, 3
    2456:	11 c0       	rjmp	.+34     	; 0x247a <vfprintf+0x348>
    2458:	a0 fe       	sbrs	r10, 0
    245a:	06 c0       	rjmp	.+12     	; 0x2468 <vfprintf+0x336>
    245c:	b2 14       	cp	r11, r2
    245e:	88 f4       	brcc	.+34     	; 0x2482 <vfprintf+0x350>
    2460:	28 0c       	add	r2, r8
    2462:	92 2c       	mov	r9, r2
    2464:	9b 18       	sub	r9, r11
    2466:	0e c0       	rjmp	.+28     	; 0x2484 <vfprintf+0x352>
    2468:	b2 14       	cp	r11, r2
    246a:	60 f4       	brcc	.+24     	; 0x2484 <vfprintf+0x352>
    246c:	b6 01       	movw	r22, r12
    246e:	80 e2       	ldi	r24, 0x20	; 32
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2476:	b3 94       	inc	r11
    2478:	f7 cf       	rjmp	.-18     	; 0x2468 <vfprintf+0x336>
    247a:	b2 14       	cp	r11, r2
    247c:	18 f4       	brcc	.+6      	; 0x2484 <vfprintf+0x352>
    247e:	2b 18       	sub	r2, r11
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <vfprintf+0x354>
    2482:	98 2c       	mov	r9, r8
    2484:	21 2c       	mov	r2, r1
    2486:	a4 fe       	sbrs	r10, 4
    2488:	10 c0       	rjmp	.+32     	; 0x24aa <vfprintf+0x378>
    248a:	b6 01       	movw	r22, r12
    248c:	80 e3       	ldi	r24, 0x30	; 48
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    2494:	a2 fe       	sbrs	r10, 2
    2496:	17 c0       	rjmp	.+46     	; 0x24c6 <vfprintf+0x394>
    2498:	a1 fc       	sbrc	r10, 1
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <vfprintf+0x370>
    249c:	88 e7       	ldi	r24, 0x78	; 120
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <vfprintf+0x374>
    24a2:	88 e5       	ldi	r24, 0x58	; 88
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	b6 01       	movw	r22, r12
    24a8:	0c c0       	rjmp	.+24     	; 0x24c2 <vfprintf+0x390>
    24aa:	8a 2d       	mov	r24, r10
    24ac:	86 78       	andi	r24, 0x86	; 134
    24ae:	59 f0       	breq	.+22     	; 0x24c6 <vfprintf+0x394>
    24b0:	a1 fe       	sbrs	r10, 1
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <vfprintf+0x386>
    24b4:	8b e2       	ldi	r24, 0x2B	; 43
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <vfprintf+0x388>
    24b8:	80 e2       	ldi	r24, 0x20	; 32
    24ba:	a7 fc       	sbrc	r10, 7
    24bc:	8d e2       	ldi	r24, 0x2D	; 45
    24be:	b6 01       	movw	r22, r12
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24c6:	89 14       	cp	r8, r9
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <vfprintf+0x3a6>
    24ca:	b6 01       	movw	r22, r12
    24cc:	80 e3       	ldi	r24, 0x30	; 48
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24d4:	9a 94       	dec	r9
    24d6:	f7 cf       	rjmp	.-18     	; 0x24c6 <vfprintf+0x394>
    24d8:	8a 94       	dec	r8
    24da:	f3 01       	movw	r30, r6
    24dc:	e8 0d       	add	r30, r8
    24de:	f1 1d       	adc	r31, r1
    24e0:	80 81       	ld	r24, Z
    24e2:	b6 01       	movw	r22, r12
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24ea:	81 10       	cpse	r8, r1
    24ec:	f5 cf       	rjmp	.-22     	; 0x24d8 <vfprintf+0x3a6>
    24ee:	22 20       	and	r2, r2
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <vfprintf+0x3c2>
    24f2:	42 ce       	rjmp	.-892    	; 0x2178 <vfprintf+0x46>
    24f4:	b6 01       	movw	r22, r12
    24f6:	80 e2       	ldi	r24, 0x20	; 32
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 b6 12 	call	0x256c	; 0x256c <fputc>
    24fe:	2a 94       	dec	r2
    2500:	f6 cf       	rjmp	.-20     	; 0x24ee <vfprintf+0x3bc>
    2502:	f6 01       	movw	r30, r12
    2504:	86 81       	ldd	r24, Z+6	; 0x06
    2506:	97 81       	ldd	r25, Z+7	; 0x07
    2508:	02 c0       	rjmp	.+4      	; 0x250e <vfprintf+0x3dc>
    250a:	8f ef       	ldi	r24, 0xFF	; 255
    250c:	9f ef       	ldi	r25, 0xFF	; 255
    250e:	2b 96       	adiw	r28, 0x0b	; 11
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
    251a:	0f 91       	pop	r16
    251c:	ff 90       	pop	r15
    251e:	ef 90       	pop	r14
    2520:	df 90       	pop	r13
    2522:	cf 90       	pop	r12
    2524:	bf 90       	pop	r11
    2526:	af 90       	pop	r10
    2528:	9f 90       	pop	r9
    252a:	8f 90       	pop	r8
    252c:	7f 90       	pop	r7
    252e:	6f 90       	pop	r6
    2530:	5f 90       	pop	r5
    2532:	4f 90       	pop	r4
    2534:	3f 90       	pop	r3
    2536:	2f 90       	pop	r2
    2538:	08 95       	ret

0000253a <__ctype_isfalse>:
    253a:	99 27       	eor	r25, r25
    253c:	88 27       	eor	r24, r24

0000253e <__ctype_istrue>:
    253e:	08 95       	ret

00002540 <strnlen_P>:
    2540:	fc 01       	movw	r30, r24
    2542:	05 90       	lpm	r0, Z+
    2544:	61 50       	subi	r22, 0x01	; 1
    2546:	70 40       	sbci	r23, 0x00	; 0
    2548:	01 10       	cpse	r0, r1
    254a:	d8 f7       	brcc	.-10     	; 0x2542 <strnlen_P+0x2>
    254c:	80 95       	com	r24
    254e:	90 95       	com	r25
    2550:	8e 0f       	add	r24, r30
    2552:	9f 1f       	adc	r25, r31
    2554:	08 95       	ret

00002556 <strnlen>:
    2556:	fc 01       	movw	r30, r24
    2558:	61 50       	subi	r22, 0x01	; 1
    255a:	70 40       	sbci	r23, 0x00	; 0
    255c:	01 90       	ld	r0, Z+
    255e:	01 10       	cpse	r0, r1
    2560:	d8 f7       	brcc	.-10     	; 0x2558 <strnlen+0x2>
    2562:	80 95       	com	r24
    2564:	90 95       	com	r25
    2566:	8e 0f       	add	r24, r30
    2568:	9f 1f       	adc	r25, r31
    256a:	08 95       	ret

0000256c <fputc>:
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	fb 01       	movw	r30, r22
    2576:	23 81       	ldd	r18, Z+3	; 0x03
    2578:	21 fd       	sbrc	r18, 1
    257a:	03 c0       	rjmp	.+6      	; 0x2582 <fputc+0x16>
    257c:	8f ef       	ldi	r24, 0xFF	; 255
    257e:	9f ef       	ldi	r25, 0xFF	; 255
    2580:	2c c0       	rjmp	.+88     	; 0x25da <fputc+0x6e>
    2582:	22 ff       	sbrs	r18, 2
    2584:	16 c0       	rjmp	.+44     	; 0x25b2 <fputc+0x46>
    2586:	46 81       	ldd	r20, Z+6	; 0x06
    2588:	57 81       	ldd	r21, Z+7	; 0x07
    258a:	24 81       	ldd	r18, Z+4	; 0x04
    258c:	35 81       	ldd	r19, Z+5	; 0x05
    258e:	42 17       	cp	r20, r18
    2590:	53 07       	cpc	r21, r19
    2592:	44 f4       	brge	.+16     	; 0x25a4 <fputc+0x38>
    2594:	a0 81       	ld	r26, Z
    2596:	b1 81       	ldd	r27, Z+1	; 0x01
    2598:	9d 01       	movw	r18, r26
    259a:	2f 5f       	subi	r18, 0xFF	; 255
    259c:	3f 4f       	sbci	r19, 0xFF	; 255
    259e:	20 83       	st	Z, r18
    25a0:	31 83       	std	Z+1, r19	; 0x01
    25a2:	8c 93       	st	X, r24
    25a4:	26 81       	ldd	r18, Z+6	; 0x06
    25a6:	37 81       	ldd	r19, Z+7	; 0x07
    25a8:	2f 5f       	subi	r18, 0xFF	; 255
    25aa:	3f 4f       	sbci	r19, 0xFF	; 255
    25ac:	26 83       	std	Z+6, r18	; 0x06
    25ae:	37 83       	std	Z+7, r19	; 0x07
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <fputc+0x6e>
    25b2:	8b 01       	movw	r16, r22
    25b4:	ec 01       	movw	r28, r24
    25b6:	fb 01       	movw	r30, r22
    25b8:	00 84       	ldd	r0, Z+8	; 0x08
    25ba:	f1 85       	ldd	r31, Z+9	; 0x09
    25bc:	e0 2d       	mov	r30, r0
    25be:	09 95       	icall
    25c0:	89 2b       	or	r24, r25
    25c2:	e1 f6       	brne	.-72     	; 0x257c <fputc+0x10>
    25c4:	d8 01       	movw	r26, r16
    25c6:	16 96       	adiw	r26, 0x06	; 6
    25c8:	8d 91       	ld	r24, X+
    25ca:	9c 91       	ld	r25, X
    25cc:	17 97       	sbiw	r26, 0x07	; 7
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	16 96       	adiw	r26, 0x06	; 6
    25d2:	8d 93       	st	X+, r24
    25d4:	9c 93       	st	X, r25
    25d6:	17 97       	sbiw	r26, 0x07	; 7
    25d8:	ce 01       	movw	r24, r28
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	1f 91       	pop	r17
    25e0:	0f 91       	pop	r16
    25e2:	08 95       	ret

000025e4 <__ultoa_invert>:
    25e4:	fa 01       	movw	r30, r20
    25e6:	aa 27       	eor	r26, r26
    25e8:	28 30       	cpi	r18, 0x08	; 8
    25ea:	51 f1       	breq	.+84     	; 0x2640 <__ultoa_invert+0x5c>
    25ec:	20 31       	cpi	r18, 0x10	; 16
    25ee:	81 f1       	breq	.+96     	; 0x2650 <__ultoa_invert+0x6c>
    25f0:	e8 94       	clt
    25f2:	6f 93       	push	r22
    25f4:	6e 7f       	andi	r22, 0xFE	; 254
    25f6:	6e 5f       	subi	r22, 0xFE	; 254
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	af 4f       	sbci	r26, 0xFF	; 255
    2600:	b1 e0       	ldi	r27, 0x01	; 1
    2602:	3e d0       	rcall	.+124    	; 0x2680 <__ultoa_invert+0x9c>
    2604:	b4 e0       	ldi	r27, 0x04	; 4
    2606:	3c d0       	rcall	.+120    	; 0x2680 <__ultoa_invert+0x9c>
    2608:	67 0f       	add	r22, r23
    260a:	78 1f       	adc	r23, r24
    260c:	89 1f       	adc	r24, r25
    260e:	9a 1f       	adc	r25, r26
    2610:	a1 1d       	adc	r26, r1
    2612:	68 0f       	add	r22, r24
    2614:	79 1f       	adc	r23, r25
    2616:	8a 1f       	adc	r24, r26
    2618:	91 1d       	adc	r25, r1
    261a:	a1 1d       	adc	r26, r1
    261c:	6a 0f       	add	r22, r26
    261e:	71 1d       	adc	r23, r1
    2620:	81 1d       	adc	r24, r1
    2622:	91 1d       	adc	r25, r1
    2624:	a1 1d       	adc	r26, r1
    2626:	20 d0       	rcall	.+64     	; 0x2668 <__ultoa_invert+0x84>
    2628:	09 f4       	brne	.+2      	; 0x262c <__ultoa_invert+0x48>
    262a:	68 94       	set
    262c:	3f 91       	pop	r19
    262e:	2a e0       	ldi	r18, 0x0A	; 10
    2630:	26 9f       	mul	r18, r22
    2632:	11 24       	eor	r1, r1
    2634:	30 19       	sub	r19, r0
    2636:	30 5d       	subi	r19, 0xD0	; 208
    2638:	31 93       	st	Z+, r19
    263a:	de f6       	brtc	.-74     	; 0x25f2 <__ultoa_invert+0xe>
    263c:	cf 01       	movw	r24, r30
    263e:	08 95       	ret
    2640:	46 2f       	mov	r20, r22
    2642:	47 70       	andi	r20, 0x07	; 7
    2644:	40 5d       	subi	r20, 0xD0	; 208
    2646:	41 93       	st	Z+, r20
    2648:	b3 e0       	ldi	r27, 0x03	; 3
    264a:	0f d0       	rcall	.+30     	; 0x266a <__ultoa_invert+0x86>
    264c:	c9 f7       	brne	.-14     	; 0x2640 <__ultoa_invert+0x5c>
    264e:	f6 cf       	rjmp	.-20     	; 0x263c <__ultoa_invert+0x58>
    2650:	46 2f       	mov	r20, r22
    2652:	4f 70       	andi	r20, 0x0F	; 15
    2654:	40 5d       	subi	r20, 0xD0	; 208
    2656:	4a 33       	cpi	r20, 0x3A	; 58
    2658:	18 f0       	brcs	.+6      	; 0x2660 <__ultoa_invert+0x7c>
    265a:	49 5d       	subi	r20, 0xD9	; 217
    265c:	31 fd       	sbrc	r19, 1
    265e:	40 52       	subi	r20, 0x20	; 32
    2660:	41 93       	st	Z+, r20
    2662:	02 d0       	rcall	.+4      	; 0x2668 <__ultoa_invert+0x84>
    2664:	a9 f7       	brne	.-22     	; 0x2650 <__ultoa_invert+0x6c>
    2666:	ea cf       	rjmp	.-44     	; 0x263c <__ultoa_invert+0x58>
    2668:	b4 e0       	ldi	r27, 0x04	; 4
    266a:	a6 95       	lsr	r26
    266c:	97 95       	ror	r25
    266e:	87 95       	ror	r24
    2670:	77 95       	ror	r23
    2672:	67 95       	ror	r22
    2674:	ba 95       	dec	r27
    2676:	c9 f7       	brne	.-14     	; 0x266a <__ultoa_invert+0x86>
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	61 05       	cpc	r22, r1
    267c:	71 05       	cpc	r23, r1
    267e:	08 95       	ret
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	0a 2e       	mov	r0, r26
    2686:	06 94       	lsr	r0
    2688:	57 95       	ror	r21
    268a:	47 95       	ror	r20
    268c:	37 95       	ror	r19
    268e:	27 95       	ror	r18
    2690:	ba 95       	dec	r27
    2692:	c9 f7       	brne	.-14     	; 0x2686 <__ultoa_invert+0xa2>
    2694:	62 0f       	add	r22, r18
    2696:	73 1f       	adc	r23, r19
    2698:	84 1f       	adc	r24, r20
    269a:	95 1f       	adc	r25, r21
    269c:	a0 1d       	adc	r26, r0
    269e:	08 95       	ret

000026a0 <eeprom_read_byte>:
    26a0:	03 d0       	rcall	.+6      	; 0x26a8 <eeprom_mapen>
    26a2:	80 81       	ld	r24, Z
    26a4:	99 27       	eor	r25, r25
    26a6:	08 95       	ret

000026a8 <eeprom_mapen>:
    26a8:	fc 01       	movw	r30, r24
    26aa:	e0 50       	subi	r30, 0x00	; 0
    26ac:	fc 4e       	sbci	r31, 0xEC	; 236
    26ae:	08 95       	ret

000026b0 <eeprom_update_byte>:
    26b0:	26 2f       	mov	r18, r22

000026b2 <eeprom_update_r18>:
    26b2:	0e 94 54 13 	call	0x26a8	; 0x26a8 <eeprom_mapen>
    26b6:	00 80       	ld	r0, Z
    26b8:	02 16       	cp	r0, r18
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <eeprom_update_r18+0x10>
    26bc:	0e 94 64 13 	call	0x26c8	; 0x26c8 <eeprom_write_r18>
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	08 95       	ret

000026c6 <eeprom_write_byte>:
    26c6:	26 2f       	mov	r18, r22

000026c8 <eeprom_write_r18>:
    26c8:	af 93       	push	r26
    26ca:	bf 93       	push	r27
    26cc:	e0 e0       	ldi	r30, 0x00	; 0
    26ce:	f0 e1       	ldi	r31, 0x10	; 16
    26d0:	32 81       	ldd	r19, Z+2	; 0x02
    26d2:	31 fd       	sbrc	r19, 1
    26d4:	fd cf       	rjmp	.-6      	; 0x26d0 <eeprom_write_r18+0x8>
    26d6:	3d e9       	ldi	r19, 0x9D	; 157
    26d8:	34 bf       	out	0x34, r19	; 52
    26da:	33 e1       	ldi	r19, 0x13	; 19
    26dc:	30 83       	st	Z, r19
    26de:	dc 01       	movw	r26, r24
    26e0:	a0 50       	subi	r26, 0x00	; 0
    26e2:	bc 4e       	sbci	r27, 0xEC	; 236
    26e4:	2c 93       	st	X, r18
    26e6:	3d e9       	ldi	r19, 0x9D	; 157
    26e8:	34 bf       	out	0x34, r19	; 52
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	20 83       	st	Z, r18
    26ee:	01 96       	adiw	r24, 0x01	; 1
    26f0:	bf 91       	pop	r27
    26f2:	af 91       	pop	r26
    26f4:	08 95       	ret

000026f6 <__mulsi3>:
    26f6:	db 01       	movw	r26, r22
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	0e 94 ad 13 	call	0x275a	; 0x275a <__muluhisi3>
    2700:	bf 91       	pop	r27
    2702:	af 91       	pop	r26
    2704:	a2 9f       	mul	r26, r18
    2706:	80 0d       	add	r24, r0
    2708:	91 1d       	adc	r25, r1
    270a:	a3 9f       	mul	r26, r19
    270c:	90 0d       	add	r25, r0
    270e:	b2 9f       	mul	r27, r18
    2710:	90 0d       	add	r25, r0
    2712:	11 24       	eor	r1, r1
    2714:	08 95       	ret

00002716 <__udivmodsi4>:
    2716:	a1 e2       	ldi	r26, 0x21	; 33
    2718:	1a 2e       	mov	r1, r26
    271a:	aa 1b       	sub	r26, r26
    271c:	bb 1b       	sub	r27, r27
    271e:	fd 01       	movw	r30, r26
    2720:	0d c0       	rjmp	.+26     	; 0x273c <__udivmodsi4_ep>

00002722 <__udivmodsi4_loop>:
    2722:	aa 1f       	adc	r26, r26
    2724:	bb 1f       	adc	r27, r27
    2726:	ee 1f       	adc	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	a2 17       	cp	r26, r18
    272c:	b3 07       	cpc	r27, r19
    272e:	e4 07       	cpc	r30, r20
    2730:	f5 07       	cpc	r31, r21
    2732:	20 f0       	brcs	.+8      	; 0x273c <__udivmodsi4_ep>
    2734:	a2 1b       	sub	r26, r18
    2736:	b3 0b       	sbc	r27, r19
    2738:	e4 0b       	sbc	r30, r20
    273a:	f5 0b       	sbc	r31, r21

0000273c <__udivmodsi4_ep>:
    273c:	66 1f       	adc	r22, r22
    273e:	77 1f       	adc	r23, r23
    2740:	88 1f       	adc	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	1a 94       	dec	r1
    2746:	69 f7       	brne	.-38     	; 0x2722 <__udivmodsi4_loop>
    2748:	60 95       	com	r22
    274a:	70 95       	com	r23
    274c:	80 95       	com	r24
    274e:	90 95       	com	r25
    2750:	9b 01       	movw	r18, r22
    2752:	ac 01       	movw	r20, r24
    2754:	bd 01       	movw	r22, r26
    2756:	cf 01       	movw	r24, r30
    2758:	08 95       	ret

0000275a <__muluhisi3>:
    275a:	0e 94 b8 13 	call	0x2770	; 0x2770 <__umulhisi3>
    275e:	a5 9f       	mul	r26, r21
    2760:	90 0d       	add	r25, r0
    2762:	b4 9f       	mul	r27, r20
    2764:	90 0d       	add	r25, r0
    2766:	a4 9f       	mul	r26, r20
    2768:	80 0d       	add	r24, r0
    276a:	91 1d       	adc	r25, r1
    276c:	11 24       	eor	r1, r1
    276e:	08 95       	ret

00002770 <__umulhisi3>:
    2770:	a2 9f       	mul	r26, r18
    2772:	b0 01       	movw	r22, r0
    2774:	b3 9f       	mul	r27, r19
    2776:	c0 01       	movw	r24, r0
    2778:	a3 9f       	mul	r26, r19
    277a:	70 0d       	add	r23, r0
    277c:	81 1d       	adc	r24, r1
    277e:	11 24       	eor	r1, r1
    2780:	91 1d       	adc	r25, r1
    2782:	b2 9f       	mul	r27, r18
    2784:	70 0d       	add	r23, r0
    2786:	81 1d       	adc	r24, r1
    2788:	11 24       	eor	r1, r1
    278a:	91 1d       	adc	r25, r1
    278c:	08 95       	ret

0000278e <_exit>:
    278e:	f8 94       	cli

00002790 <__stop_program>:
    2790:	ff cf       	rjmp	.-2      	; 0x2790 <__stop_program>
